
CDC3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  20000000  080061ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
  7 .bss          00004b20  20000060  20000060  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004b80  20004b80  00020060  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010b87  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002adc  00000000  00000000  00030c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000de8  00000000  00000000  000336f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c80  00000000  00000000  000344e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006182  00000000  00000000  00035160  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000041af  00000000  00000000  0003b2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f491  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003a7c  00000000  00000000  0003f510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ec8 	.word	0x08005ec8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005ec8 	.word	0x08005ec8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f092 0f00 	teq	r2, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e720      	b.n	8000324 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aedc 	beq.w	80002d2 <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6c1      	b.n	80002d2 <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <vApplicationGetIdleTaskMemory+0x30>)
 8000a7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	2000007c 	.word	0x2000007c
 8000a94:	200000d0 	.word	0x200000d0

08000a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000aa4:	f001 fa66 	bl	8001f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000aa8:	4b57      	ldr	r3, [pc, #348]	; (8000c08 <pvPortMalloc+0x170>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d101      	bne.n	8000ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000ab0:	f000 f90c 	bl	8000ccc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ab4:	4b55      	ldr	r3, [pc, #340]	; (8000c0c <pvPortMalloc+0x174>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f040 808c 	bne.w	8000bda <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d01c      	beq.n	8000b02 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000ac8:	2208      	movs	r2, #8
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d013      	beq.n	8000b02 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f023 0307 	bic.w	r3, r3, #7
 8000ae0:	3308      	adds	r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d009      	beq.n	8000b02 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af2:	f383 8811 	msr	BASEPRI, r3
 8000af6:	f3bf 8f6f 	isb	sy
 8000afa:	f3bf 8f4f 	dsb	sy
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e7fe      	b.n	8000b00 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d068      	beq.n	8000bda <pvPortMalloc+0x142>
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <pvPortMalloc+0x178>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d863      	bhi.n	8000bda <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b12:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <pvPortMalloc+0x17c>)
 8000b14:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000b16:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <pvPortMalloc+0x17c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b1c:	e004      	b.n	8000b28 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d203      	bcs.n	8000b3a <pvPortMalloc+0xa2>
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1f1      	bne.n	8000b1e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <pvPortMalloc+0x170>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d04a      	beq.n	8000bda <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2208      	movs	r2, #8
 8000b4a:	4413      	add	r3, r2
 8000b4c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	1ad2      	subs	r2, r2, r3
 8000b5e:	2308      	movs	r3, #8
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d91e      	bls.n	8000ba4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d009      	beq.n	8000b8c <pvPortMalloc+0xf4>
 8000b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b7c:	f383 8811 	msr	BASEPRI, r3
 8000b80:	f3bf 8f6f 	isb	sy
 8000b84:	f3bf 8f4f 	dsb	sy
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	e7fe      	b.n	8000b8a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b9e:	69b8      	ldr	r0, [r7, #24]
 8000ba0:	f000 f8f6 	bl	8000d90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <pvPortMalloc+0x178>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <pvPortMalloc+0x178>)
 8000bb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <pvPortMalloc+0x178>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <pvPortMalloc+0x180>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d203      	bcs.n	8000bc6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <pvPortMalloc+0x178>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <pvPortMalloc+0x180>)
 8000bc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <pvPortMalloc+0x174>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000bda:	f001 f9d9 	bl	8001f90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d009      	beq.n	8000bfc <pvPortMalloc+0x164>
 8000be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bec:	f383 8811 	msr	BASEPRI, r3
 8000bf0:	f3bf 8f6f 	isb	sy
 8000bf4:	f3bf 8f4f 	dsb	sy
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	e7fe      	b.n	8000bfa <pvPortMalloc+0x162>
	return pvReturn;
 8000bfc:	69fb      	ldr	r3, [r7, #28]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20003ed8 	.word	0x20003ed8
 8000c0c:	20003ee4 	.word	0x20003ee4
 8000c10:	20003edc 	.word	0x20003edc
 8000c14:	20003ed0 	.word	0x20003ed0
 8000c18:	20003ee0 	.word	0x20003ee0

08000c1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d046      	beq.n	8000cbc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	425b      	negs	r3, r3
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4413      	add	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <vPortFree+0xa8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d109      	bne.n	8000c5e <vPortFree+0x42>
 8000c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4e:	f383 8811 	msr	BASEPRI, r3
 8000c52:	f3bf 8f6f 	isb	sy
 8000c56:	f3bf 8f4f 	dsb	sy
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e7fe      	b.n	8000c5c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d009      	beq.n	8000c7a <vPortFree+0x5e>
 8000c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c6a:	f383 8811 	msr	BASEPRI, r3
 8000c6e:	f3bf 8f6f 	isb	sy
 8000c72:	f3bf 8f4f 	dsb	sy
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	e7fe      	b.n	8000c78 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <vPortFree+0xa8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d019      	beq.n	8000cbc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d115      	bne.n	8000cbc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <vPortFree+0xa8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000ca0:	f001 f968 	bl	8001f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <vPortFree+0xac>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <vPortFree+0xac>)
 8000cb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000cb2:	6938      	ldr	r0, [r7, #16]
 8000cb4:	f000 f86c 	bl	8000d90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000cb8:	f001 f96a 	bl	8001f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20003ee4 	.word	0x20003ee4
 8000cc8:	20003edc 	.word	0x20003edc

08000ccc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000cd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <prvHeapInit+0xac>)
 8000cda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00c      	beq.n	8000d00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3307      	adds	r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f023 0307 	bic.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <prvHeapInit+0xac>)
 8000cfc:	4413      	add	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <prvHeapInit+0xb0>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <prvHeapInit+0xb0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	4413      	add	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d18:	2208      	movs	r2, #8
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	1a9b      	subs	r3, r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f023 0307 	bic.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <prvHeapInit+0xb4>)
 8000d2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <prvHeapInit+0xb4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <prvHeapInit+0xb4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	1ad2      	subs	r2, r2, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <prvHeapInit+0xb4>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <prvHeapInit+0xb8>)
 8000d5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <prvHeapInit+0xbc>)
 8000d62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <prvHeapInit+0xc0>)
 8000d66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	200002d0 	.word	0x200002d0
 8000d7c:	20003ed0 	.word	0x20003ed0
 8000d80:	20003ed8 	.word	0x20003ed8
 8000d84:	20003ee0 	.word	0x20003ee0
 8000d88:	20003edc 	.word	0x20003edc
 8000d8c:	20003ee4 	.word	0x20003ee4

08000d90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <prvInsertBlockIntoFreeList+0xac>)
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e002      	b.n	8000da4 <prvInsertBlockIntoFreeList+0x14>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3f7      	bcc.n	8000d9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	441a      	add	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d108      	bne.n	8000dd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	441a      	add	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	441a      	add	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d118      	bne.n	8000e18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <prvInsertBlockIntoFreeList+0xb0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d00d      	beq.n	8000e0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	441a      	add	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e008      	b.n	8000e20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <prvInsertBlockIntoFreeList+0xb0>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e003      	b.n	8000e20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d002      	beq.n	8000e2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20003ed0 	.word	0x20003ed0
 8000e40:	20003ed8 	.word	0x20003ed8

08000e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f103 0208 	add.w	r2, r3, #8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f103 0208 	add.w	r2, r3, #8
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0208 	add.w	r2, r3, #8
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000efc:	d103      	bne.n	8000f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e00c      	b.n	8000f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e002      	b.n	8000f14 <vListInsert+0x2e>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d9f6      	bls.n	8000f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6892      	ldr	r2, [r2, #8]
 8000f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6852      	ldr	r2, [r2, #4]
 8000f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d103      	bne.n	8000f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3b04      	subs	r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	f023 0201 	bic.w	r2, r3, #1
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3b04      	subs	r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <pxPortInitialiseStack+0x64>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3b14      	subs	r3, #20
 8000fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3b04      	subs	r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f06f 0202 	mvn.w	r2, #2
 8000ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3b20      	subs	r3, #32
 8001000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	08001015 	.word	0x08001015

08001014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <prvTaskExitError+0x50>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001026:	d009      	beq.n	800103c <prvTaskExitError+0x28>
 8001028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800102c:	f383 8811 	msr	BASEPRI, r3
 8001030:	f3bf 8f6f 	isb	sy
 8001034:	f3bf 8f4f 	dsb	sy
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	e7fe      	b.n	800103a <prvTaskExitError+0x26>
 800103c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001040:	f383 8811 	msr	BASEPRI, r3
 8001044:	f3bf 8f6f 	isb	sy
 8001048:	f3bf 8f4f 	dsb	sy
 800104c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800104e:	bf00      	nop
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0fc      	beq.n	8001050 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000000 	.word	0x20000000
	...

08001070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <pxCurrentTCBConst2>)
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	6808      	ldr	r0, [r1, #0]
 8001076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800107a:	f380 8809 	msr	PSP, r0
 800107e:	f3bf 8f6f 	isb	sy
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	f380 8811 	msr	BASEPRI, r0
 800108a:	4770      	bx	lr
 800108c:	f3af 8000 	nop.w

08001090 <pxCurrentTCBConst2>:
 8001090:	20003ef0 	.word	0x20003ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop

08001098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001098:	4808      	ldr	r0, [pc, #32]	; (80010bc <prvPortStartFirstTask+0x24>)
 800109a:	6800      	ldr	r0, [r0, #0]
 800109c:	6800      	ldr	r0, [r0, #0]
 800109e:	f380 8808 	msr	MSP, r0
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	f380 8814 	msr	CONTROL, r0
 80010aa:	b662      	cpsie	i
 80010ac:	b661      	cpsie	f
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	f3bf 8f6f 	isb	sy
 80010b6:	df00      	svc	0
 80010b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80010ba:	bf00      	nop
 80010bc:	e000ed08 	.word	0xe000ed08

080010c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80010c6:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <xPortStartScheduler+0x118>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a44      	ldr	r2, [pc, #272]	; (80011dc <xPortStartScheduler+0x11c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d109      	bne.n	80010e4 <xPortStartScheduler+0x24>
 80010d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d4:	f383 8811 	msr	BASEPRI, r3
 80010d8:	f3bf 8f6f 	isb	sy
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	e7fe      	b.n	80010e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80010e4:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <xPortStartScheduler+0x118>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a3d      	ldr	r2, [pc, #244]	; (80011e0 <xPortStartScheduler+0x120>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d109      	bne.n	8001102 <xPortStartScheduler+0x42>
 80010ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	f3bf 8f6f 	isb	sy
 80010fa:	f3bf 8f4f 	dsb	sy
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	e7fe      	b.n	8001100 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <xPortStartScheduler+0x124>)
 8001104:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <xPortStartScheduler+0x128>)
 8001128:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <xPortStartScheduler+0x12c>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001130:	e009      	b.n	8001146 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <xPortStartScheduler+0x12c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3b01      	subs	r3, #1
 8001138:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <xPortStartScheduler+0x12c>)
 800113a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	2b80      	cmp	r3, #128	; 0x80
 8001150:	d0ef      	beq.n	8001132 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <xPortStartScheduler+0x12c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	d009      	beq.n	8001172 <xPortStartScheduler+0xb2>
 800115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	f3bf 8f6f 	isb	sy
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	e7fe      	b.n	8001170 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <xPortStartScheduler+0x12c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <xPortStartScheduler+0x12c>)
 800117a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <xPortStartScheduler+0x12c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <xPortStartScheduler+0x12c>)
 8001186:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <xPortStartScheduler+0x130>)
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <xPortStartScheduler+0x130>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <xPortStartScheduler+0x130>)
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <xPortStartScheduler+0x130>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80011a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80011a8:	f000 f8d6 	bl	8001358 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <xPortStartScheduler+0x134>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80011b2:	f000 f8f5 	bl	80013a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <xPortStartScheduler+0x138>)
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <xPortStartScheduler+0x138>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80011c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80011c2:	f7ff ff69 	bl	8001098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80011c6:	f001 f843 	bl	8002250 <vTaskSwitchContext>
	prvTaskExitError();
 80011ca:	f7ff ff23 	bl	8001014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	e000ed00 	.word	0xe000ed00
 80011dc:	410fc271 	.word	0x410fc271
 80011e0:	410fc270 	.word	0x410fc270
 80011e4:	e000e400 	.word	0xe000e400
 80011e8:	20003ee8 	.word	0x20003ee8
 80011ec:	20003eec 	.word	0x20003eec
 80011f0:	e000ed20 	.word	0xe000ed20
 80011f4:	20000000 	.word	0x20000000
 80011f8:	e000ef34 	.word	0xe000ef34

080011fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <vPortEnterCritical+0x54>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <vPortEnterCritical+0x54>)
 800121c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <vPortEnterCritical+0x54>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10e      	bne.n	8001244 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <vPortEnterCritical+0x58>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d009      	beq.n	8001244 <vPortEnterCritical+0x48>
 8001230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	e7fe      	b.n	8001242 <vPortEnterCritical+0x46>
	}
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	20000000 	.word	0x20000000
 8001254:	e000ed04 	.word	0xe000ed04

08001258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <vPortExitCritical+0x4c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <vPortExitCritical+0x22>
 8001266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126a:	f383 8811 	msr	BASEPRI, r3
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f3bf 8f4f 	dsb	sy
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	e7fe      	b.n	8001278 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <vPortExitCritical+0x4c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <vPortExitCritical+0x4c>)
 8001282:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <vPortExitCritical+0x4c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d104      	bne.n	8001296 <vPortExitCritical+0x3e>
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
	...

080012b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80012b0:	f3ef 8009 	mrs	r0, PSP
 80012b4:	f3bf 8f6f 	isb	sy
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <pxCurrentTCBConst>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f01e 0f10 	tst.w	lr, #16
 80012c0:	bf08      	it	eq
 80012c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80012c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ca:	6010      	str	r0, [r2, #0]
 80012cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80012d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80012d4:	f380 8811 	msr	BASEPRI, r0
 80012d8:	f3bf 8f4f 	dsb	sy
 80012dc:	f3bf 8f6f 	isb	sy
 80012e0:	f000 ffb6 	bl	8002250 <vTaskSwitchContext>
 80012e4:	f04f 0000 	mov.w	r0, #0
 80012e8:	f380 8811 	msr	BASEPRI, r0
 80012ec:	bc09      	pop	{r0, r3}
 80012ee:	6819      	ldr	r1, [r3, #0]
 80012f0:	6808      	ldr	r0, [r1, #0]
 80012f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f6:	f01e 0f10 	tst.w	lr, #16
 80012fa:	bf08      	it	eq
 80012fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001300:	f380 8809 	msr	PSP, r0
 8001304:	f3bf 8f6f 	isb	sy
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	f3af 8000 	nop.w

08001310 <pxCurrentTCBConst>:
 8001310:	20003ef0 	.word	0x20003ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop

08001318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	__asm volatile
 800131e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001322:	f383 8811 	msr	BASEPRI, r3
 8001326:	f3bf 8f6f 	isb	sy
 800132a:	f3bf 8f4f 	dsb	sy
 800132e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001330:	f000 feca 	bl	80020c8 <xTaskIncrementTick>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <SysTick_Handler+0x3c>)
 800133c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	e000ed04 	.word	0xe000ed04

08001358 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <vPortSetupTimerInterrupt+0x34>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <vPortSetupTimerInterrupt+0x38>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <vPortSetupTimerInterrupt+0x3c>)
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <vPortSetupTimerInterrupt+0x40>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	490b      	ldr	r1, [pc, #44]	; (800139c <vPortSetupTimerInterrupt+0x44>)
 8001370:	fba1 1303 	umull	r1, r3, r1, r3
 8001374:	099b      	lsrs	r3, r3, #6
 8001376:	3b01      	subs	r3, #1
 8001378:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <vPortSetupTimerInterrupt+0x34>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010
 8001390:	e000e018 	.word	0xe000e018
 8001394:	e000e014 	.word	0xe000e014
 8001398:	2000003c 	.word	0x2000003c
 800139c:	10624dd3 	.word	0x10624dd3

080013a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80013a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80013b0 <vPortEnableVFP+0x10>
 80013a4:	6801      	ldr	r1, [r0, #0]
 80013a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80013aa:	6001      	str	r1, [r0, #0]
 80013ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80013ae:	bf00      	nop
 80013b0:	e000ed88 	.word	0xe000ed88

080013b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <xQueueGenericReset+0x28>
	__asm volatile
 80013c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013cc:	f383 8811 	msr	BASEPRI, r3
 80013d0:	f3bf 8f6f 	isb	sy
 80013d4:	f3bf 8f4f 	dsb	sy
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	e7fe      	b.n	80013da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80013dc:	f7ff ff0e 	bl	80011fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	68f9      	ldr	r1, [r7, #12]
 80013ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	441a      	add	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140c:	3b01      	subs	r3, #1
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	441a      	add	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	22ff      	movs	r2, #255	; 0xff
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d114      	bne.n	800145c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01a      	beq.n	8001470 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3310      	adds	r3, #16
 800143e:	4618      	mov	r0, r3
 8001440:	f000 ff84 	bl	800234c <xTaskRemoveFromEventList>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d012      	beq.n	8001470 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <xQueueGenericReset+0xcc>)
 800144c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	f3bf 8f4f 	dsb	sy
 8001456:	f3bf 8f6f 	isb	sy
 800145a:	e009      	b.n	8001470 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3310      	adds	r3, #16
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fcef 	bl	8000e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3324      	adds	r3, #36	; 0x24
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fcea 	bl	8000e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001470:	f7ff fef2 	bl	8001258 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000ed04 	.word	0xe000ed04

08001484 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	4613      	mov	r3, r2
 8001490:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <xQueueGenericCreate+0x28>
 8001498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149c:	f383 8811 	msr	BASEPRI, r3
 80014a0:	f3bf 8f6f 	isb	sy
 80014a4:	f3bf 8f4f 	dsb	sy
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	e7fe      	b.n	80014aa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e004      	b.n	80014c2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3348      	adds	r3, #72	; 0x48
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fae6 	bl	8000a98 <pvPortMalloc>
 80014cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00f      	beq.n	80014f4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	3348      	adds	r3, #72	; 0x48
 80014d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f805 	bl	80014fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80014f4:	69bb      	ldr	r3, [r7, #24]
	}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e002      	b.n	8001520 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800152c:	2101      	movs	r1, #1
 800152e:	69b8      	ldr	r0, [r7, #24]
 8001530:	f7ff ff40 	bl	80013b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800154a:	2300      	movs	r3, #0
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <xQueueGenericSend+0x30>
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
 800156a:	e7fe      	b.n	800156a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d103      	bne.n	800157a <xQueueGenericSend+0x3e>
 8001572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <xQueueGenericSend+0x42>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <xQueueGenericSend+0x44>
 800157e:	2300      	movs	r3, #0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <xQueueGenericSend+0x5c>
 8001584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001588:	f383 8811 	msr	BASEPRI, r3
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f3bf 8f4f 	dsb	sy
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
 8001596:	e7fe      	b.n	8001596 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d103      	bne.n	80015a6 <xQueueGenericSend+0x6a>
 800159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <xQueueGenericSend+0x6e>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <xQueueGenericSend+0x70>
 80015aa:	2300      	movs	r3, #0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <xQueueGenericSend+0x88>
 80015b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b4:	f383 8811 	msr	BASEPRI, r3
 80015b8:	f3bf 8f6f 	isb	sy
 80015bc:	f3bf 8f4f 	dsb	sy
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	e7fe      	b.n	80015c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015c4:	f001 f880 	bl	80026c8 <xTaskGetSchedulerState>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <xQueueGenericSend+0x98>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <xQueueGenericSend+0x9c>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <xQueueGenericSend+0x9e>
 80015d8:	2300      	movs	r3, #0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <xQueueGenericSend+0xb6>
 80015de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e2:	f383 8811 	msr	BASEPRI, r3
 80015e6:	f3bf 8f6f 	isb	sy
 80015ea:	f3bf 8f4f 	dsb	sy
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	e7fe      	b.n	80015f0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80015f2:	f7ff fe03 	bl	80011fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	429a      	cmp	r2, r3
 8001600:	d302      	bcc.n	8001608 <xQueueGenericSend+0xcc>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d129      	bne.n	800165c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800160e:	f000 f9af 	bl	8001970 <prvCopyDataToQueue>
 8001612:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	2b00      	cmp	r3, #0
 800161a:	d010      	beq.n	800163e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800161c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161e:	3324      	adds	r3, #36	; 0x24
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fe93 	bl	800234c <xTaskRemoveFromEventList>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800162c:	4b3f      	ldr	r3, [pc, #252]	; (800172c <xQueueGenericSend+0x1f0>)
 800162e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f3bf 8f4f 	dsb	sy
 8001638:	f3bf 8f6f 	isb	sy
 800163c:	e00a      	b.n	8001654 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <xQueueGenericSend+0x1f0>)
 8001646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001654:	f7ff fe00 	bl	8001258 <vPortExitCritical>
				return pdPASS;
 8001658:	2301      	movs	r3, #1
 800165a:	e063      	b.n	8001724 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001662:	f7ff fdf9 	bl	8001258 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001666:	2300      	movs	r3, #0
 8001668:	e05c      	b.n	8001724 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800166a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166c:	2b00      	cmp	r3, #0
 800166e:	d106      	bne.n	800167e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fecb 	bl	8002410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800167a:	2301      	movs	r3, #1
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800167e:	f7ff fdeb 	bl	8001258 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001682:	f000 fc77 	bl	8001f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001686:	f7ff fdb9 	bl	80011fc <vPortEnterCritical>
 800168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001690:	b25b      	sxtb	r3, r3
 8001692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001696:	d103      	bne.n	80016a0 <xQueueGenericSend+0x164>
 8001698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ac:	d103      	bne.n	80016b6 <xQueueGenericSend+0x17a>
 80016ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016b6:	f7ff fdcf 	bl	8001258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016ba:	1d3a      	adds	r2, r7, #4
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 feba 	bl	800243c <xTaskCheckForTimeOut>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d124      	bne.n	8001718 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80016ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016d0:	f000 fa20 	bl	8001b14 <prvIsQueueFull>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d018      	beq.n	800170c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80016da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016dc:	3310      	adds	r3, #16
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fe0e 	bl	8002304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80016e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016ea:	f000 f9ab 	bl	8001a44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80016ee:	f000 fc4f 	bl	8001f90 <xTaskResumeAll>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f47f af7c 	bne.w	80015f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <xQueueGenericSend+0x1f0>)
 80016fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	f3bf 8f6f 	isb	sy
 800170a:	e772      	b.n	80015f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800170c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800170e:	f000 f999 	bl	8001a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001712:	f000 fc3d 	bl	8001f90 <xTaskResumeAll>
 8001716:	e76c      	b.n	80015f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800171a:	f000 f993 	bl	8001a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800171e:	f000 fc37 	bl	8001f90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001722:	2300      	movs	r3, #0
		}
	}
}
 8001724:	4618      	mov	r0, r3
 8001726:	3738      	adds	r7, #56	; 0x38
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	e000ed04 	.word	0xe000ed04

08001730 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	; 0x38
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <xQueueSemaphoreTake+0x30>
 800174c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001750:	f383 8811 	msr	BASEPRI, r3
 8001754:	f3bf 8f6f 	isb	sy
 8001758:	f3bf 8f4f 	dsb	sy
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	e7fe      	b.n	800175e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <xQueueSemaphoreTake+0x4c>
 8001768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800176c:	f383 8811 	msr	BASEPRI, r3
 8001770:	f3bf 8f6f 	isb	sy
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e7fe      	b.n	800177a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800177c:	f000 ffa4 	bl	80026c8 <xTaskGetSchedulerState>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <xQueueSemaphoreTake+0x5c>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <xQueueSemaphoreTake+0x60>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <xQueueSemaphoreTake+0x62>
 8001790:	2300      	movs	r3, #0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <xQueueSemaphoreTake+0x7a>
 8001796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179a:	f383 8811 	msr	BASEPRI, r3
 800179e:	f3bf 8f6f 	isb	sy
 80017a2:	f3bf 8f4f 	dsb	sy
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	e7fe      	b.n	80017a8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80017aa:	f7ff fd27 	bl	80011fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80017b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d024      	beq.n	8001804 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80017ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017bc:	1e5a      	subs	r2, r3, #1
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d104      	bne.n	80017d4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80017ca:	f001 f943 	bl	8002a54 <pvTaskIncrementMutexHeldCount>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00f      	beq.n	80017fc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	3310      	adds	r3, #16
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fdb3 	bl	800234c <xTaskRemoveFromEventList>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <xQueueSemaphoreTake+0x20c>)
 80017ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f3bf 8f4f 	dsb	sy
 80017f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80017fc:	f7ff fd2c 	bl	8001258 <vPortExitCritical>
				return pdPASS;
 8001800:	2301      	movs	r3, #1
 8001802:	e096      	b.n	8001932 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d110      	bne.n	800182c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <xQueueSemaphoreTake+0xf4>
 8001810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001814:	f383 8811 	msr	BASEPRI, r3
 8001818:	f3bf 8f6f 	isb	sy
 800181c:	f3bf 8f4f 	dsb	sy
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e7fe      	b.n	8001822 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001824:	f7ff fd18 	bl	8001258 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001828:	2300      	movs	r3, #0
 800182a:	e082      	b.n	8001932 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fdea 	bl	8002410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800183c:	2301      	movs	r3, #1
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001840:	f7ff fd0a 	bl	8001258 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001844:	f000 fb96 	bl	8001f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001848:	f7ff fcd8 	bl	80011fc <vPortEnterCritical>
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001858:	d103      	bne.n	8001862 <xQueueSemaphoreTake+0x132>
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800186e:	d103      	bne.n	8001878 <xQueueSemaphoreTake+0x148>
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001878:	f7ff fcee 	bl	8001258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800187c:	463a      	mov	r2, r7
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fdd9 	bl	800243c <xTaskCheckForTimeOut>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d132      	bne.n	80018f6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001892:	f000 f929 	bl	8001ae8 <prvIsQueueEmpty>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d026      	beq.n	80018ea <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80018a4:	f7ff fcaa 	bl	80011fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 ff29 	bl	8002704 <xTaskPriorityInherit>
 80018b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80018b4:	f7ff fcd0 	bl	8001258 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	3324      	adds	r3, #36	; 0x24
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fd1f 	bl	8002304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80018c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018c8:	f000 f8bc 	bl	8001a44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80018cc:	f000 fb60 	bl	8001f90 <xTaskResumeAll>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f47f af69 	bne.w	80017aa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <xQueueSemaphoreTake+0x20c>)
 80018da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	f3bf 8f4f 	dsb	sy
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	e75f      	b.n	80017aa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80018ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018ec:	f000 f8aa 	bl	8001a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018f0:	f000 fb4e 	bl	8001f90 <xTaskResumeAll>
 80018f4:	e759      	b.n	80017aa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80018f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018f8:	f000 f8a4 	bl	8001a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018fc:	f000 fb48 	bl	8001f90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001902:	f000 f8f1 	bl	8001ae8 <prvIsQueueEmpty>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	f43f af4e 	beq.w	80017aa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001914:	f7ff fc72 	bl	80011fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800191a:	f000 f811 	bl	8001940 <prvGetDisinheritPriorityAfterTimeout>
 800191e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fff6 	bl	8002918 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800192c:	f7ff fc94 	bl	8001258 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001930:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001932:	4618      	mov	r0, r3
 8001934:	3738      	adds	r7, #56	; 0x38
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000ed04 	.word	0xe000ed04

08001940 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e001      	b.n	8001962 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001962:	68fb      	ldr	r3, [r7, #12]
	}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d14d      	bne.n	8001a32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 ff38 	bl	8002810 <xTaskPriorityDisinherit>
 80019a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	e043      	b.n	8001a32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d119      	bne.n	80019e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6898      	ldr	r0, [r3, #8]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	461a      	mov	r2, r3
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	f004 fa64 	bl	8005e88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	441a      	add	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d32b      	bcc.n	8001a32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	e026      	b.n	8001a32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	68d8      	ldr	r0, [r3, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	461a      	mov	r2, r3
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	f004 fa4a 	bl	8005e88 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	425b      	negs	r3, r3
 80019fe:	441a      	add	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	425b      	negs	r3, r3
 8001a1a:	441a      	add	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d105      	bne.n	8001a32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001a3a:	697b      	ldr	r3, [r7, #20]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001a4c:	f7ff fbd6 	bl	80011fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a58:	e011      	b.n	8001a7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d012      	beq.n	8001a88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3324      	adds	r3, #36	; 0x24
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fc70 	bl	800234c <xTaskRemoveFromEventList>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001a72:	f000 fd43 	bl	80024fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dce9      	bgt.n	8001a5a <prvUnlockQueue+0x16>
 8001a86:	e000      	b.n	8001a8a <prvUnlockQueue+0x46>
					break;
 8001a88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	22ff      	movs	r2, #255	; 0xff
 8001a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001a92:	f7ff fbe1 	bl	8001258 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001a96:	f7ff fbb1 	bl	80011fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001aa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001aa2:	e011      	b.n	8001ac8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d012      	beq.n	8001ad2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3310      	adds	r3, #16
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fc4b 	bl	800234c <xTaskRemoveFromEventList>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001abc:	f000 fd1e 	bl	80024fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001ac0:	7bbb      	ldrb	r3, [r7, #14]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dce9      	bgt.n	8001aa4 <prvUnlockQueue+0x60>
 8001ad0:	e000      	b.n	8001ad4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001ad2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	22ff      	movs	r2, #255	; 0xff
 8001ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001adc:	f7ff fbbc 	bl	8001258 <vPortExitCritical>
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001af0:	f7ff fb84 	bl	80011fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e001      	b.n	8001b06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001b06:	f7ff fba7 	bl	8001258 <vPortExitCritical>

	return xReturn;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b1c:	f7ff fb6e 	bl	80011fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d102      	bne.n	8001b32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	e001      	b.n	8001b36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001b36:	f7ff fb8f 	bl	8001258 <vPortExitCritical>

	return xReturn;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <xTaskCreateStatic+0x28>
 8001b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	e7fe      	b.n	8001b6a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <xTaskCreateStatic+0x42>
 8001b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b76:	f383 8811 	msr	BASEPRI, r3
 8001b7a:	f3bf 8f6f 	isb	sy
 8001b7e:	f3bf 8f4f 	dsb	sy
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	e7fe      	b.n	8001b84 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001b86:	2354      	movs	r3, #84	; 0x54
 8001b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b54      	cmp	r3, #84	; 0x54
 8001b8e:	d009      	beq.n	8001ba4 <xTaskCreateStatic+0x60>
 8001b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b94:	f383 8811 	msr	BASEPRI, r3
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	e7fe      	b.n	8001ba2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01e      	beq.n	8001be8 <xTaskCreateStatic+0xa4>
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01b      	beq.n	8001be8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9303      	str	r3, [sp, #12]
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f850 	bl	8001c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001be2:	f000 f8cb 	bl	8001d7c <prvAddNewTaskToReadyList>
 8001be6:	e001      	b.n	8001bec <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001bec:	697b      	ldr	r3, [r7, #20]
	}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b08c      	sub	sp, #48	; 0x30
 8001bfa:	af04      	add	r7, sp, #16
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe ff44 	bl	8000a98 <pvPortMalloc>
 8001c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c18:	2054      	movs	r0, #84	; 0x54
 8001c1a:	f7fe ff3d 	bl	8000a98 <pvPortMalloc>
 8001c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2c:	e005      	b.n	8001c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7fe fff4 	bl	8000c1c <vPortFree>
 8001c34:	e001      	b.n	8001c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d017      	beq.n	8001c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9303      	str	r3, [sp, #12]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f80e 	bl	8001c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c64:	69f8      	ldr	r0, [r7, #28]
 8001c66:	f000 f889 	bl	8001d7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	e002      	b.n	8001c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c76:	69bb      	ldr	r3, [r7, #24]
	}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f023 0307 	bic.w	r3, r3, #7
 8001ca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <prvInitialiseNewTask+0x46>
 8001cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 8001cba:	f3bf 8f6f 	isb	sy
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e7fe      	b.n	8001cc4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e012      	b.n	8001cf2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	7819      	ldrb	r1, [r3, #0]
 8001cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3334      	adds	r3, #52	; 0x34
 8001cdc:	460a      	mov	r2, r1
 8001cde:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d9e9      	bls.n	8001ccc <prvInitialiseNewTask+0x4c>
 8001cf8:	e000      	b.n	8001cfc <prvInitialiseNewTask+0x7c>
		{
			break;
 8001cfa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d901      	bls.n	8001d0e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	3304      	adds	r3, #4
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f8ad 	bl	8000e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f8a8 	bl	8000e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	f1c3 0207 	rsb	r2, r3, #7
 8001d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	68f9      	ldr	r1, [r7, #12]
 8001d5c:	69b8      	ldr	r0, [r7, #24]
 8001d5e:	f7ff f925 	bl	8000fac <pxPortInitialiseStack>
 8001d62:	4602      	mov	r2, r0
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d74:	bf00      	nop
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d84:	f7ff fa3a 	bl	80011fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <prvAddNewTaskToReadyList+0xb8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <prvAddNewTaskToReadyList+0xb8>)
 8001d90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <prvAddNewTaskToReadyList+0xbc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001d9a:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <prvAddNewTaskToReadyList+0xbc>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <prvAddNewTaskToReadyList+0xb8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d110      	bne.n	8001dca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001da8:	f000 fbce 	bl	8002548 <prvInitialiseTaskLists>
 8001dac:	e00d      	b.n	8001dca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <prvAddNewTaskToReadyList+0xc0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d109      	bne.n	8001dca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <prvAddNewTaskToReadyList+0xbc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d802      	bhi.n	8001dca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <prvAddNewTaskToReadyList+0xbc>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <prvAddNewTaskToReadyList+0xc4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <prvAddNewTaskToReadyList+0xc4>)
 8001dd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	2201      	movs	r2, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <prvAddNewTaskToReadyList+0xc8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <prvAddNewTaskToReadyList+0xc8>)
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <prvAddNewTaskToReadyList+0xcc>)
 8001df4:	441a      	add	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff f84e 	bl	8000e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e02:	f7ff fa29 	bl	8001258 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <prvAddNewTaskToReadyList+0xc0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00e      	beq.n	8001e2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <prvAddNewTaskToReadyList+0xbc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <prvAddNewTaskToReadyList+0xd0>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20003ff0 	.word	0x20003ff0
 8001e38:	20003ef0 	.word	0x20003ef0
 8001e3c:	20003ffc 	.word	0x20003ffc
 8001e40:	2000400c 	.word	0x2000400c
 8001e44:	20003ff8 	.word	0x20003ff8
 8001e48:	20003ef4 	.word	0x20003ef4
 8001e4c:	e000ed04 	.word	0xe000ed04

08001e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d016      	beq.n	8001e90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <vTaskDelay+0x60>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <vTaskDelay+0x2e>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	e7fe      	b.n	8001e7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001e7e:	f000 f879 	bl	8001f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e82:	2100      	movs	r1, #0
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fdf9 	bl	8002a7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001e8a:	f000 f881 	bl	8001f90 <xTaskResumeAll>
 8001e8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d107      	bne.n	8001ea6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <vTaskDelay+0x64>)
 8001e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f3bf 8f4f 	dsb	sy
 8001ea2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20004018 	.word	0x20004018
 8001eb4:	e000ed04 	.word	0xe000ed04

08001eb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001ec6:	463a      	mov	r2, r7
 8001ec8:	1d39      	adds	r1, r7, #4
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fdc8 	bl	8000a64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ed4:	6839      	ldr	r1, [r7, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	9202      	str	r2, [sp, #8]
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	491d      	ldr	r1, [pc, #116]	; (8001f5c <vTaskStartScheduler+0xa4>)
 8001ee8:	481d      	ldr	r0, [pc, #116]	; (8001f60 <vTaskStartScheduler+0xa8>)
 8001eea:	f7ff fe2b 	bl	8001b44 <xTaskCreateStatic>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <vTaskStartScheduler+0xac>)
 8001ef2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <vTaskStartScheduler+0xac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001efc:	2301      	movs	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e001      	b.n	8001f06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d115      	bne.n	8001f38 <vTaskStartScheduler+0x80>
 8001f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <vTaskStartScheduler+0xb0>)
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <vTaskStartScheduler+0xb4>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <vTaskStartScheduler+0xb8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f32:	f7ff f8c5 	bl	80010c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001f36:	e00d      	b.n	8001f54 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f3e:	d109      	bne.n	8001f54 <vTaskStartScheduler+0x9c>
 8001f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e7fe      	b.n	8001f52 <vTaskStartScheduler+0x9a>
}
 8001f54:	bf00      	nop
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	08005ee0 	.word	0x08005ee0
 8001f60:	08002515 	.word	0x08002515
 8001f64:	20004014 	.word	0x20004014
 8001f68:	20004010 	.word	0x20004010
 8001f6c:	20003ffc 	.word	0x20003ffc
 8001f70:	20003ff4 	.word	0x20003ff4

08001f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <vTaskSuspendAll+0x18>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <vTaskSuspendAll+0x18>)
 8001f80:	6013      	str	r3, [r2, #0]
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	20004018 	.word	0x20004018

08001f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <xTaskResumeAll+0x114>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <xTaskResumeAll+0x2a>
 8001fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001faa:	f383 8811 	msr	BASEPRI, r3
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	e7fe      	b.n	8001fb8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001fba:	f7ff f91f 	bl	80011fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <xTaskResumeAll+0x114>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	4a37      	ldr	r2, [pc, #220]	; (80020a4 <xTaskResumeAll+0x114>)
 8001fc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <xTaskResumeAll+0x114>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d161      	bne.n	8002094 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001fd0:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <xTaskResumeAll+0x118>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d05d      	beq.n	8002094 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fd8:	e02e      	b.n	8002038 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <xTaskResumeAll+0x11c>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3318      	adds	r3, #24
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe ffb6 	bl	8000f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe ffb1 	bl	8000f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <xTaskResumeAll+0x120>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <xTaskResumeAll+0x120>)
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <xTaskResumeAll+0x124>)
 8002016:	441a      	add	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3304      	adds	r3, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f7fe ff3d 	bl	8000e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <xTaskResumeAll+0x128>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	429a      	cmp	r2, r3
 8002030:	d302      	bcc.n	8002038 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <xTaskResumeAll+0x12c>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <xTaskResumeAll+0x11c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1cc      	bne.n	8001fda <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002046:	f000 fb19 	bl	800267c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <xTaskResumeAll+0x130>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d010      	beq.n	8002078 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002056:	f000 f837 	bl	80020c8 <xTaskIncrementTick>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <xTaskResumeAll+0x12c>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3b01      	subs	r3, #1
 800206a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f1      	bne.n	8002056 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <xTaskResumeAll+0x130>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <xTaskResumeAll+0x12c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002080:	2301      	movs	r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <xTaskResumeAll+0x134>)
 8002086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002094:	f7ff f8e0 	bl	8001258 <vPortExitCritical>

	return xAlreadyYielded;
 8002098:	68bb      	ldr	r3, [r7, #8]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20004018 	.word	0x20004018
 80020a8:	20003ff0 	.word	0x20003ff0
 80020ac:	20003fb0 	.word	0x20003fb0
 80020b0:	20003ff8 	.word	0x20003ff8
 80020b4:	20003ef4 	.word	0x20003ef4
 80020b8:	20003ef0 	.word	0x20003ef0
 80020bc:	20004004 	.word	0x20004004
 80020c0:	20004000 	.word	0x20004000
 80020c4:	e000ed04 	.word	0xe000ed04

080020c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020d2:	4b54      	ldr	r3, [pc, #336]	; (8002224 <xTaskIncrementTick+0x15c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 8092 	bne.w	8002200 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020dc:	4b52      	ldr	r3, [pc, #328]	; (8002228 <xTaskIncrementTick+0x160>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80020e4:	4a50      	ldr	r2, [pc, #320]	; (8002228 <xTaskIncrementTick+0x160>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d11f      	bne.n	8002130 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80020f0:	4b4e      	ldr	r3, [pc, #312]	; (800222c <xTaskIncrementTick+0x164>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <xTaskIncrementTick+0x46>
 80020fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fe:	f383 8811 	msr	BASEPRI, r3
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	e7fe      	b.n	800210c <xTaskIncrementTick+0x44>
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <xTaskIncrementTick+0x164>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	4b46      	ldr	r3, [pc, #280]	; (8002230 <xTaskIncrementTick+0x168>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a44      	ldr	r2, [pc, #272]	; (800222c <xTaskIncrementTick+0x164>)
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4a44      	ldr	r2, [pc, #272]	; (8002230 <xTaskIncrementTick+0x168>)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b44      	ldr	r3, [pc, #272]	; (8002234 <xTaskIncrementTick+0x16c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a42      	ldr	r2, [pc, #264]	; (8002234 <xTaskIncrementTick+0x16c>)
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	f000 faa6 	bl	800267c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002130:	4b41      	ldr	r3, [pc, #260]	; (8002238 <xTaskIncrementTick+0x170>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	429a      	cmp	r2, r3
 8002138:	d34d      	bcc.n	80021d6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <xTaskIncrementTick+0x164>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <xTaskIncrementTick+0x80>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <xTaskIncrementTick+0x82>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <xTaskIncrementTick+0x170>)
 8002150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002154:	601a      	str	r2, [r3, #0]
					break;
 8002156:	e03e      	b.n	80021d6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002158:	4b34      	ldr	r3, [pc, #208]	; (800222c <xTaskIncrementTick+0x164>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d203      	bcs.n	8002178 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002170:	4a31      	ldr	r2, [pc, #196]	; (8002238 <xTaskIncrementTick+0x170>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
						break;
 8002176:	e02e      	b.n	80021d6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3304      	adds	r3, #4
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe feeb 	bl	8000f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3318      	adds	r3, #24
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fee2 	bl	8000f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	2201      	movs	r2, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <xTaskIncrementTick+0x174>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	4a26      	ldr	r2, [pc, #152]	; (800223c <xTaskIncrementTick+0x174>)
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4a23      	ldr	r2, [pc, #140]	; (8002240 <xTaskIncrementTick+0x178>)
 80021b4:	441a      	add	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3304      	adds	r3, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f7fe fe6e 	bl	8000e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <xTaskIncrementTick+0x17c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3b4      	bcc.n	800213a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021d4:	e7b1      	b.n	800213a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <xTaskIncrementTick+0x17c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	4918      	ldr	r1, [pc, #96]	; (8002240 <xTaskIncrementTick+0x178>)
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d901      	bls.n	80021f2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <xTaskIncrementTick+0x180>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <xTaskIncrementTick+0x146>
			{
				vApplicationTickHook();
 80021fa:	f002 ff41 	bl	8005080 <vApplicationTickHook>
 80021fe:	e006      	b.n	800220e <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <xTaskIncrementTick+0x180>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <xTaskIncrementTick+0x180>)
 8002208:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800220a:	f002 ff39 	bl	8005080 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <xTaskIncrementTick+0x184>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <xTaskIncrementTick+0x152>
		{
			xSwitchRequired = pdTRUE;
 8002216:	2301      	movs	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800221a:	697b      	ldr	r3, [r7, #20]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20004018 	.word	0x20004018
 8002228:	20003ff4 	.word	0x20003ff4
 800222c:	20003fa8 	.word	0x20003fa8
 8002230:	20003fac 	.word	0x20003fac
 8002234:	20004008 	.word	0x20004008
 8002238:	20004010 	.word	0x20004010
 800223c:	20003ff8 	.word	0x20003ff8
 8002240:	20003ef4 	.word	0x20003ef4
 8002244:	20003ef0 	.word	0x20003ef0
 8002248:	20004000 	.word	0x20004000
 800224c:	20004004 	.word	0x20004004

08002250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <vTaskSwitchContext+0xa0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <vTaskSwitchContext+0xa4>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002264:	e03e      	b.n	80022e4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <vTaskSwitchContext+0xa4>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <vTaskSwitchContext+0xa8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800227a:	7afb      	ldrb	r3, [r7, #11]
 800227c:	f1c3 031f 	rsb	r3, r3, #31
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	491e      	ldr	r1, [pc, #120]	; (80022fc <vTaskSwitchContext+0xac>)
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <vTaskSwitchContext+0x5a>
	__asm volatile
 8002296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	e7fe      	b.n	80022a8 <vTaskSwitchContext+0x58>
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <vTaskSwitchContext+0xac>)
 80022b6:	4413      	add	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	3308      	adds	r3, #8
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d104      	bne.n	80022da <vTaskSwitchContext+0x8a>
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <vTaskSwitchContext+0xb0>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	20004018 	.word	0x20004018
 80022f4:	20004004 	.word	0x20004004
 80022f8:	20003ff8 	.word	0x20003ff8
 80022fc:	20003ef4 	.word	0x20003ef4
 8002300:	20003ef0 	.word	0x20003ef0

08002304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <vTaskPlaceOnEventList+0x24>
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e7fe      	b.n	8002326 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <vTaskPlaceOnEventList+0x44>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3318      	adds	r3, #24
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7fe fdd8 	bl	8000ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002336:	2101      	movs	r1, #1
 8002338:	6838      	ldr	r0, [r7, #0]
 800233a:	f000 fb9f 	bl	8002a7c <prvAddCurrentTaskToDelayedList>
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20003ef0 	.word	0x20003ef0

0800234c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <xTaskRemoveFromEventList+0x2a>
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e7fe      	b.n	8002374 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	3318      	adds	r3, #24
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fdec 	bl	8000f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <xTaskRemoveFromEventList+0xac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11c      	bne.n	80023c2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	3304      	adds	r3, #4
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fde3 	bl	8000f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	2201      	movs	r2, #1
 8002398:	409a      	lsls	r2, r3
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <xTaskRemoveFromEventList+0xb0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	4a16      	ldr	r2, [pc, #88]	; (80023fc <xTaskRemoveFromEventList+0xb0>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <xTaskRemoveFromEventList+0xb4>)
 80023b2:	441a      	add	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	3304      	adds	r3, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f7fe fd6f 	bl	8000e9e <vListInsertEnd>
 80023c0:	e005      	b.n	80023ce <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	3318      	adds	r3, #24
 80023c6:	4619      	mov	r1, r3
 80023c8:	480e      	ldr	r0, [pc, #56]	; (8002404 <xTaskRemoveFromEventList+0xb8>)
 80023ca:	f7fe fd68 	bl	8000e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <xTaskRemoveFromEventList+0xbc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d905      	bls.n	80023e8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80023dc:	2301      	movs	r3, #1
 80023de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <xTaskRemoveFromEventList+0xc0>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e001      	b.n	80023ec <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80023ec:	697b      	ldr	r3, [r7, #20]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20004018 	.word	0x20004018
 80023fc:	20003ff8 	.word	0x20003ff8
 8002400:	20003ef4 	.word	0x20003ef4
 8002404:	20003fb0 	.word	0x20003fb0
 8002408:	20003ef0 	.word	0x20003ef0
 800240c:	20004004 	.word	0x20004004

08002410 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <vTaskInternalSetTimeOutState+0x24>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <vTaskInternalSetTimeOutState+0x28>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	605a      	str	r2, [r3, #4]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	20004008 	.word	0x20004008
 8002438:	20003ff4 	.word	0x20003ff4

0800243c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <xTaskCheckForTimeOut+0x24>
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	e7fe      	b.n	800245e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <xTaskCheckForTimeOut+0x3e>
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e7fe      	b.n	8002478 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800247a:	f7fe febf 	bl	80011fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <xTaskCheckForTimeOut+0xb8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002496:	d102      	bne.n	800249e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	e023      	b.n	80024e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <xTaskCheckForTimeOut+0xbc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d007      	beq.n	80024ba <xTaskCheckForTimeOut+0x7e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d802      	bhi.n	80024ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e015      	b.n	80024e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d90b      	bls.n	80024dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff9d 	bl	8002410 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e004      	b.n	80024e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80024e6:	f7fe feb7 	bl	8001258 <vPortExitCritical>

	return xReturn;
 80024ea:	69fb      	ldr	r3, [r7, #28]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20003ff4 	.word	0x20003ff4
 80024f8:	20004008 	.word	0x20004008

080024fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <vTaskMissedYield+0x14>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	20004004 	.word	0x20004004

08002514 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800251c:	f000 f854 	bl	80025c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <prvIdleTask+0x2c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d907      	bls.n	8002538 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <prvIdleTask+0x30>)
 800252a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002538:	f002 fd88 	bl	800504c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800253c:	e7ee      	b.n	800251c <prvIdleTask+0x8>
 800253e:	bf00      	nop
 8002540:	20003ef4 	.word	0x20003ef4
 8002544:	e000ed04 	.word	0xe000ed04

08002548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	e00c      	b.n	800256e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <prvInitialiseTaskLists+0x60>)
 8002560:	4413      	add	r3, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fc6e 	bl	8000e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3301      	adds	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b06      	cmp	r3, #6
 8002572:	d9ef      	bls.n	8002554 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <prvInitialiseTaskLists+0x64>)
 8002576:	f7fe fc65 	bl	8000e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <prvInitialiseTaskLists+0x68>)
 800257c:	f7fe fc62 	bl	8000e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <prvInitialiseTaskLists+0x6c>)
 8002582:	f7fe fc5f 	bl	8000e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002586:	480c      	ldr	r0, [pc, #48]	; (80025b8 <prvInitialiseTaskLists+0x70>)
 8002588:	f7fe fc5c 	bl	8000e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800258c:	480b      	ldr	r0, [pc, #44]	; (80025bc <prvInitialiseTaskLists+0x74>)
 800258e:	f7fe fc59 	bl	8000e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <prvInitialiseTaskLists+0x78>)
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <prvInitialiseTaskLists+0x64>)
 8002596:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <prvInitialiseTaskLists+0x7c>)
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <prvInitialiseTaskLists+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20003ef4 	.word	0x20003ef4
 80025ac:	20003f80 	.word	0x20003f80
 80025b0:	20003f94 	.word	0x20003f94
 80025b4:	20003fb0 	.word	0x20003fb0
 80025b8:	20003fc4 	.word	0x20003fc4
 80025bc:	20003fdc 	.word	0x20003fdc
 80025c0:	20003fa8 	.word	0x20003fa8
 80025c4:	20003fac 	.word	0x20003fac

080025c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025ce:	e019      	b.n	8002604 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80025d0:	f7fe fe14 	bl	80011fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <prvCheckTasksWaitingTermination+0x4c>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fcb9 	bl	8000f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <prvCheckTasksWaitingTermination+0x50>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <prvCheckTasksWaitingTermination+0x50>)
 80025ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <prvCheckTasksWaitingTermination+0x54>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <prvCheckTasksWaitingTermination+0x54>)
 80025f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80025fa:	f7fe fe2d 	bl	8001258 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f80e 	bl	8002620 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <prvCheckTasksWaitingTermination+0x54>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e1      	bne.n	80025d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20003fc4 	.word	0x20003fc4
 8002618:	20003ff0 	.word	0x20003ff0
 800261c:	20003fd8 	.word	0x20003fd8

08002620 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe faf0 	bl	8000c1c <vPortFree>
				vPortFree( pxTCB );
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fe faed 	bl	8000c1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002642:	e017      	b.n	8002674 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800264a:	2b01      	cmp	r3, #1
 800264c:	d103      	bne.n	8002656 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fae4 	bl	8000c1c <vPortFree>
	}
 8002654:	e00e      	b.n	8002674 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800265c:	2b02      	cmp	r3, #2
 800265e:	d009      	beq.n	8002674 <prvDeleteTCB+0x54>
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e7fe      	b.n	8002672 <prvDeleteTCB+0x52>
	}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <prvResetNextTaskUnblockTime+0x44>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <prvResetNextTaskUnblockTime+0x14>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <prvResetNextTaskUnblockTime+0x16>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <prvResetNextTaskUnblockTime+0x48>)
 8002698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800269c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800269e:	e008      	b.n	80026b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <prvResetNextTaskUnblockTime+0x44>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <prvResetNextTaskUnblockTime+0x48>)
 80026b0:	6013      	str	r3, [r2, #0]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20003fa8 	.word	0x20003fa8
 80026c4:	20004010 	.word	0x20004010

080026c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <xTaskGetSchedulerState+0x34>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80026d6:	2301      	movs	r3, #1
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	e008      	b.n	80026ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <xTaskGetSchedulerState+0x38>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80026e4:	2302      	movs	r3, #2
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	e001      	b.n	80026ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80026ee:	687b      	ldr	r3, [r7, #4]
	}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	20003ffc 	.word	0x20003ffc
 8002700:	20004018 	.word	0x20004018

08002704 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d06e      	beq.n	80027f8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <xTaskPriorityInherit+0x100>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	429a      	cmp	r2, r3
 8002726:	d25e      	bcs.n	80027e6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db06      	blt.n	800273e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002730:	4b34      	ldr	r3, [pc, #208]	; (8002804 <xTaskPriorityInherit+0x100>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	f1c3 0207 	rsb	r2, r3, #7
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6959      	ldr	r1, [r3, #20]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4a2e      	ldr	r2, [pc, #184]	; (8002808 <xTaskPriorityInherit+0x104>)
 8002750:	4413      	add	r3, r2
 8002752:	4299      	cmp	r1, r3
 8002754:	d101      	bne.n	800275a <xTaskPriorityInherit+0x56>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <xTaskPriorityInherit+0x58>
 800275a:	2300      	movs	r3, #0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d03a      	beq.n	80027d6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3304      	adds	r3, #4
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fbf7 	bl	8000f58 <uxListRemove>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d115      	bne.n	800279c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	4924      	ldr	r1, [pc, #144]	; (8002808 <xTaskPriorityInherit+0x104>)
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <xTaskPriorityInherit+0x98>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	2201      	movs	r2, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43da      	mvns	r2, r3
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <xTaskPriorityInherit+0x108>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4013      	ands	r3, r2
 8002798:	4a1c      	ldr	r2, [pc, #112]	; (800280c <xTaskPriorityInherit+0x108>)
 800279a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <xTaskPriorityInherit+0x100>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	2201      	movs	r2, #1
 80027ac:	409a      	lsls	r2, r3
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <xTaskPriorityInherit+0x108>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	4a15      	ldr	r2, [pc, #84]	; (800280c <xTaskPriorityInherit+0x108>)
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4a10      	ldr	r2, [pc, #64]	; (8002808 <xTaskPriorityInherit+0x104>)
 80027c6:	441a      	add	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f7fe fb65 	bl	8000e9e <vListInsertEnd>
 80027d4:	e004      	b.n	80027e0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <xTaskPriorityInherit+0x100>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e008      	b.n	80027f8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <xTaskPriorityInherit+0x100>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d201      	bcs.n	80027f8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80027f8:	68fb      	ldr	r3, [r7, #12]
	}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20003ef0 	.word	0x20003ef0
 8002808:	20003ef4 	.word	0x20003ef4
 800280c:	20003ff8 	.word	0x20003ff8

08002810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d06c      	beq.n	8002900 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002826:	4b39      	ldr	r3, [pc, #228]	; (800290c <xTaskPriorityDisinherit+0xfc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d009      	beq.n	8002844 <xTaskPriorityDisinherit+0x34>
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e7fe      	b.n	8002842 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <xTaskPriorityDisinherit+0x50>
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	e7fe      	b.n	800285e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	429a      	cmp	r2, r3
 8002874:	d044      	beq.n	8002900 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d140      	bne.n	8002900 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	3304      	adds	r3, #4
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fb68 	bl	8000f58 <uxListRemove>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002892:	491f      	ldr	r1, [pc, #124]	; (8002910 <xTaskPriorityDisinherit+0x100>)
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xTaskPriorityDisinherit+0xaa>
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	2201      	movs	r2, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <xTaskPriorityDisinherit+0x104>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4013      	ands	r3, r2
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <xTaskPriorityDisinherit+0x104>)
 80028b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f1c3 0207 	rsb	r2, r3, #7
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	2201      	movs	r2, #1
 80028d4:	409a      	lsls	r2, r3
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <xTaskPriorityDisinherit+0x104>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <xTaskPriorityDisinherit+0x104>)
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4a08      	ldr	r2, [pc, #32]	; (8002910 <xTaskPriorityDisinherit+0x100>)
 80028ee:	441a      	add	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	3304      	adds	r3, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7fe fad1 	bl	8000e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002900:	697b      	ldr	r3, [r7, #20]
	}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20003ef0 	.word	0x20003ef0
 8002910:	20003ef4 	.word	0x20003ef4
 8002914:	20003ff8 	.word	0x20003ff8

08002918 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002926:	2301      	movs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8086 	beq.w	8002a3e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e7fe      	b.n	800294c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d202      	bcs.n	800295e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	e002      	b.n	8002964 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	429a      	cmp	r2, r3
 800296c:	d067      	beq.n	8002a3e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	d162      	bne.n	8002a3e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002978:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	429a      	cmp	r2, r3
 8002980:	d109      	bne.n	8002996 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	e7fe      	b.n	8002994 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db04      	blt.n	80029b4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f1c3 0207 	rsb	r2, r3, #7
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6959      	ldr	r1, [r3, #20]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80029c4:	4413      	add	r3, r2
 80029c6:	4299      	cmp	r1, r3
 80029c8:	d101      	bne.n	80029ce <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d034      	beq.n	8002a3e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	3304      	adds	r3, #4
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fabd 	bl	8000f58 <uxListRemove>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d115      	bne.n	8002a10 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	4918      	ldr	r1, [pc, #96]	; (8002a4c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	2201      	movs	r2, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43da      	mvns	r2, r3
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8002a0e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8002a30:	441a      	add	r2, r3
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	3304      	adds	r3, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f7fe fa30 	bl	8000e9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a3e:	bf00      	nop
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20003ef0 	.word	0x20003ef0
 8002a4c:	20003ef4 	.word	0x20003ef4
 8002a50:	20003ff8 	.word	0x20003ff8

08002a54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <pvTaskIncrementMutexHeldCount+0x24>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <pvTaskIncrementMutexHeldCount+0x24>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a66:	3201      	adds	r2, #1
 8002a68:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8002a6a:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <pvTaskIncrementMutexHeldCount+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
	}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	20003ef0 	.word	0x20003ef0

08002a7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a86:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a8c:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3304      	adds	r3, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fa60 	bl	8000f58 <uxListRemove>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ab4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002abc:	d10a      	bne.n	8002ad4 <prvAddCurrentTaskToDelayedList+0x58>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	481a      	ldr	r0, [pc, #104]	; (8002b38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002ace:	f7fe f9e6 	bl	8000e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ad2:	e026      	b.n	8002b22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d209      	bcs.n	8002b00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3304      	adds	r3, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7fe f9f4 	bl	8000ee6 <vListInsert>
}
 8002afe:	e010      	b.n	8002b22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7fe f9ea 	bl	8000ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d202      	bcs.n	8002b22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002b1c:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6013      	str	r3, [r2, #0]
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20003ff4 	.word	0x20003ff4
 8002b30:	20003ef0 	.word	0x20003ef0
 8002b34:	20003ff8 	.word	0x20003ff8
 8002b38:	20003fdc 	.word	0x20003fdc
 8002b3c:	20003fac 	.word	0x20003fac
 8002b40:	20003fa8 	.word	0x20003fa8
 8002b44:	20004010 	.word	0x20004010

08002b48 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e076      	b.n	8002c52 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002b64:	2201      	movs	r2, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d165      	bne.n	8002c4c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2103      	movs	r1, #3
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	791b      	ldrb	r3, [r3, #4]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d003      	beq.n	8002bbe <GPIO_Init+0x76>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	791b      	ldrb	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d12e      	bne.n	8002c1c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	401a      	ands	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	795b      	ldrb	r3, [r3, #5]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	408b      	lsls	r3, r1
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	7992      	ldrb	r2, [r2, #6]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	b292      	uxth	r2, r2
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2103      	movs	r1, #3
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	401a      	ands	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	79db      	ldrb	r3, [r3, #7]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b0f      	cmp	r3, #15
 8002c56:	d985      	bls.n	8002b64 <GPIO_Init+0x1c>
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	71da      	strb	r2, [r3, #7]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	831a      	strh	r2, [r3, #24]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	887a      	ldrh	r2, [r7, #2]
 8002cc6:	835a      	strh	r2, [r3, #26]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	405a      	eors	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	615a      	str	r2, [r3, #20]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d10:	787a      	ldrb	r2, [r7, #1]
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	887b      	ldrh	r3, [r7, #2]
 8002d2a:	08db      	lsrs	r3, r3, #3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	210f      	movs	r1, #15
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	ea02 0103 	and.w	r1, r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f100 0208 	add.w	r2, r0, #8
 8002d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3208      	adds	r2, #8
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8002d9e:	2304      	movs	r3, #4
 8002da0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8002da2:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <I2C_Init+0x174>)
 8002da4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	889b      	ldrh	r3, [r3, #4]
 8002daa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8002dac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002db2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f92b 	bl	8003014 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4a4f      	ldr	r2, [pc, #316]	; (8002f04 <I2C_Init+0x178>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0c9b      	lsrs	r3, r3, #18
 8002dcc:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8002dce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002dd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002dda:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a44      	ldr	r2, [pc, #272]	; (8002f08 <I2C_Init+0x17c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d815      	bhi.n	8002e26 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8002e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d801      	bhi.n	8002e12 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8002e0e:	2304      	movs	r3, #4
 8002e10:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8002e12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e16:	4313      	orrs	r3, r2
 8002e18:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8002e1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	841a      	strh	r2, [r3, #32]
 8002e24:	e040      	b.n	8002ea8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	88db      	ldrh	r3, [r3, #6]
 8002e2a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d109      	bne.n	8002e46 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e44:	e00e      	b.n	8002e64 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009a      	lsls	r2, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8002e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e62:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8002e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8002e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8002e76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e86:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8002e88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <I2C_Init+0x180>)
 8002e94:	fb82 1203 	smull	r1, r2, r2, r3
 8002e98:	1192      	asrs	r2, r2, #6
 8002e9a:	17db      	asrs	r3, r3, #31
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002eac:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8002ec4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ec6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8002eca:	f023 0302 	bic.w	r3, r3, #2
 8002ece:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	889a      	ldrh	r2, [r3, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	895b      	ldrh	r3, [r3, #10]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ee6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	899a      	ldrh	r2, [r3, #12]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	891b      	ldrh	r3, [r3, #8]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	811a      	strh	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	007a1200 	.word	0x007a1200
 8002f04:	431bde83 	.word	0x431bde83
 8002f08:	000186a0 	.word	0x000186a0
 8002f0c:	10624dd3 	.word	0x10624dd3

08002f10 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8002f2c:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f40:	819a      	strh	r2, [r3, #12]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8002f70:	e007      	b.n	8002f82 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	801a      	strh	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8002f9a:	4a04      	ldr	r2, [pc, #16]	; (8002fac <PWR_BackupAccessCmd+0x1c>)
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	420e0020 	.word	0x420e0020

08002fb0 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <RCC_LSEConfig+0x40>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <RCC_LSEConfig+0x40>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d002      	beq.n	8002fd2 <RCC_LSEConfig+0x22>
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d004      	beq.n	8002fda <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8002fd0:	e007      	b.n	8002fe2 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <RCC_LSEConfig+0x40>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
      break;
 8002fd8:	e003      	b.n	8002fe2 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <RCC_LSEConfig+0x40>)
 8002fdc:	2205      	movs	r2, #5
 8002fde:	701a      	strb	r2, [r3, #0]
      break;
 8002fe0:	bf00      	nop
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40023870 	.word	0x40023870

08002ff4 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	; (8003010 <RCC_LSICmd+0x1c>)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	42470e80 	.word	0x42470e80

08003014 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	2302      	movs	r3, #2
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	2302      	movs	r3, #2
 8003032:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003034:	4b47      	ldr	r3, [pc, #284]	; (8003154 <RCC_GetClocksFreq+0x140>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d007      	beq.n	8003054 <RCC_GetClocksFreq+0x40>
 8003044:	2b08      	cmp	r3, #8
 8003046:	d009      	beq.n	800305c <RCC_GetClocksFreq+0x48>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d13d      	bne.n	80030c8 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a42      	ldr	r2, [pc, #264]	; (8003158 <RCC_GetClocksFreq+0x144>)
 8003050:	601a      	str	r2, [r3, #0]
      break;
 8003052:	e03d      	b.n	80030d0 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a41      	ldr	r2, [pc, #260]	; (800315c <RCC_GetClocksFreq+0x148>)
 8003058:	601a      	str	r2, [r3, #0]
      break;
 800305a:	e039      	b.n	80030d0 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800305c:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <RCC_GetClocksFreq+0x140>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	0d9b      	lsrs	r3, r3, #22
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003068:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <RCC_GetClocksFreq+0x140>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003070:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00c      	beq.n	8003092 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003078:	4a38      	ldr	r2, [pc, #224]	; (800315c <RCC_GetClocksFreq+0x148>)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	4a34      	ldr	r2, [pc, #208]	; (8003154 <RCC_GetClocksFreq+0x140>)
 8003082:	6852      	ldr	r2, [r2, #4]
 8003084:	0992      	lsrs	r2, r2, #6
 8003086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	e00b      	b.n	80030aa <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003092:	4a31      	ldr	r2, [pc, #196]	; (8003158 <RCC_GetClocksFreq+0x144>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <RCC_GetClocksFreq+0x140>)
 800309c:	6852      	ldr	r2, [r2, #4]
 800309e:	0992      	lsrs	r2, r2, #6
 80030a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <RCC_GetClocksFreq+0x140>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	3301      	adds	r3, #1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	601a      	str	r2, [r3, #0]
      break;
 80030c6:	e003      	b.n	80030d0 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a23      	ldr	r2, [pc, #140]	; (8003158 <RCC_GetClocksFreq+0x144>)
 80030cc:	601a      	str	r2, [r3, #0]
      break;
 80030ce:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <RCC_GetClocksFreq+0x140>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80030e0:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <RCC_GetClocksFreq+0x14c>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4413      	add	r3, r2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	40da      	lsrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80030f8:	4b16      	ldr	r3, [pc, #88]	; (8003154 <RCC_GetClocksFreq+0x140>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003100:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	0a9b      	lsrs	r3, r3, #10
 8003106:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003108:	4a15      	ldr	r2, [pc, #84]	; (8003160 <RCC_GetClocksFreq+0x14c>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4413      	add	r3, r2
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	40da      	lsrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <RCC_GetClocksFreq+0x140>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003128:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	0b5b      	lsrs	r3, r3, #13
 800312e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <RCC_GetClocksFreq+0x14c>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	40da      	lsrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]
}
 8003148:	bf00      	nop
 800314a:	3724      	adds	r7, #36	; 0x24
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40023800 	.word	0x40023800
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200
 8003160:	20000004 	.word	0x20000004

08003164 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317a:	d111      	bne.n	80031a0 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <RCC_RTCCLKConfig+0x58>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003188:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <RCC_RTCCLKConfig+0x58>)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80031a0:	4906      	ldr	r1, [pc, #24]	; (80031bc <RCC_RTCCLKConfig+0x58>)
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <RCC_RTCCLKConfig+0x58>)
 80031a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	4313      	orrs	r3, r2
 80031ae:	670b      	str	r3, [r1, #112]	; 0x70
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40023800 	.word	0x40023800

080031c0 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80031ca:	4a04      	ldr	r2, [pc, #16]	; (80031dc <RCC_RTCCLKCmd+0x1c>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	6013      	str	r3, [r2, #0]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	42470e3c 	.word	0x42470e3c

080031e0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80031f2:	490a      	ldr	r1, [pc, #40]	; (800321c <RCC_AHB1PeriphClockCmd+0x3c>)
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <RCC_AHB1PeriphClockCmd+0x3c>)
 80031f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80031fe:	e006      	b.n	800320e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003200:	4906      	ldr	r1, [pc, #24]	; (800321c <RCC_AHB1PeriphClockCmd+0x3c>)
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <RCC_AHB1PeriphClockCmd+0x3c>)
 8003204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	43db      	mvns	r3, r3
 800320a:	4013      	ands	r3, r2
 800320c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800

08003220 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003232:	490a      	ldr	r1, [pc, #40]	; (800325c <RCC_APB1PeriphClockCmd+0x3c>)
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <RCC_APB1PeriphClockCmd+0x3c>)
 8003236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4313      	orrs	r3, r2
 800323c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800323e:	e006      	b.n	800324e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003240:	4906      	ldr	r1, [pc, #24]	; (800325c <RCC_APB1PeriphClockCmd+0x3c>)
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <RCC_APB1PeriphClockCmd+0x3c>)
 8003244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	43db      	mvns	r3, r3
 800324a:	4013      	ands	r3, r2
 800324c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <RCC_APB2PeriphClockCmd+0x3c>)
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <RCC_APB2PeriphClockCmd+0x3c>)
 8003276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4313      	orrs	r3, r2
 800327c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800327e:	e006      	b.n	800328e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003280:	4906      	ldr	r1, [pc, #24]	; (800329c <RCC_APB2PeriphClockCmd+0x3c>)
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <RCC_APB2PeriphClockCmd+0x3c>)
 8003284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	43db      	mvns	r3, r3
 800328a:	4013      	ands	r3, r2
 800328c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800

080032a0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80032b2:	490a      	ldr	r1, [pc, #40]	; (80032dc <RCC_APB1PeriphResetCmd+0x3c>)
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <RCC_APB1PeriphResetCmd+0x3c>)
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80032be:	e006      	b.n	80032ce <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80032c0:	4906      	ldr	r1, [pc, #24]	; (80032dc <RCC_APB1PeriphResetCmd+0x3c>)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <RCC_APB1PeriphResetCmd+0x3c>)
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4013      	ands	r3, r2
 80032cc:	620b      	str	r3, [r1, #32]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800

080032e0 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <RTC_Init+0x74>)
 80032ee:	22ca      	movs	r2, #202	; 0xca
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <RTC_Init+0x74>)
 80032f4:	2253      	movs	r2, #83	; 0x53
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80032f8:	f000 f848 	bl	800338c <RTC_EnterInitMode>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <RTC_Init+0x28>
  {
    status = ERROR;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	e01c      	b.n	8003342 <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8003308:	4a12      	ldr	r2, [pc, #72]	; (8003354 <RTC_Init+0x74>)
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <RTC_Init+0x74>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003312:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8003314:	490f      	ldr	r1, [pc, #60]	; (8003354 <RTC_Init+0x74>)
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <RTC_Init+0x74>)
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8003322:	4a0c      	ldr	r2, [pc, #48]	; (8003354 <RTC_Init+0x74>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <RTC_Init+0x74>)
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <RTC_Init+0x74>)
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	4313      	orrs	r3, r2
 8003338:	610b      	str	r3, [r1, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800333a:	f000 f861 	bl	8003400 <RTC_ExitInitMode>

    status = SUCCESS;    
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <RTC_Init+0x74>)
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40002800 	.word	0x40002800

08003358 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <RTC_WriteProtectionCmd+0x30>)
 800336a:	22ff      	movs	r2, #255	; 0xff
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
    RTC->WPR = 0x53;    
  }
}
 800336e:	e005      	b.n	800337c <RTC_WriteProtectionCmd+0x24>
    RTC->WPR = 0xCA;
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <RTC_WriteProtectionCmd+0x30>)
 8003372:	22ca      	movs	r2, #202	; 0xca
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <RTC_WriteProtectionCmd+0x30>)
 8003378:	2253      	movs	r2, #83	; 0x53
 800337a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40002800 	.word	0x40002800

0800338c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <RTC_EnterInitMode+0x70>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11e      	bne.n	80033e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <RTC_EnterInitMode+0x70>)
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033b0:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <RTC_EnterInitMode+0x70>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3301      	adds	r3, #1
 80033c0:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d002      	beq.n	80033d0 <RTC_EnterInitMode+0x44>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <RTC_EnterInitMode+0x70>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	e004      	b.n	80033ec <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e001      	b.n	80033ec <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40002800 	.word	0x40002800

08003400 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8003404:	4a05      	ldr	r2, [pc, #20]	; (800341c <RTC_ExitInitMode+0x1c>)
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <RTC_ExitInitMode+0x1c>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40002800 	.word	0x40002800

08003420 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <RTC_WaitForSynchro+0x74>)
 8003434:	22ca      	movs	r2, #202	; 0xca
 8003436:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <RTC_WaitForSynchro+0x74>)
 800343a:	2253      	movs	r2, #83	; 0x53
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800343e:	4a15      	ldr	r2, [pc, #84]	; (8003494 <RTC_WaitForSynchro+0x74>)
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <RTC_WaitForSynchro+0x74>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003448:	60d3      	str	r3, [r2, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <RTC_WaitForSynchro+0x74>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003460:	d002      	beq.n	8003468 <RTC_WaitForSynchro+0x48>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <RTC_WaitForSynchro+0x74>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e001      	b.n	800347e <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <RTC_WaitForSynchro+0x74>)
 8003480:	22ff      	movs	r2, #255	; 0xff
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40002800 	.word	0x40002800

08003498 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 80034a6:	2300      	movs	r3, #0
 80034a8:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034b0:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <RTC_SetTime+0x110>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d114      	bne.n	80034e6 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	70da      	strb	r2, [r3, #3]
 80034c2:	e010      	b.n	80034e6 <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <RTC_SetTime+0x110>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f9b6 	bl	8003846 <RTC_Bcd2ToByte>
 80034da:	4603      	mov	r3, r0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e002      	b.n	80034e6 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00f      	beq.n	800350c <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	785b      	ldrb	r3, [r3, #1]
 80034f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 80034f8:	4313      	orrs	r3, r2
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	7892      	ldrb	r2, [r2, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 80034fe:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	78db      	ldrb	r3, [r3, #3]
 8003504:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e01b      	b.n	8003544 <RTC_SetTime+0xac>
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f97b 	bl	800380c <RTC_ByteToBcd2>
 8003516:	4603      	mov	r3, r0
 8003518:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f974 	bl	800380c <RTC_ByteToBcd2>
 8003524:	4603      	mov	r3, r0
 8003526:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003528:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	789b      	ldrb	r3, [r3, #2]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f96c 	bl	800380c <RTC_ByteToBcd2>
 8003534:	4603      	mov	r3, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003536:	ea44 0203 	orr.w	r2, r4, r3
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	78db      	ldrb	r3, [r3, #3]
 800353e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <RTC_SetTime+0x110>)
 8003546:	22ca      	movs	r2, #202	; 0xca
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <RTC_SetTime+0x110>)
 800354c:	2253      	movs	r2, #83	; 0x53
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003550:	f7ff ff1c 	bl	800338c <RTC_EnterInitMode>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <RTC_SetTime+0xc8>
  {
    status = ERROR;
 800355a:	2300      	movs	r3, #0
 800355c:	72fb      	strb	r3, [r7, #11]
 800355e:	e01b      	b.n	8003598 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <RTC_SetTime+0x110>)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003568:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800356c:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800356e:	f7ff ff47 	bl	8003400 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <RTC_SetTime+0x110>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 800357e:	f7ff ff4f 	bl	8003420 <RTC_WaitForSynchro>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <RTC_SetTime+0xf6>
    {
      status = ERROR;
 8003588:	2300      	movs	r3, #0
 800358a:	72fb      	strb	r3, [r7, #11]
 800358c:	e004      	b.n	8003598 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 800358e:	2301      	movs	r3, #1
 8003590:	72fb      	strb	r3, [r7, #11]
 8003592:	e001      	b.n	8003598 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 8003594:	2301      	movs	r3, #1
 8003596:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <RTC_SetTime+0x110>)
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800359e:	7afb      	ldrb	r3, [r7, #11]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}
 80035a8:	40002800 	.word	0x40002800

080035ac <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <RTC_GetTime+0xa0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80035c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80035c6:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	b2da      	uxtb	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11a      	bne.n	8003642 <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f918 	bl	8003846 <RTC_Bcd2ToByte>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f90f 	bl	8003846 <RTC_Bcd2ToByte>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	789b      	ldrb	r3, [r3, #2]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f906 	bl	8003846 <RTC_Bcd2ToByte>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	709a      	strb	r2, [r3, #2]
  }
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40002800 	.word	0x40002800

08003650 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800365e:	2300      	movs	r3, #0
 8003660:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10e      	bne.n	8003686 <RTC_SetDate+0x36>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	f023 0310 	bic.w	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	330a      	adds	r3, #10
 8003680:	b2da      	uxtb	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f8d8 	bl	8003846 <RTC_Bcd2ToByte>
 8003696:	4603      	mov	r3, r0
 8003698:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	789b      	ldrb	r3, [r3, #2]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f8d1 	bl	8003846 <RTC_Bcd2ToByte>
 80036a4:	4603      	mov	r3, r0
 80036a6:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00f      	beq.n	80036ce <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	78db      	ldrb	r3, [r3, #3]
 80036b2:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	021b      	lsls	r3, r3, #8
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80036ba:	4313      	orrs	r3, r2
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	7892      	ldrb	r2, [r2, #2]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80036c0:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	035b      	lsls	r3, r3, #13
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e01b      	b.n	8003706 <RTC_SetDate+0xb6>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	78db      	ldrb	r3, [r3, #3]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f89a 	bl	800380c <RTC_ByteToBcd2>
 80036d8:	4603      	mov	r3, r0
 80036da:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	785b      	ldrb	r3, [r3, #1]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f893 	bl	800380c <RTC_ByteToBcd2>
 80036e6:	4603      	mov	r3, r0
 80036e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80036ea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	789b      	ldrb	r3, [r3, #2]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f88b 	bl	800380c <RTC_ByteToBcd2>
 80036f6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80036f8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	035b      	lsls	r3, r3, #13
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003706:	4b19      	ldr	r3, [pc, #100]	; (800376c <RTC_SetDate+0x11c>)
 8003708:	22ca      	movs	r2, #202	; 0xca
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800370c:	4b17      	ldr	r3, [pc, #92]	; (800376c <RTC_SetDate+0x11c>)
 800370e:	2253      	movs	r2, #83	; 0x53
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003712:	f7ff fe3b 	bl	800338c <RTC_EnterInitMode>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <RTC_SetDate+0xd2>
  {
    status = ERROR;
 800371c:	2300      	movs	r3, #0
 800371e:	72fb      	strb	r3, [r7, #11]
 8003720:	e01b      	b.n	800375a <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <RTC_SetDate+0x11c>)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800372a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800372e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8003730:	f7ff fe66 	bl	8003400 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <RTC_SetDate+0x11c>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 8003740:	f7ff fe6e 	bl	8003420 <RTC_WaitForSynchro>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <RTC_SetDate+0x100>
    {
      status = ERROR;
 800374a:	2300      	movs	r3, #0
 800374c:	72fb      	strb	r3, [r7, #11]
 800374e:	e004      	b.n	800375a <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 8003750:	2301      	movs	r3, #1
 8003752:	72fb      	strb	r3, [r7, #11]
 8003754:	e001      	b.n	800375a <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 8003756:	2301      	movs	r3, #1
 8003758:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <RTC_SetDate+0x11c>)
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8003760:	7afb      	ldrb	r3, [r7, #11]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bd90      	pop	{r4, r7, pc}
 800376a:	bf00      	nop
 800376c:	40002800 	.word	0x40002800

08003770 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800377e:	4b22      	ldr	r3, [pc, #136]	; (8003808 <RTC_GetDate+0x98>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003786:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	0c1b      	lsrs	r3, r3, #16
 8003790:	b2da      	uxtb	r2, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	0b5b      	lsrs	r3, r3, #13
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11a      	bne.n	8003800 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	78db      	ldrb	r3, [r3, #3]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f839 	bl	8003846 <RTC_Bcd2ToByte>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	785b      	ldrb	r3, [r3, #1]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f830 	bl	8003846 <RTC_Bcd2ToByte>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	789b      	ldrb	r3, [r3, #2]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f827 	bl	8003846 <RTC_Bcd2ToByte>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	709a      	strb	r2, [r3, #2]
  }
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40002800 	.word	0x40002800

0800380c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800381a:	e005      	b.n	8003828 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	3301      	adds	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	3b0a      	subs	r3, #10
 8003826:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b09      	cmp	r3, #9
 800382c:	d8f6      	bhi.n	800381c <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	b2da      	uxtb	r2, r3
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	4313      	orrs	r3, r2
 8003838:	b2db      	uxtb	r3, r3
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	4413      	add	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	b2da      	uxtb	r2, r3
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	4413      	add	r3, r2
 8003870:	b2db      	uxtb	r3, r3
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8a1b      	ldrh	r3, [r3, #16]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	88db      	ldrh	r3, [r3, #6]
 80038ae:	461a      	mov	r2, r3
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	4313      	orrs	r3, r2
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	899b      	ldrh	r3, [r3, #12]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038cc:	f023 030c 	bic.w	r3, r3, #12
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	889a      	ldrh	r2, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	891b      	ldrh	r3, [r3, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80038e2:	4313      	orrs	r3, r2
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	4313      	orrs	r3, r2
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8a9b      	ldrh	r3, [r3, #20]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	899b      	ldrh	r3, [r3, #12]
 800390a:	461a      	mov	r2, r3
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	4313      	orrs	r3, r2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	b29a      	uxth	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fb78 	bl	8003014 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a30      	ldr	r2, [pc, #192]	; (80039e8 <USART_Init+0x168>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <USART_Init+0xb4>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <USART_Init+0x16c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d102      	bne.n	800393a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	e001      	b.n	800393e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	899b      	ldrh	r3, [r3, #12]
 8003942:	b29b      	uxth	r3, r3
 8003944:	b21b      	sxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	da0c      	bge.n	8003964 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800394a:	6a3a      	ldr	r2, [r7, #32]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009a      	lsls	r2, r3, #2
 8003954:	441a      	add	r2, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e00b      	b.n	800397c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003964:	6a3a      	ldr	r2, [r7, #32]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	009a      	lsls	r2, r3, #2
 800396e:	441a      	add	r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <USART_Init+0x170>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	2264      	movs	r2, #100	; 0x64
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	899b      	ldrh	r3, [r3, #12]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da0c      	bge.n	80039c0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	3332      	adds	r3, #50	; 0x32
 80039ac:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <USART_Init+0x170>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ba:	4313      	orrs	r3, r2
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	e00b      	b.n	80039d8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	3332      	adds	r3, #50	; 0x32
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <USART_Init+0x170>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	4313      	orrs	r3, r2
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	811a      	strh	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a02:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	220c      	movs	r2, #12
 8003a1a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	819a      	strh	r2, [r3, #12]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	899b      	ldrh	r3, [r3, #12]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8003a50:	e007      	b.n	8003a62 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	899b      	ldrh	r3, [r3, #12]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	819a      	strh	r2, [r3, #12]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <CMDS_Init>:
extern void jSem_give(void);



void CMDS_Init(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
    Globals.cmds_input_ready   = FALSE;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <CMDS_Init+0x28>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
    Globals.cmds_state_machine = CMDSM_WAITFORLINE;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <CMDS_Init+0x28>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
    Globals.cmds_xtest         = 0x11223398;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <CMDS_Init+0x28>)
 8003a82:	4a06      	ldr	r2, [pc, #24]	; (8003a9c <CMDS_Init+0x2c>)
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

    *((uint32_t *)SAFE_MEM_ADDR) = 0xBC00BC99;
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <CMDS_Init+0x30>)
 8003a88:	4a06      	ldr	r2, [pc, #24]	; (8003aa4 <CMDS_Init+0x34>)
 8003a8a:	601a      	str	r2, [r3, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	2000401c 	.word	0x2000401c
 8003a9c:	11223398 	.word	0x11223398
 8003aa0:	2000403c 	.word	0x2000403c
 8003aa4:	bc00bc99 	.word	0xbc00bc99

08003aa8 <CMDS_Process>:


void CMDS_Process(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
	GLOBALS_t  *G           = &Globals;
 8003aae:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <CMDS_Process+0x128>)
 8003ab0:	60bb      	str	r3, [r7, #8]
    bool        signal_done = TRUE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
    char       *S           = G->cmds_InpPtr;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	607b      	str	r3, [r7, #4]
    
    switch( G->cmds_state_machine )
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <CMDS_Process+0x22>
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d073      	beq.n	8003bb0 <CMDS_Process+0x108>
 8003ac8:	e078      	b.n	8003bbc <CMDS_Process+0x114>
    {
    case CMDSM_WAITFORLINE:
        
        if( G->cmds_input_ready == FALSE ) { return; }
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d07a      	beq.n	8003bc8 <CMDS_Process+0x120>
        G->cmds_input_ready = FALSE;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
        
        if     ( S[0] == 'a' )                                /*signal_done = cmds_A( DO_INIT ) */;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b61      	cmp	r3, #97	; 0x61
 8003ade:	d06c      	beq.n	8003bba <CMDS_Process+0x112>
        else if( S[0] == 'b' )                                signal_done = cmds_B();
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b62      	cmp	r3, #98	; 0x62
 8003ae6:	d103      	bne.n	8003af0 <CMDS_Process+0x48>
 8003ae8:	f000 f9d4 	bl	8003e94 <cmds_B>
 8003aec:	60f8      	str	r0, [r7, #12]
        else if( S[0] == 's' && S[1] == 'c')                  signal_done = cmds_SC();
        else if( S[0] == 's' && S[1] == 't')                  signal_done = cmds_ST();
        else if( S[0] == 't' )                                signal_done = cmds_T();
        else if( S[0] == 'v' )                                signal_done = CMDS_DisplayVersion();
        else if( S[0] == 'z' )                                /*signal_done = cmds_Z( DO_INIT ) */;
        break;
 8003aee:	e064      	b.n	8003bba <CMDS_Process+0x112>
        else if( S[0] == 'c' && S[1] == 'h')                  signal_done = cmds_ch();
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b63      	cmp	r3, #99	; 0x63
 8003af6:	d108      	bne.n	8003b0a <CMDS_Process+0x62>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3301      	adds	r3, #1
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b68      	cmp	r3, #104	; 0x68
 8003b00:	d103      	bne.n	8003b0a <CMDS_Process+0x62>
 8003b02:	f000 f893 	bl	8003c2c <cmds_ch>
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	e051      	b.n	8003bae <CMDS_Process+0x106>
        else if( S[0] == 'm' && S[1] == 'd')                  signal_done = cmds_MD( DO_INIT );
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b6d      	cmp	r3, #109	; 0x6d
 8003b10:	d109      	bne.n	8003b26 <CMDS_Process+0x7e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3301      	adds	r3, #1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b64      	cmp	r3, #100	; 0x64
 8003b1a:	d104      	bne.n	8003b26 <CMDS_Process+0x7e>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f000 fa07 	bl	8003f30 <cmds_MD>
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	e043      	b.n	8003bae <CMDS_Process+0x106>
        else if( S[0] == 'r' && S[1] == 't' && S[2] == 'c')   signal_done = cmds_rtc();
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b72      	cmp	r3, #114	; 0x72
 8003b2c:	d10d      	bne.n	8003b4a <CMDS_Process+0xa2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3301      	adds	r3, #1
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b74      	cmp	r3, #116	; 0x74
 8003b36:	d108      	bne.n	8003b4a <CMDS_Process+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b63      	cmp	r3, #99	; 0x63
 8003b40:	d103      	bne.n	8003b4a <CMDS_Process+0xa2>
 8003b42:	f000 fb29 	bl	8004198 <cmds_rtc>
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	e031      	b.n	8003bae <CMDS_Process+0x106>
        else if( S[0] == 'r' )                                signal_done = cmds_R();
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b72      	cmp	r3, #114	; 0x72
 8003b50:	d103      	bne.n	8003b5a <CMDS_Process+0xb2>
 8003b52:	f000 f8db 	bl	8003d0c <cmds_R>
 8003b56:	60f8      	str	r0, [r7, #12]
        break;
 8003b58:	e02f      	b.n	8003bba <CMDS_Process+0x112>
        else if( S[0] == 's' && S[1] == 'c')                  signal_done = cmds_SC();
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b73      	cmp	r3, #115	; 0x73
 8003b60:	d108      	bne.n	8003b74 <CMDS_Process+0xcc>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3301      	adds	r3, #1
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b63      	cmp	r3, #99	; 0x63
 8003b6a:	d103      	bne.n	8003b74 <CMDS_Process+0xcc>
 8003b6c:	f000 fac4 	bl	80040f8 <cmds_SC>
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	e01c      	b.n	8003bae <CMDS_Process+0x106>
        else if( S[0] == 's' && S[1] == 't')                  signal_done = cmds_ST();
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b73      	cmp	r3, #115	; 0x73
 8003b7a:	d108      	bne.n	8003b8e <CMDS_Process+0xe6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b74      	cmp	r3, #116	; 0x74
 8003b84:	d103      	bne.n	8003b8e <CMDS_Process+0xe6>
 8003b86:	f000 fa53 	bl	8004030 <cmds_ST>
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	e00f      	b.n	8003bae <CMDS_Process+0x106>
        else if( S[0] == 't' )                                signal_done = cmds_T();
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b74      	cmp	r3, #116	; 0x74
 8003b94:	d103      	bne.n	8003b9e <CMDS_Process+0xf6>
 8003b96:	f000 f8f9 	bl	8003d8c <cmds_T>
 8003b9a:	60f8      	str	r0, [r7, #12]
        break;
 8003b9c:	e00d      	b.n	8003bba <CMDS_Process+0x112>
        else if( S[0] == 'v' )                                signal_done = CMDS_DisplayVersion();
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b76      	cmp	r3, #118	; 0x76
 8003ba4:	d109      	bne.n	8003bba <CMDS_Process+0x112>
 8003ba6:	f000 f815 	bl	8003bd4 <CMDS_DisplayVersion>
 8003baa:	60f8      	str	r0, [r7, #12]
        break;
 8003bac:	e005      	b.n	8003bba <CMDS_Process+0x112>
 8003bae:	e004      	b.n	8003bba <CMDS_Process+0x112>
        
    case CMDSM_MEMDUMP:      signal_done = cmds_MD( DO_PROCESS );    break;
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f000 f9bd 	bl	8003f30 <cmds_MD>
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	e000      	b.n	8003bbc <CMDS_Process+0x114>
        break;
 8003bba:	bf00      	nop
    //case CMDSM_AD_RDONE:     signal_done = cmds_A ( DO_PROCESS );    break;
    //case CMDSM_AD_SETDONE:   signal_done = cmds_Z ( DO_PROCESS );    break;
        
    }

    if( signal_done == TRUE ) { U2Inp_SignalCmdDone(); }
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d103      	bne.n	8003bca <CMDS_Process+0x122>
 8003bc2:	f000 fc29 	bl	8004418 <U2Inp_SignalCmdDone>
 8003bc6:	e000      	b.n	8003bca <CMDS_Process+0x122>
        if( G->cmds_input_ready == FALSE ) { return; }
 8003bc8:	bf00      	nop
}
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	2000401c 	.word	0x2000401c

08003bd4 <CMDS_DisplayVersion>:




bool CMDS_DisplayVersion(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
    U2_PrintSTR("\r\n");
 8003bd8:	4807      	ldr	r0, [pc, #28]	; (8003bf8 <CMDS_DisplayVersion+0x24>)
 8003bda:	f000 fd86 	bl	80046ea <U2_PrintSTR>
    U2_Print8N (VERSION_STR, VERSION_MINOR);
 8003bde:	2101      	movs	r1, #1
 8003be0:	4806      	ldr	r0, [pc, #24]	; (8003bfc <CMDS_DisplayVersion+0x28>)
 8003be2:	f000 fdbe 	bl	8004762 <U2_Print8N>
    U2_PrintSTR(", ");
 8003be6:	4806      	ldr	r0, [pc, #24]	; (8003c00 <CMDS_DisplayVersion+0x2c>)
 8003be8:	f000 fd7f 	bl	80046ea <U2_PrintSTR>
    U2_PrintSTR(VERSION_DATE);
 8003bec:	4805      	ldr	r0, [pc, #20]	; (8003c04 <CMDS_DisplayVersion+0x30>)
 8003bee:	f000 fd7c 	bl	80046ea <U2_PrintSTR>
    
    return TRUE;
 8003bf2:	2301      	movs	r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	08005f20 	.word	0x08005f20
 8003bfc:	08005f24 	.word	0x08005f24
 8003c00:	08005f38 	.word	0x08005f38
 8003c04:	08005f3c 	.word	0x08005f3c

08003c08 <CMDS_SetInputStr>:


void CMDS_SetInputStr(char *StrInp)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    Globals.cmds_InpPtr      = StrInp;
 8003c10:	4a05      	ldr	r2, [pc, #20]	; (8003c28 <CMDS_SetInputStr+0x20>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6053      	str	r3, [r2, #4]
    Globals.cmds_input_ready = TRUE;
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <CMDS_SetInputStr+0x20>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	2000401c 	.word	0x2000401c

08003c2c <cmds_ch>:


static bool cmds_ch( void )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
    u32         chan = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
    GLOBALS_t  *G    = &Globals;
 8003c36:	4b32      	ldr	r3, [pc, #200]	; (8003d00 <cmds_ch+0xd4>)
 8003c38:	603b      	str	r3, [r7, #0]


    if( strlen(G->cmds_InpPtr) > 3 )
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fac6 	bl	80001d0 <strlen>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d909      	bls.n	8003c5e <cmds_ch+0x32>
    {
    	chan = HtoI(&G->cmds_InpPtr[3]) & 0x0000000F;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	3303      	adds	r3, #3
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 ff9d 	bl	8005b90 <HtoI>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	607b      	str	r3, [r7, #4]
    }

    U2_Print32( "channel: ", chan );
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4828      	ldr	r0, [pc, #160]	; (8003d04 <cmds_ch+0xd8>)
 8003c62:	f000 fd50 	bl	8004706 <U2_Print32>

    GPIO_ResetBits( GPIOB, MUX1_EN_Pin );
 8003c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c6a:	4827      	ldr	r0, [pc, #156]	; (8003d08 <cmds_ch+0xdc>)
 8003c6c:	f7ff f823 	bl	8002cb6 <GPIO_ResetBits>
    GPIO_ResetBits( GPIOB, MUX2_EN_Pin );
 8003c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c74:	4824      	ldr	r0, [pc, #144]	; (8003d08 <cmds_ch+0xdc>)
 8003c76:	f7ff f81e 	bl	8002cb6 <GPIO_ResetBits>
    GPIO_ResetBits( GPIOB, MUXBIT_0_Pin | MUXBIT_1_Pin | MUXBIT_2_Pin );
 8003c7a:	2107      	movs	r1, #7
 8003c7c:	4822      	ldr	r0, [pc, #136]	; (8003d08 <cmds_ch+0xdc>)
 8003c7e:	f7ff f81a 	bl	8002cb6 <GPIO_ResetBits>

    (chan & 1) ? GPIO_ResetBits( GPIOB, MUXBIT_0_Pin) : GPIO_SetBits( GPIOB, MUXBIT_0_Pin);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <cmds_ch+0x6a>
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	481e      	ldr	r0, [pc, #120]	; (8003d08 <cmds_ch+0xdc>)
 8003c90:	f7ff f811 	bl	8002cb6 <GPIO_ResetBits>
 8003c94:	e003      	b.n	8003c9e <cmds_ch+0x72>
 8003c96:	2101      	movs	r1, #1
 8003c98:	481b      	ldr	r0, [pc, #108]	; (8003d08 <cmds_ch+0xdc>)
 8003c9a:	f7fe fffd 	bl	8002c98 <GPIO_SetBits>
    (chan & 2) ? GPIO_ResetBits( GPIOB, MUXBIT_1_Pin) : GPIO_SetBits( GPIOB, MUXBIT_1_Pin);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <cmds_ch+0x86>
 8003ca8:	2102      	movs	r1, #2
 8003caa:	4817      	ldr	r0, [pc, #92]	; (8003d08 <cmds_ch+0xdc>)
 8003cac:	f7ff f803 	bl	8002cb6 <GPIO_ResetBits>
 8003cb0:	e003      	b.n	8003cba <cmds_ch+0x8e>
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	4814      	ldr	r0, [pc, #80]	; (8003d08 <cmds_ch+0xdc>)
 8003cb6:	f7fe ffef 	bl	8002c98 <GPIO_SetBits>
    (chan & 4) ? GPIO_ResetBits( GPIOB, MUXBIT_2_Pin) : GPIO_SetBits( GPIOB, MUXBIT_2_Pin);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <cmds_ch+0xa2>
 8003cc4:	2104      	movs	r1, #4
 8003cc6:	4810      	ldr	r0, [pc, #64]	; (8003d08 <cmds_ch+0xdc>)
 8003cc8:	f7fe fff5 	bl	8002cb6 <GPIO_ResetBits>
 8003ccc:	e003      	b.n	8003cd6 <cmds_ch+0xaa>
 8003cce:	2104      	movs	r1, #4
 8003cd0:	480d      	ldr	r0, [pc, #52]	; (8003d08 <cmds_ch+0xdc>)
 8003cd2:	f7fe ffe1 	bl	8002c98 <GPIO_SetBits>
    (chan & 8) ? GPIO_SetBits  ( GPIOB,  MUX2_EN_Pin) : GPIO_SetBits( GPIOB,  MUX1_EN_Pin);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <cmds_ch+0xc0>
 8003ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ce4:	4808      	ldr	r0, [pc, #32]	; (8003d08 <cmds_ch+0xdc>)
 8003ce6:	f7fe ffd7 	bl	8002c98 <GPIO_SetBits>
 8003cea:	e004      	b.n	8003cf6 <cmds_ch+0xca>
 8003cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cf0:	4805      	ldr	r0, [pc, #20]	; (8003d08 <cmds_ch+0xdc>)
 8003cf2:	f7fe ffd1 	bl	8002c98 <GPIO_SetBits>

    return TRUE;
 8003cf6:	2301      	movs	r3, #1
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	2000401c 	.word	0x2000401c
 8003d04:	08005f50 	.word	0x08005f50
 8003d08:	40020400 	.word	0x40020400

08003d0c <cmds_R>:


static bool cmds_R( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
    u32  tmpw;
    char ch1 = Globals.cmds_InpPtr[1];
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <cmds_R+0x68>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	71fb      	strb	r3, [r7, #7]
    
    if( ch1 == 'p' )
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	2b70      	cmp	r3, #112	; 0x70
 8003d1e:	d10c      	bne.n	8003d3a <cmds_R+0x2e>
    {
        U2_Print32( "PWR->CR  ", (u32)PWR->CR );
 8003d20:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <cmds_R+0x6c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4619      	mov	r1, r3
 8003d26:	4815      	ldr	r0, [pc, #84]	; (8003d7c <cmds_R+0x70>)
 8003d28:	f000 fced 	bl	8004706 <U2_Print32>
        U2_Print32( "PWR->CSR ", (u32)PWR->CSR );
 8003d2c:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <cmds_R+0x6c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4619      	mov	r1, r3
 8003d32:	4813      	ldr	r0, [pc, #76]	; (8003d80 <cmds_R+0x74>)
 8003d34:	f000 fce7 	bl	8004706 <U2_Print32>
 8003d38:	e016      	b.n	8003d68 <cmds_R+0x5c>
    }
    else if( ch1 == 'm' )
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	2b6d      	cmp	r3, #109	; 0x6d
 8003d3e:	d113      	bne.n	8003d68 <cmds_R+0x5c>
    {
        tmpw = HtoI(&Globals.cmds_InpPtr[3]) & 0xFFFFFFFC;                              // bits 0 and 1 forced to 0
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <cmds_R+0x68>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	3303      	adds	r3, #3
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 ff22 	bl	8005b90 <HtoI>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	603b      	str	r3, [r7, #0]
        U2_Print32N( "0x", tmpw );
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	480b      	ldr	r0, [pc, #44]	; (8003d84 <cmds_R+0x78>)
 8003d58:	f000 fce4 	bl	8004724 <U2_Print32N>
        U2_Print32( ": ", (u32)*((u32 *)tmpw) );
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	4809      	ldr	r0, [pc, #36]	; (8003d88 <cmds_R+0x7c>)
 8003d64:	f000 fccf 	bl	8004706 <U2_Print32>
    }
    
    return TRUE;
 8003d68:	2301      	movs	r3, #1
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	2000401c 	.word	0x2000401c
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	08005f5c 	.word	0x08005f5c
 8003d80:	08005f68 	.word	0x08005f68
 8003d84:	08005f74 	.word	0x08005f74
 8003d88:	08005f78 	.word	0x08005f78

08003d8c <cmds_T>:


static bool cmds_T( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
    int  tmpI;
    u32  tmp32;
    char ch1 = Globals.cmds_InpPtr[1];
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <cmds_T+0x88>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	73fb      	strb	r3, [r7, #15]
    
    if( ch1 == '1' )
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b31      	cmp	r3, #49	; 0x31
 8003d9e:	d118      	bne.n	8003dd2 <cmds_T+0x46>
    {
        tmpI = AtoI("452");
 8003da0:	481d      	ldr	r0, [pc, #116]	; (8003e18 <cmds_T+0x8c>)
 8003da2:	f001 ff41 	bl	8005c28 <AtoI>
 8003da6:	60b8      	str	r0, [r7, #8]
        U2_Print32( "452: 0x", (u32)tmpI );
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4619      	mov	r1, r3
 8003dac:	481b      	ldr	r0, [pc, #108]	; (8003e1c <cmds_T+0x90>)
 8003dae:	f000 fcaa 	bl	8004706 <U2_Print32>
        
        tmpI = AtoI("-4392");
 8003db2:	481b      	ldr	r0, [pc, #108]	; (8003e20 <cmds_T+0x94>)
 8003db4:	f001 ff38 	bl	8005c28 <AtoI>
 8003db8:	60b8      	str	r0, [r7, #8]
        if( tmpI == -4392 )
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <cmds_T+0x98>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d103      	bne.n	8003dca <cmds_T+0x3e>
            U2_PrintSTR( "-4392 Good\r\n" );
 8003dc2:	4819      	ldr	r0, [pc, #100]	; (8003e28 <cmds_T+0x9c>)
 8003dc4:	f000 fc91 	bl	80046ea <U2_PrintSTR>
 8003dc8:	e01e      	b.n	8003e08 <cmds_T+0x7c>
        else
            U2_PrintSTR( "Conversion did not yield -4392\r\n" );
 8003dca:	4818      	ldr	r0, [pc, #96]	; (8003e2c <cmds_T+0xa0>)
 8003dcc:	f000 fc8d 	bl	80046ea <U2_PrintSTR>
 8003dd0:	e01a      	b.n	8003e08 <cmds_T+0x7c>
    }
    else if( ch1 == '2' )
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b32      	cmp	r3, #50	; 0x32
 8003dd6:	d107      	bne.n	8003de8 <cmds_T+0x5c>
    {
        tmp32 = (u32)*((u32 *)SAFE_MEM_ADDR);
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <cmds_T+0x88>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	607b      	str	r3, [r7, #4]
        U2_Print32( "*SAFE_MEM_ADDR = ", tmp32 );
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4813      	ldr	r0, [pc, #76]	; (8003e30 <cmds_T+0xa4>)
 8003de2:	f000 fc90 	bl	8004706 <U2_Print32>
 8003de6:	e00f      	b.n	8003e08 <cmds_T+0x7c>
    }
    else if( ch1 == '3' )
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b33      	cmp	r3, #51	; 0x33
 8003dec:	d10c      	bne.n	8003e08 <cmds_T+0x7c>
    {
        tmp32 = 1234567;
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <cmds_T+0xa8>)
 8003df0:	607b      	str	r3, [r7, #4]
        printf("testing, tmp32 = %d\n\r",(int)tmp32);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4619      	mov	r1, r3
 8003df6:	4810      	ldr	r0, [pc, #64]	; (8003e38 <cmds_T+0xac>)
 8003df8:	f001 fe02 	bl	8005a00 <iprintf>
        printf("This is Only Just a Test %s   %d    0x%x\n\r","hello world",(int)tmp32,0x1234567);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <cmds_T+0xb0>)
 8003e00:	490f      	ldr	r1, [pc, #60]	; (8003e40 <cmds_T+0xb4>)
 8003e02:	4810      	ldr	r0, [pc, #64]	; (8003e44 <cmds_T+0xb8>)
 8003e04:	f001 fdfc 	bl	8005a00 <iprintf>
    }
    
    return TRUE;
 8003e08:	2301      	movs	r3, #1
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2000401c 	.word	0x2000401c
 8003e18:	08005f7c 	.word	0x08005f7c
 8003e1c:	08005f80 	.word	0x08005f80
 8003e20:	08005f88 	.word	0x08005f88
 8003e24:	ffffeed8 	.word	0xffffeed8
 8003e28:	08005f90 	.word	0x08005f90
 8003e2c:	08005fa0 	.word	0x08005fa0
 8003e30:	08005fc4 	.word	0x08005fc4
 8003e34:	0012d687 	.word	0x0012d687
 8003e38:	08005fd8 	.word	0x08005fd8
 8003e3c:	01234567 	.word	0x01234567
 8003e40:	08005ff0 	.word	0x08005ff0
 8003e44:	08005ffc 	.word	0x08005ffc

08003e48 <init_rtc_stuff>:
//       (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
//       (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
//       (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
//
static void init_rtc_stuff(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
	RTC_InitTypeDef   Irtc;

	RCC_APB1PeriphClockCmd( RCC_APB1Periph_PWR,  ENABLE );
 8003e4e:	2101      	movs	r1, #1
 8003e50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e54:	f7ff f9e4 	bl	8003220 <RCC_APB1PeriphClockCmd>
	PWR_BackupAccessCmd( ENABLE );
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f7ff f899 	bl	8002f90 <PWR_BackupAccessCmd>

	RCC_LSICmd( DISABLE );
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7ff f8c8 	bl	8002ff4 <RCC_LSICmd>
	RCC_LSEConfig( RCC_LSE_ON );
 8003e64:	2001      	movs	r0, #1
 8003e66:	f7ff f8a3 	bl	8002fb0 <RCC_LSEConfig>

	RCC_RTCCLKConfig( RCC_RTCCLKSource_LSE );
 8003e6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e6e:	f7ff f979 	bl	8003164 <RCC_RTCCLKConfig>
	RCC_RTCCLKCmd( ENABLE );
 8003e72:	2001      	movs	r0, #1
 8003e74:	f7ff f9a4 	bl	80031c0 <RCC_RTCCLKCmd>

	Irtc.RTC_HourFormat   = RTC_HourFormat_24;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	607b      	str	r3, [r7, #4]
	Irtc.RTC_AsynchPrediv = 127;
 8003e7c:	237f      	movs	r3, #127	; 0x7f
 8003e7e:	60bb      	str	r3, [r7, #8]
	Irtc.RTC_SynchPrediv  = 255;
 8003e80:	23ff      	movs	r3, #255	; 0xff
 8003e82:	60fb      	str	r3, [r7, #12]
	RTC_Init( &Irtc );
 8003e84:	1d3b      	adds	r3, r7, #4
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fa2a 	bl	80032e0 <RTC_Init>
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <cmds_B>:



static bool cmds_B( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
	char ch1 = Globals.cmds_InpPtr[1];
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <cmds_B+0x80>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	71fb      	strb	r3, [r7, #7]

    if( ch1 == '1' )
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	2b31      	cmp	r3, #49	; 0x31
 8003ea6:	d102      	bne.n	8003eae <cmds_B+0x1a>
    {
    	jSem_give();
 8003ea8:	f001 fa74 	bl	8005394 <jSem_give>
 8003eac:	e02d      	b.n	8003f0a <cmds_B+0x76>
    }
    else if( ch1 == '2' )
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	2b32      	cmp	r3, #50	; 0x32
 8003eb2:	d02a      	beq.n	8003f0a <cmds_B+0x76>
    {
    	;
    }
    else if( ch1 == '3' )
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	2b33      	cmp	r3, #51	; 0x33
 8003eb8:	d107      	bne.n	8003eca <cmds_B+0x36>
    {
    	GPIO_ResetBits(GPIOA, CTRL_P_RTS_Pin);
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4816      	ldr	r0, [pc, #88]	; (8003f18 <cmds_B+0x84>)
 8003ebe:	f7fe fefa 	bl	8002cb6 <GPIO_ResetBits>
    	U2_PrintSTR( "yRTS_Pin=0\r\n" );
 8003ec2:	4816      	ldr	r0, [pc, #88]	; (8003f1c <cmds_B+0x88>)
 8003ec4:	f000 fc11 	bl	80046ea <U2_PrintSTR>
 8003ec8:	e01f      	b.n	8003f0a <cmds_B+0x76>
    }
    else if( ch1 == '4' )
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	2b34      	cmp	r3, #52	; 0x34
 8003ece:	d107      	bne.n	8003ee0 <cmds_B+0x4c>
    {
        GPIO_SetBits(GPIOA, CTRL_P_RTS_Pin);
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4811      	ldr	r0, [pc, #68]	; (8003f18 <cmds_B+0x84>)
 8003ed4:	f7fe fee0 	bl	8002c98 <GPIO_SetBits>
        U2_PrintSTR( "yRTS_Pin=1\r\n" );
 8003ed8:	4811      	ldr	r0, [pc, #68]	; (8003f20 <cmds_B+0x8c>)
 8003eda:	f000 fc06 	bl	80046ea <U2_PrintSTR>
 8003ede:	e014      	b.n	8003f0a <cmds_B+0x76>
    }
    else if( ch1 == '5' )
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	2b35      	cmp	r3, #53	; 0x35
 8003ee4:	d107      	bne.n	8003ef6 <cmds_B+0x62>
    {
    	GPIO_ResetBits(GPIOD, GPIO_Pin_6);
 8003ee6:	2140      	movs	r1, #64	; 0x40
 8003ee8:	480e      	ldr	r0, [pc, #56]	; (8003f24 <cmds_B+0x90>)
 8003eea:	f7fe fee4 	bl	8002cb6 <GPIO_ResetBits>
    	U2_PrintSTR( "xctrl_to_comms=0\r\n" );
 8003eee:	480e      	ldr	r0, [pc, #56]	; (8003f28 <cmds_B+0x94>)
 8003ef0:	f000 fbfb 	bl	80046ea <U2_PrintSTR>
 8003ef4:	e009      	b.n	8003f0a <cmds_B+0x76>
    }
    else if( ch1 == '6' )
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	2b36      	cmp	r3, #54	; 0x36
 8003efa:	d106      	bne.n	8003f0a <cmds_B+0x76>
    {
    	GPIO_SetBits(GPIOD, GPIO_Pin_6);
 8003efc:	2140      	movs	r1, #64	; 0x40
 8003efe:	4809      	ldr	r0, [pc, #36]	; (8003f24 <cmds_B+0x90>)
 8003f00:	f7fe feca 	bl	8002c98 <GPIO_SetBits>
    	U2_PrintSTR( "xctrl_to_comms=1\r\n" );
 8003f04:	4809      	ldr	r0, [pc, #36]	; (8003f2c <cmds_B+0x98>)
 8003f06:	f000 fbf0 	bl	80046ea <U2_PrintSTR>
    }

    return TRUE;
 8003f0a:	2301      	movs	r3, #1
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	2000401c 	.word	0x2000401c
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	08006028 	.word	0x08006028
 8003f20:	08006038 	.word	0x08006038
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	08006048 	.word	0x08006048
 8003f2c:	0800605c 	.word	0x0800605c

08003f30 <cmds_MD>:




static bool cmds_MD( u32 state )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
    u32  i;
    bool retv = FALSE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
    GLOBALS_t  *G = &Globals;
 8003f3c:	4b37      	ldr	r3, [pc, #220]	; (800401c <cmds_MD+0xec>)
 8003f3e:	60fb      	str	r3, [r7, #12]
    
    switch( state )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <cmds_MD+0x1c>
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d01c      	beq.n	8003f84 <cmds_MD+0x54>
 8003f4a:	e062      	b.n	8004012 <cmds_MD+0xe2>
    {
    case DO_INIT:

        if( strlen(G->cmds_InpPtr) > 2 ) { G->cmds_word1 = HtoI(&G->cmds_InpPtr[3]) & 0xFFFFFFFC; }
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc f93d 	bl	80001d0 <strlen>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d90a      	bls.n	8003f72 <cmds_MD+0x42>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	3303      	adds	r3, #3
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fe14 	bl	8005b90 <HtoI>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	611a      	str	r2, [r3, #16]
        G->cmds_count1        = 0;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	615a      	str	r2, [r3, #20]
        G->cmds_state_machine = CMDSM_MEMDUMP;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	609a      	str	r2, [r3, #8]
        G->cmds_completion    = 1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	60da      	str	r2, [r3, #12]
        FALL_THRU;
        
    case DO_PROCESS:
    
        if( G->cmds_completion == 1 )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d141      	bne.n	8004010 <cmds_MD+0xe0>
        {
            U2_Print32N( "0x", G->cmds_word1 );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	4619      	mov	r1, r3
 8003f92:	4823      	ldr	r0, [pc, #140]	; (8004020 <cmds_MD+0xf0>)
 8003f94:	f000 fbc6 	bl	8004724 <U2_Print32N>
            U2_Print8N( ": ", (u8)*((u8 *)G->cmds_word1++) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	1c59      	adds	r1, r3, #1
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6111      	str	r1, [r2, #16]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	481f      	ldr	r0, [pc, #124]	; (8004024 <cmds_MD+0xf4>)
 8003fa8:	f000 fbdb 	bl	8004762 <U2_Print8N>

            for( i=0; i < 15; i++ )
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e00c      	b.n	8003fcc <cmds_MD+0x9c>
            {
                U2_Print8N( " ", (u8)*((u8 *)G->cmds_word1++) );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	1c59      	adds	r1, r3, #1
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6111      	str	r1, [r2, #16]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4819      	ldr	r0, [pc, #100]	; (8004028 <cmds_MD+0xf8>)
 8003fc2:	f000 fbce 	bl	8004762 <U2_Print8N>
            for( i=0; i < 15; i++ )
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b0e      	cmp	r3, #14
 8003fd0:	d9ef      	bls.n	8003fb2 <cmds_MD+0x82>
            }

            U2_Send( SERO_TYPE_STR, (char *)"\r\n", &G->cmds_completion, 0 );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f103 020c 	add.w	r2, r3, #12
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4914      	ldr	r1, [pc, #80]	; (800402c <cmds_MD+0xfc>)
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f000 fa47 	bl	8004470 <U2_Send>

            if( ++G->cmds_count1 == 4 )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	615a      	str	r2, [r3, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d10d      	bne.n	8004010 <cmds_MD+0xe0>
            {
                G->cmds_state_machine = CMDSM_WAITFORLINE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
                ItoH( G->cmds_word1, &G->cmds_InpPtr[2] );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	3302      	adds	r3, #2
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f001 fd6e 	bl	8005ae8 <ItoH>
                retv = TRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	613b      	str	r3, [r7, #16]
            }
        }
        break;
 8004010:	bf00      	nop
    }
    
    return retv;
 8004012:	693b      	ldr	r3, [r7, #16]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	2000401c 	.word	0x2000401c
 8004020:	08005f74 	.word	0x08005f74
 8004024:	08005f78 	.word	0x08005f78
 8004028:	08006070 	.word	0x08006070
 800402c:	08005f20 	.word	0x08005f20

08004030 <cmds_ST>:
//
//  012345678901234567890
//  st 38 12 03 31 01 17
//
static bool cmds_ST( void )
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
    u8                i,k;
    RTC_TimeTypeDef   Trtc;
    RTC_DateTypeDef   Drtc;
    GLOBALS_t  *G = &Globals;
 8004036:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <cmds_ST+0xc0>)
 8004038:	60bb      	str	r3, [r7, #8]
    
    if( strlen(G->cmds_InpPtr) == 2 )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc f8c6 	bl	80001d0 <strlen>
 8004044:	4603      	mov	r3, r0
 8004046:	2b02      	cmp	r3, #2
 8004048:	d103      	bne.n	8004052 <cmds_ST+0x22>
    {
        U2_PrintSTR( "st mins hrs wkday day mon yr\r\n" );
 800404a:	482a      	ldr	r0, [pc, #168]	; (80040f4 <cmds_ST+0xc4>)
 800404c:	f000 fb4d 	bl	80046ea <U2_PrintSTR>
 8004050:	e049      	b.n	80040e6 <cmds_ST+0xb6>
    }
    else
    {
        for( i=3,k=0; i < 20; i += 3 )
 8004052:	2303      	movs	r3, #3
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	2300      	movs	r3, #0
 8004058:	73bb      	strb	r3, [r7, #14]
 800405a:	e019      	b.n	8004090 <cmds_ST+0x60>
        {
            G->cmds_InpPtr[i+2] = 0;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	3302      	adds	r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
            G->cmds_TA[k++]     = (u8)HtoU16( &G->cmds_InpPtr[i] );
 800406a:	7bbb      	ldrb	r3, [r7, #14]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	73ba      	strb	r2, [r7, #14]
 8004070:	461c      	mov	r4, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	4413      	add	r3, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fe5c 	bl	8005d38 <HtoU16>
 8004080:	4603      	mov	r3, r0
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4423      	add	r3, r4
 8004088:	761a      	strb	r2, [r3, #24]
        for( i=3,k=0; i < 20; i += 3 )
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3303      	adds	r3, #3
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b13      	cmp	r3, #19
 8004094:	d9e2      	bls.n	800405c <cmds_ST+0x2c>
        }

        Trtc.RTC_H12     = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	71fb      	strb	r3, [r7, #7]
        Trtc.RTC_Hours   = G->cmds_TA[1];
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	7e5b      	ldrb	r3, [r3, #25]
 800409e:	713b      	strb	r3, [r7, #4]
        Trtc.RTC_Minutes = G->cmds_TA[0];
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	7e1b      	ldrb	r3, [r3, #24]
 80040a4:	717b      	strb	r3, [r7, #5]
        Trtc.RTC_Seconds = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	71bb      	strb	r3, [r7, #6]

        Drtc.RTC_Date    = G->cmds_TA[3];
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	7edb      	ldrb	r3, [r3, #27]
 80040ae:	70bb      	strb	r3, [r7, #2]
        Drtc.RTC_Month   = G->cmds_TA[4];
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	7f1b      	ldrb	r3, [r3, #28]
 80040b4:	707b      	strb	r3, [r7, #1]
        Drtc.RTC_WeekDay = G->cmds_TA[2];
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	7e9b      	ldrb	r3, [r3, #26]
 80040ba:	703b      	strb	r3, [r7, #0]
        Drtc.RTC_Year    = G->cmds_TA[5];
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	7f5b      	ldrb	r3, [r3, #29]
 80040c0:	70fb      	strb	r3, [r7, #3]


        init_rtc_stuff();
 80040c2:	f7ff fec1 	bl	8003e48 <init_rtc_stuff>

        RTC_WriteProtectionCmd(DISABLE);
 80040c6:	2000      	movs	r0, #0
 80040c8:	f7ff f946 	bl	8003358 <RTC_WriteProtectionCmd>
        RTC_SetTime(RTC_Format_BCD, &Trtc);
 80040cc:	1d3b      	adds	r3, r7, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	2001      	movs	r0, #1
 80040d2:	f7ff f9e1 	bl	8003498 <RTC_SetTime>
        RTC_SetDate(RTC_Format_BCD, &Drtc);
 80040d6:	463b      	mov	r3, r7
 80040d8:	4619      	mov	r1, r3
 80040da:	2001      	movs	r0, #1
 80040dc:	f7ff fab8 	bl	8003650 <RTC_SetDate>
        RTC_WriteProtectionCmd(ENABLE);
 80040e0:	2001      	movs	r0, #1
 80040e2:	f7ff f939 	bl	8003358 <RTC_WriteProtectionCmd>
    }
    
    return TRUE;
 80040e6:	2301      	movs	r3, #1
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd90      	pop	{r4, r7, pc}
 80040f0:	2000401c 	.word	0x2000401c
 80040f4:	08006074 	.word	0x08006074

080040f8 <cmds_SC>:
// show clock
//
//    debug:  shows some clock registers
//
static bool cmds_SC( void )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
    uint32_t tmp;
    RCC_ClocksTypeDef  rclocks;

    tmp = RCC->CFGR & RCC_CFGR_SWS;
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <cmds_SC+0x7c>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	617b      	str	r3, [r7, #20]
    if( tmp == 0 )
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <cmds_SC+0x1e>
        U2_PrintSTR("HSI\n\r");
 800410e:	481a      	ldr	r0, [pc, #104]	; (8004178 <cmds_SC+0x80>)
 8004110:	f000 faeb 	bl	80046ea <U2_PrintSTR>
 8004114:	e009      	b.n	800412a <cmds_SC+0x32>
    else if( tmp == 4 )
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b04      	cmp	r3, #4
 800411a:	d103      	bne.n	8004124 <cmds_SC+0x2c>
        U2_PrintSTR("HSE\n\r");
 800411c:	4817      	ldr	r0, [pc, #92]	; (800417c <cmds_SC+0x84>)
 800411e:	f000 fae4 	bl	80046ea <U2_PrintSTR>
 8004122:	e002      	b.n	800412a <cmds_SC+0x32>
    else
        U2_PrintSTR("PLL\n\r");
 8004124:	4816      	ldr	r0, [pc, #88]	; (8004180 <cmds_SC+0x88>)
 8004126:	f000 fae0 	bl	80046ea <U2_PrintSTR>

    SystemCoreClockUpdate();
 800412a:	f001 f9bb 	bl	80054a4 <SystemCoreClockUpdate>
    RCC_GetClocksFreq(&rclocks);
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe ff6f 	bl	8003014 <RCC_GetClocksFreq>

    U2_Print32( "SYSCLK: ", rclocks.SYSCLK_Frequency );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4619      	mov	r1, r3
 800413a:	4812      	ldr	r0, [pc, #72]	; (8004184 <cmds_SC+0x8c>)
 800413c:	f000 fae3 	bl	8004706 <U2_Print32>
    U2_Print32( "HCLK:   ", rclocks.HCLK_Frequency   );
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4619      	mov	r1, r3
 8004144:	4810      	ldr	r0, [pc, #64]	; (8004188 <cmds_SC+0x90>)
 8004146:	f000 fade 	bl	8004706 <U2_Print32>
    U2_Print32( "PCLK1:  ", rclocks.PCLK1_Frequency  );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4619      	mov	r1, r3
 800414e:	480f      	ldr	r0, [pc, #60]	; (800418c <cmds_SC+0x94>)
 8004150:	f000 fad9 	bl	8004706 <U2_Print32>
    U2_Print32( "PCLK2:  ", rclocks.PCLK2_Frequency  );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4619      	mov	r1, r3
 8004158:	480d      	ldr	r0, [pc, #52]	; (8004190 <cmds_SC+0x98>)
 800415a:	f000 fad4 	bl	8004706 <U2_Print32>

    U2_Print32( "RCC->APB1ENR:  ", RCC->APB1ENR  );
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <cmds_SC+0x7c>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4619      	mov	r1, r3
 8004164:	480b      	ldr	r0, [pc, #44]	; (8004194 <cmds_SC+0x9c>)
 8004166:	f000 face 	bl	8004706 <U2_Print32>

    return TRUE;
 800416a:	2301      	movs	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	08006094 	.word	0x08006094
 800417c:	0800609c 	.word	0x0800609c
 8004180:	080060a4 	.word	0x080060a4
 8004184:	080060ac 	.word	0x080060ac
 8004188:	080060b8 	.word	0x080060b8
 800418c:	080060c4 	.word	0x080060c4
 8004190:	080060d0 	.word	0x080060d0
 8004194:	080060dc 	.word	0x080060dc

08004198 <cmds_rtc>:




static bool cmds_rtc( void )
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b08d      	sub	sp, #52	; 0x34
 800419c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef   Trtc;
	RTC_DateTypeDef   Drtc;
	u32               dow;
	char              B1[3],B2[3],B3[3];
	char              ch3 = Globals.cmds_InpPtr[3];
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <cmds_rtc+0xf0>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	78db      	ldrb	r3, [r3, #3]
 80041a4:	76fb      	strb	r3, [r7, #27]

    if( ch3 == 'x' )
 80041a6:	7efb      	ldrb	r3, [r7, #27]
 80041a8:	2b78      	cmp	r3, #120	; 0x78
 80041aa:	d124      	bne.n	80041f6 <cmds_rtc+0x5e>
    {
    	U2_Print32("RTC_CR:     ", RTC->CR);
 80041ac:	4b37      	ldr	r3, [pc, #220]	; (800428c <cmds_rtc+0xf4>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4619      	mov	r1, r3
 80041b2:	4837      	ldr	r0, [pc, #220]	; (8004290 <cmds_rtc+0xf8>)
 80041b4:	f000 faa7 	bl	8004706 <U2_Print32>
    	U2_Print32("RTC_ISR:    ", RTC->ISR);
 80041b8:	4b34      	ldr	r3, [pc, #208]	; (800428c <cmds_rtc+0xf4>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4619      	mov	r1, r3
 80041be:	4835      	ldr	r0, [pc, #212]	; (8004294 <cmds_rtc+0xfc>)
 80041c0:	f000 faa1 	bl	8004706 <U2_Print32>
    	U2_Print32("RTC_PRER:   ", RTC->PRER);
 80041c4:	4b31      	ldr	r3, [pc, #196]	; (800428c <cmds_rtc+0xf4>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4619      	mov	r1, r3
 80041ca:	4833      	ldr	r0, [pc, #204]	; (8004298 <cmds_rtc+0x100>)
 80041cc:	f000 fa9b 	bl	8004706 <U2_Print32>
    	U2_Print32("RTC_WUTR:   ", RTC->WUTR);
 80041d0:	4b2e      	ldr	r3, [pc, #184]	; (800428c <cmds_rtc+0xf4>)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4619      	mov	r1, r3
 80041d6:	4831      	ldr	r0, [pc, #196]	; (800429c <cmds_rtc+0x104>)
 80041d8:	f000 fa95 	bl	8004706 <U2_Print32>
    	U2_Print32("RTC_CALIBR: ", RTC->CALIBR);
 80041dc:	4b2b      	ldr	r3, [pc, #172]	; (800428c <cmds_rtc+0xf4>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	4619      	mov	r1, r3
 80041e2:	482f      	ldr	r0, [pc, #188]	; (80042a0 <cmds_rtc+0x108>)
 80041e4:	f000 fa8f 	bl	8004706 <U2_Print32>
    	U2_Print32("RTC_WPR:    ", RTC->WPR);
 80041e8:	4b28      	ldr	r3, [pc, #160]	; (800428c <cmds_rtc+0xf4>)
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	4619      	mov	r1, r3
 80041ee:	482d      	ldr	r0, [pc, #180]	; (80042a4 <cmds_rtc+0x10c>)
 80041f0:	f000 fa89 	bl	8004706 <U2_Print32>
 80041f4:	e042      	b.n	800427c <cmds_rtc+0xe4>
    }
    else if( ch3 == 0 )
 80041f6:	7efb      	ldrb	r3, [r7, #27]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d13f      	bne.n	800427c <cmds_rtc+0xe4>
    {
    	RTC_GetTime(RTC_Format_BCD, &Trtc);
 80041fc:	f107 0314 	add.w	r3, r7, #20
 8004200:	4619      	mov	r1, r3
 8004202:	2001      	movs	r0, #1
 8004204:	f7ff f9d2 	bl	80035ac <RTC_GetTime>
    	RTC_GetDate(RTC_Format_BCD, &Drtc);
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	4619      	mov	r1, r3
 800420e:	2001      	movs	r0, #1
 8004210:	f7ff faae 	bl	8003770 <RTC_GetDate>

    	dow = (Drtc.RTC_WeekDay - 1);     // Monday is 1, Sunday is 7
 8004214:	7c3b      	ldrb	r3, [r7, #16]
 8004216:	3b01      	subs	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
    	if( dow > 7 ) { dow = 0; }
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b07      	cmp	r3, #7
 800421e:	d901      	bls.n	8004224 <cmds_rtc+0x8c>
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]

    	BtoH( Trtc.RTC_Hours,   B1 );     // BtoH gives 2 digits.  tiny printf doesn't work with %02x
 8004224:	7d3b      	ldrb	r3, [r7, #20]
 8004226:	f107 020c 	add.w	r2, r7, #12
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fc31 	bl	8005a94 <BtoH>
    	BtoH( Trtc.RTC_Minutes, B2 );
 8004232:	7d7b      	ldrb	r3, [r7, #21]
 8004234:	f107 0208 	add.w	r2, r7, #8
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f001 fc2a 	bl	8005a94 <BtoH>
    	BtoH( Trtc.RTC_Seconds, B3 );
 8004240:	7dbb      	ldrb	r3, [r7, #22]
 8004242:	1d3a      	adds	r2, r7, #4
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f001 fc24 	bl	8005a94 <BtoH>

    	printf("%s%x/%x/20%x   %s:%s:%s",gWeeks[dow],Drtc.RTC_Month,Drtc.RTC_Date,Drtc.RTC_Year,B1,B2,B3);
 800424c:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <cmds_rtc+0x110>)
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004254:	7c7b      	ldrb	r3, [r7, #17]
 8004256:	4618      	mov	r0, r3
 8004258:	7cbb      	ldrb	r3, [r7, #18]
 800425a:	461c      	mov	r4, r3
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	461a      	mov	r2, r3
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	9303      	str	r3, [sp, #12]
 8004264:	f107 0308 	add.w	r3, r7, #8
 8004268:	9302      	str	r3, [sp, #8]
 800426a:	f107 030c 	add.w	r3, r7, #12
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	4623      	mov	r3, r4
 8004274:	4602      	mov	r2, r0
 8004276:	480d      	ldr	r0, [pc, #52]	; (80042ac <cmds_rtc+0x114>)
 8004278:	f001 fbc2 	bl	8005a00 <iprintf>
    }

    return TRUE;
 800427c:	2301      	movs	r3, #1
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd90      	pop	{r4, r7, pc}
 8004286:	bf00      	nop
 8004288:	2000401c 	.word	0x2000401c
 800428c:	40002800 	.word	0x40002800
 8004290:	080060ec 	.word	0x080060ec
 8004294:	080060fc 	.word	0x080060fc
 8004298:	0800610c 	.word	0x0800610c
 800429c:	0800611c 	.word	0x0800611c
 80042a0:	0800612c 	.word	0x0800612c
 80042a4:	0800613c 	.word	0x0800613c
 80042a8:	20000014 	.word	0x20000014
 80042ac:	0800614c 	.word	0x0800614c

080042b0 <U2Inp_Init>:
static const char   *sPROMPT = ">> ";      // prompt string



void U2Inp_Init( void )
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
    Globals.seri_cnt           = 0;
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <U2Inp_Init+0x1c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
    Globals.seri_state_machine = SERI_STATE_GETCHARS;
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <U2Inp_Init+0x1c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20004044 	.word	0x20004044

080042d0 <U2Inp_Process>:


void U2Inp_Process( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
	GLOBALS_t  *G = &Globals;
 80042d6:	4b4b      	ldr	r3, [pc, #300]	; (8004404 <U2Inp_Process+0x134>)
 80042d8:	607b      	str	r3, [r7, #4]

    switch( G->seri_state_machine )
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <U2Inp_Process+0x18>
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d073      	beq.n	80043ce <U2Inp_Process+0xfe>
 80042e6:	e08a      	b.n	80043fe <U2Inp_Process+0x12e>
    {
    case SERI_STATE_GETCHARS:

        if( !(USART1->SR & USART_FLAG_RXNE) ) { return; }                             // RXNE=1 when a byte is available
 80042e8:	4b47      	ldr	r3, [pc, #284]	; (8004408 <U2Inp_Process+0x138>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07e      	beq.n	80043f4 <U2Inp_Process+0x124>
        G->seri_ch = (USART1->DR & 0xff);
 80042f6:	4b44      	ldr	r3, [pc, #272]	; (8004408 <U2Inp_Process+0x138>)
 80042f8:	889b      	ldrh	r3, [r3, #4]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	731a      	strb	r2, [r3, #12]

        if( G->seri_ch == ASCII_CARRIAGERETURN || G->seri_ch == ASCII_LINEFEED )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	7b1b      	ldrb	r3, [r3, #12]
 8004306:	2b0d      	cmp	r3, #13
 8004308:	d003      	beq.n	8004312 <U2Inp_Process+0x42>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7b1b      	ldrb	r3, [r3, #12]
 800430e:	2b0a      	cmp	r3, #10
 8004310:	d123      	bne.n	800435a <U2Inp_Process+0x8a>
        {
            U2_PrintSTR(sCRLF);
 8004312:	4b3e      	ldr	r3, [pc, #248]	; (800440c <U2Inp_Process+0x13c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f9e7 	bl	80046ea <U2_PrintSTR>
            G->seri_dat[G->seri_cnt] = 0;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	2200      	movs	r2, #0
 8004326:	735a      	strb	r2, [r3, #13]

            if( G->seri_cnt > 0 )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00e      	beq.n	800434e <U2Inp_Process+0x7e>
            {
                G->seri_cnt           = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
                G->seri_CmdDone       = FALSE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
                G->seri_state_machine = SERI_STATE_WAITDONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]
                CMDS_SetInputStr(G->seri_dat);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	330d      	adds	r3, #13
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fc5e 	bl	8003c08 <CMDS_SetInputStr>
            if( G->seri_cnt > 0 )
 800434c:	e03e      	b.n	80043cc <U2Inp_Process+0xfc>
            }
            else
            {
                U2_PrintSTR(sPROMPT);
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <U2Inp_Process+0x140>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f9c9 	bl	80046ea <U2_PrintSTR>
            if( G->seri_cnt > 0 )
 8004358:	e038      	b.n	80043cc <U2Inp_Process+0xfc>
            }
        }
        else if( G->seri_ch == ASCII_BACKSPACE || G->seri_ch == ASCII_DELETE )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7b1b      	ldrb	r3, [r3, #12]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d003      	beq.n	800436a <U2Inp_Process+0x9a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7b1b      	ldrb	r3, [r3, #12]
 8004366:	2b7f      	cmp	r3, #127	; 0x7f
 8004368:	d10c      	bne.n	8004384 <U2Inp_Process+0xb4>
        {
            if( G->seri_cnt > 0 )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d02c      	beq.n	80043cc <U2Inp_Process+0xfc>
            {
                U2_PrintSTR((const char *)"\b \b");
 8004372:	4828      	ldr	r0, [pc, #160]	; (8004414 <U2Inp_Process+0x144>)
 8004374:	f000 f9b9 	bl	80046ea <U2_PrintSTR>
                --G->seri_cnt;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	1e5a      	subs	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]
            if( G->seri_cnt > 0 )
 8004382:	e023      	b.n	80043cc <U2Inp_Process+0xfc>
            }
        }
        else if(( G->seri_ch >= ASCII_SPACE ) && ( G->seri_ch <= ASCII_TILDE ))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7b1b      	ldrb	r3, [r3, #12]
 8004388:	2b1f      	cmp	r3, #31
 800438a:	d935      	bls.n	80043f8 <U2Inp_Process+0x128>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	7b1b      	ldrb	r3, [r3, #12]
 8004390:	2b7e      	cmp	r3, #126	; 0x7e
 8004392:	d831      	bhi.n	80043f8 <U2Inp_Process+0x128>
        {
            U2_PrintCH(G->seri_ch);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7b1b      	ldrb	r3, [r3, #12]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f997 	bl	80046cc <U2_PrintCH>
            G->seri_dat[G->seri_cnt] = G->seri_ch;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	7b11      	ldrb	r1, [r2, #12]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	460a      	mov	r2, r1
 80043ac:	735a      	strb	r2, [r3, #13]
            if( ++G->seri_cnt >= SERI_MAX_CHARS ) { --G->seri_cnt; }
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b14      	cmp	r3, #20
 80043be:	d91b      	bls.n	80043f8 <U2Inp_Process+0x128>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]
        }

        break;
 80043ca:	e015      	b.n	80043f8 <U2Inp_Process+0x128>
 80043cc:	e014      	b.n	80043f8 <U2Inp_Process+0x128>

    case SERI_STATE_WAITDONE:

        if( G->seri_CmdDone == TRUE )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d112      	bne.n	80043fc <U2Inp_Process+0x12c>
        {
            U2_PrintSTR(sCRLF);
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <U2Inp_Process+0x13c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f985 	bl	80046ea <U2_PrintSTR>
            U2_PrintSTR(sPROMPT);
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <U2Inp_Process+0x140>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f980 	bl	80046ea <U2_PrintSTR>
            G->seri_state_machine = SERI_STATE_GETCHARS;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
        }
        break;
 80043f0:	bf00      	nop
 80043f2:	e003      	b.n	80043fc <U2Inp_Process+0x12c>
        if( !(USART1->SR & USART_FLAG_RXNE) ) { return; }                             // RXNE=1 when a byte is available
 80043f4:	bf00      	nop
 80043f6:	e002      	b.n	80043fe <U2Inp_Process+0x12e>
        break;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <U2Inp_Process+0x12e>
        break;
 80043fc:	bf00      	nop
    }
}
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20004044 	.word	0x20004044
 8004408:	40011000 	.word	0x40011000
 800440c:	20000030 	.word	0x20000030
 8004410:	20000034 	.word	0x20000034
 8004414:	0800616c 	.word	0x0800616c

08004418 <U2Inp_SignalCmdDone>:


void U2Inp_SignalCmdDone( void )
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
    Globals.seri_CmdDone = TRUE;
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <U2Inp_SignalCmdDone+0x14>)
 800441e:	2201      	movs	r2, #1
 8004420:	605a      	str	r2, [r3, #4]
}
 8004422:	bf00      	nop
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	20004044 	.word	0x20004044

08004430 <U2_Init>:




void U2_Init( void )
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
    serd_num_Qitems     = 0;
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <U2_Init+0x2c>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
    serd_inn_Qindex     = 0;
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <U2_Init+0x30>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
    serd_out_Qindex     = 0;
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <U2_Init+0x34>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
    serd_ostate_machine = SERO_STATE_GETJOB;
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <U2_Init+0x38>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
    serd_pfindex        = 0;
 800444c:	4b07      	ldr	r3, [pc, #28]	; (800446c <U2_Init+0x3c>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	20004068 	.word	0x20004068
 8004460:	2000406c 	.word	0x2000406c
 8004464:	20004070 	.word	0x20004070
 8004468:	200046b8 	.word	0x200046b8
 800446c:	20004acc 	.word	0x20004acc

08004470 <U2_Send>:
//
//        aval - Value that can optionally be printed along with sptr.
//               Value can be 8-bit, or 32-bit.   otype will control this.
//
void U2_Send( u32 otype, char *sptr, u32 *completionptr, u32 aval )
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
    SERI  *lqitem;                                                              // Pointer to Array Element where the data will go

    if( serd_num_Qitems != SERO_SQENTRYS )                                      // Proceed if the Queue is not full
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <U2_Send+0x74>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d028      	beq.n	80044d8 <U2_Send+0x68>
    {
        lqitem = &serd_Q_items[serd_inn_Qindex];                                // item will go in at index serd_inn_qindex
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <U2_Send+0x78>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	4a17      	ldr	r2, [pc, #92]	; (80044ec <U2_Send+0x7c>)
 800448e:	4413      	add	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
        ++serd_num_Qitems;                                                      // Queue size is increased by 1
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <U2_Send+0x74>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <U2_Send+0x74>)
 800449a:	6013      	str	r3, [r2, #0]
        if( ++serd_inn_Qindex == SERO_SQENTRYS ) { serd_inn_Qindex = 0; }       // where the next item will go:  wrap if necessary
 800449c:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <U2_Send+0x78>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <U2_Send+0x78>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <U2_Send+0x78>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d102      	bne.n	80044b4 <U2_Send+0x44>
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <U2_Send+0x78>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

        lqitem->sr_dval    = aval;                                              // aval goes into element on the Q
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	60da      	str	r2, [r3, #12]
        lqitem->sr_otype   = otype;                                             // otype goes into element on the Q
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]
        lqitem->sr_sptr    = sptr;                                              // sptr goes into element on the Q
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	605a      	str	r2, [r3, #4]
        lqitem->sr_compPtr = completionptr;                                     // completionptr goes into element on the Q
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	609a      	str	r2, [r3, #8]
        
        if( completionptr ) { *completionptr = 0; }                             // if pointer is valid, store 0, indicating Not Done
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <U2_Send+0x68>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
    }
                                                                                // Else the Q is full.  Effectively tosses the data
}                                                                               //   note intention not to return -1 if Q is full
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20004068 	.word	0x20004068
 80044e8:	2000406c 	.word	0x2000406c
 80044ec:	20004078 	.word	0x20004078

080044f0 <U2_Process>:




void U2_Process( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
    char  end_of_string;

    switch( serd_ostate_machine )
 80044f6:	4b6e      	ldr	r3, [pc, #440]	; (80046b0 <U2_Process+0x1c0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <U2_Process+0x16>
 80044fe:	2b01      	cmp	r3, #1
 8004500:	f000 8088 	beq.w	8004614 <U2_Process+0x124>
 8004504:	e0d0      	b.n	80046a8 <U2_Process+0x1b8>
    {
    case SERO_STATE_GETJOB:                                                              // Looking for items on the Queue

        if( serd_num_Qitems == 0 ) { return; }                                           // return IMMEDIATELY if Queue is empty
 8004506:	4b6b      	ldr	r3, [pc, #428]	; (80046b4 <U2_Process+0x1c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80c7 	beq.w	800469e <U2_Process+0x1ae>

        serd_active_Qitem   = &serd_Q_items[serd_out_Qindex];                            // Item to operate on is at 'serd_out_qindex'
 8004510:	4b69      	ldr	r3, [pc, #420]	; (80046b8 <U2_Process+0x1c8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4a69      	ldr	r2, [pc, #420]	; (80046bc <U2_Process+0x1cc>)
 8004518:	4413      	add	r3, r2
 800451a:	4a69      	ldr	r2, [pc, #420]	; (80046c0 <U2_Process+0x1d0>)
 800451c:	6013      	str	r3, [r2, #0]
        serd_ostate_machine = SERO_STATE_DOCHARS;                                        // switch state to 'Processing Characters'
 800451e:	4b64      	ldr	r3, [pc, #400]	; (80046b0 <U2_Process+0x1c0>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

        switch( serd_active_Qitem->sr_otype )                                            // sr_otype dictates the action
 8004524:	4b66      	ldr	r3, [pc, #408]	; (80046c0 <U2_Process+0x1d0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	2b07      	cmp	r3, #7
 800452e:	f200 80b8 	bhi.w	80046a2 <U2_Process+0x1b2>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <U2_Process+0x48>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	08004559 	.word	0x08004559
 800453c:	080046a3 	.word	0x080046a3
 8004540:	08004575 	.word	0x08004575
 8004544:	08004597 	.word	0x08004597
 8004548:	080045a7 	.word	0x080045a7
 800454c:	080045cb 	.word	0x080045cb
 8004550:	080045dd 	.word	0x080045dd
 8004554:	08004601 	.word	0x08004601
        {
          case SERO_TYPE_ONECHAR: serd_databuf[0] = (u8)serd_active_Qitem->sr_dval;      // Character to print is placed in databuf
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <U2_Process+0x1d0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	4b58      	ldr	r3, [pc, #352]	; (80046c4 <U2_Process+0x1d4>)
 8004562:	701a      	strb	r2, [r3, #0]
                                  serd_databuf[1] = 0;                                   // string terminator
 8004564:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <U2_Process+0x1d4>)
 8004566:	2200      	movs	r2, #0
 8004568:	705a      	strb	r2, [r3, #1]
                                  serd_active_Qitem->sr_sptr = serd_databuf;             // sptr point to the data in databuf
 800456a:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <U2_Process+0x1d0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a55      	ldr	r2, [pc, #340]	; (80046c4 <U2_Process+0x1d4>)
 8004570:	605a      	str	r2, [r3, #4]
                                  break;
 8004572:	e04e      	b.n	8004612 <U2_Process+0x122>
                                    
          case SERO_TYPE_32:      ItoH(serd_active_Qitem->sr_dval, serd_databuf);        // 32-bit to Hex Data Conversion.  Place in databuf
 8004574:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <U2_Process+0x1d0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4952      	ldr	r1, [pc, #328]	; (80046c4 <U2_Process+0x1d4>)
 800457c:	4618      	mov	r0, r3
 800457e:	f001 fab3 	bl	8005ae8 <ItoH>
                                  serd_databuf[8]  = ASCII_CARRIAGERETURN;               // tack on <CR> at the end
 8004582:	4b50      	ldr	r3, [pc, #320]	; (80046c4 <U2_Process+0x1d4>)
 8004584:	220d      	movs	r2, #13
 8004586:	721a      	strb	r2, [r3, #8]
                                  serd_databuf[9]  = ASCII_LINEFEED;                     // tack on <LF> at the end
 8004588:	4b4e      	ldr	r3, [pc, #312]	; (80046c4 <U2_Process+0x1d4>)
 800458a:	220a      	movs	r2, #10
 800458c:	725a      	strb	r2, [r3, #9]
                                  serd_databuf[10] = 0;                                  // this is the string terminator
 800458e:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <U2_Process+0x1d4>)
 8004590:	2200      	movs	r2, #0
 8004592:	729a      	strb	r2, [r3, #10]
                                  break;
 8004594:	e03d      	b.n	8004612 <U2_Process+0x122>
                                  
          case SERO_TYPE_32N:     ItoH(serd_active_Qitem->sr_dval, serd_databuf);        // 8-bit to Hex Data Conversion.  Place in databuf
 8004596:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <U2_Process+0x1d0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4949      	ldr	r1, [pc, #292]	; (80046c4 <U2_Process+0x1d4>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 faa2 	bl	8005ae8 <ItoH>
                                  break;
 80045a4:	e035      	b.n	8004612 <U2_Process+0x122>
                                    
          case SERO_TYPE_8:       BtoH((u8)serd_active_Qitem->sr_dval, serd_databuf);    // 8-bit to Hex Data Conversion.  Place in databuf
 80045a6:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <U2_Process+0x1d0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	4945      	ldr	r1, [pc, #276]	; (80046c4 <U2_Process+0x1d4>)
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 fa6f 	bl	8005a94 <BtoH>
                                  serd_databuf[2] = ASCII_CARRIAGERETURN;                // tack on <CR> at the end
 80045b6:	4b43      	ldr	r3, [pc, #268]	; (80046c4 <U2_Process+0x1d4>)
 80045b8:	220d      	movs	r2, #13
 80045ba:	709a      	strb	r2, [r3, #2]
                                  serd_databuf[3] = ASCII_LINEFEED;                      // tack on <LF> at the end
 80045bc:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <U2_Process+0x1d4>)
 80045be:	220a      	movs	r2, #10
 80045c0:	70da      	strb	r2, [r3, #3]
                                  serd_databuf[4] = 0;                                   // this is the string terminator
 80045c2:	4b40      	ldr	r3, [pc, #256]	; (80046c4 <U2_Process+0x1d4>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	711a      	strb	r2, [r3, #4]
                                  break;
 80045c8:	e023      	b.n	8004612 <U2_Process+0x122>
                                  
          case SERO_TYPE_8N:      BtoH((u8)serd_active_Qitem->sr_dval, serd_databuf);    // 8-bit to Hex Data Conversion.  Place in databuf
 80045ca:	4b3d      	ldr	r3, [pc, #244]	; (80046c0 <U2_Process+0x1d0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	493c      	ldr	r1, [pc, #240]	; (80046c4 <U2_Process+0x1d4>)
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fa5d 	bl	8005a94 <BtoH>
                                  break;                          
 80045da:	e01a      	b.n	8004612 <U2_Process+0x122>

          case SERO_TYPE_16:      ItoH16((u16)serd_active_Qitem->sr_dval, serd_databuf); // 16-bit to Hex Data Conversion.  Place in databuf
 80045dc:	4b38      	ldr	r3, [pc, #224]	; (80046c0 <U2_Process+0x1d0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	4937      	ldr	r1, [pc, #220]	; (80046c4 <U2_Process+0x1d4>)
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 faa8 	bl	8005b3c <ItoH16>
                                  serd_databuf[4] = ASCII_CARRIAGERETURN;                // tack on <CR> at the end
 80045ec:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <U2_Process+0x1d4>)
 80045ee:	220d      	movs	r2, #13
 80045f0:	711a      	strb	r2, [r3, #4]
                                  serd_databuf[5] = ASCII_LINEFEED;                      // tack on <LF> at the end
 80045f2:	4b34      	ldr	r3, [pc, #208]	; (80046c4 <U2_Process+0x1d4>)
 80045f4:	220a      	movs	r2, #10
 80045f6:	715a      	strb	r2, [r3, #5]
                                  serd_databuf[6] = 0;                                   // this is the string terminator
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <U2_Process+0x1d4>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	719a      	strb	r2, [r3, #6]
                                  break;
 80045fe:	e008      	b.n	8004612 <U2_Process+0x122>

          case SERO_TYPE_16N:     ItoH16((u16)serd_active_Qitem->sr_dval, serd_databuf); // 8-bit to Hex Data Conversion.  Place in databuf
 8004600:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <U2_Process+0x1d0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	b29b      	uxth	r3, r3
 8004608:	492e      	ldr	r1, [pc, #184]	; (80046c4 <U2_Process+0x1d4>)
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fa96 	bl	8005b3c <ItoH16>
                                  break;
 8004610:	bf00      	nop
        }
        
        return;                                                                          // could FALL_THRU, but don't be a CPU hog!
 8004612:	e046      	b.n	80046a2 <U2_Process+0x1b2>


    case SERO_STATE_DOCHARS:                                                        // Actively printing out characters

        if( !(USART1->SR & USART_FLAG_TC) ) { return; }                             // TC=1 when Transmission is Complete
 8004614:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <U2_Process+0x1d8>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d041      	beq.n	80046a6 <U2_Process+0x1b6>
        USART1->DR     = *serd_active_Qitem->sr_sptr++;                             // TX reg filled with a byte of data
 8004622:	4829      	ldr	r0, [pc, #164]	; (80046c8 <U2_Process+0x1d8>)
 8004624:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <U2_Process+0x1d0>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	6853      	ldr	r3, [r2, #4]
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	6051      	str	r1, [r2, #4]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	8083      	strh	r3, [r0, #4]

        end_of_string  = *serd_active_Qitem->sr_sptr;                               // Examine character just past the one printed
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <U2_Process+0x1d0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	71fb      	strb	r3, [r7, #7]

        if( end_of_string == 0 )                                                    // Found the string terminator ?
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d131      	bne.n	80046a8 <U2_Process+0x1b8>
        {
            if( serd_active_Qitem->sr_otype >= SERO_TYPE_32 )                       // Any of these types: need to print out the val in databuf
 8004644:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <U2_Process+0x1d0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d908      	bls.n	8004660 <U2_Process+0x170>
            {                                                                       //    [ ordering in SERD_OTYPE is important!! ]
                serd_active_Qitem->sr_otype = SERO_TYPE_STR;                        // change type to STR
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <U2_Process+0x1d0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2202      	movs	r2, #2
 8004654:	601a      	str	r2, [r3, #0]
                serd_active_Qitem->sr_sptr  = (char *)serd_databuf;                 // data is in serd_databuf
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <U2_Process+0x1d0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <U2_Process+0x1d4>)
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	e023      	b.n	80046a8 <U2_Process+0x1b8>
            }
            else                                                                    // ELSE this print job is done
            {
                serd_ostate_machine = SERO_STATE_GETJOB;                            // switch state:  look for another job
 8004660:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <U2_Process+0x1c0>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
                --serd_num_Qitems;                                                  // Can now decrement Queue size by 1
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <U2_Process+0x1c4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	4a11      	ldr	r2, [pc, #68]	; (80046b4 <U2_Process+0x1c4>)
 800466e:	6013      	str	r3, [r2, #0]
                if( ++serd_out_Qindex == SERO_SQENTRYS ) { serd_out_Qindex = 0; }   // index to next element in the Circular Q.  Wrap if necessary
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <U2_Process+0x1c8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	4a10      	ldr	r2, [pc, #64]	; (80046b8 <U2_Process+0x1c8>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <U2_Process+0x1c8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d102      	bne.n	8004688 <U2_Process+0x198>
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <U2_Process+0x1c8>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

                if( serd_active_Qitem->sr_compPtr != 0 )                            // Is there a valid Completion Pointer ?
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <U2_Process+0x1d0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <U2_Process+0x1b8>
                    *serd_active_Qitem->sr_compPtr = 1;                             //    signal a 1 to that address to indicate completion
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <U2_Process+0x1d0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e004      	b.n	80046a8 <U2_Process+0x1b8>
        if( serd_num_Qitems == 0 ) { return; }                                           // return IMMEDIATELY if Queue is empty
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <U2_Process+0x1b8>
        return;                                                                          // could FALL_THRU, but don't be a CPU hog!
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <U2_Process+0x1b8>
        if( !(USART1->SR & USART_FLAG_TC) ) { return; }                             // TC=1 when Transmission is Complete
 80046a6:	bf00      	nop
            }
        }
    }
}
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200046b8 	.word	0x200046b8
 80046b4:	20004068 	.word	0x20004068
 80046b8:	20004070 	.word	0x20004070
 80046bc:	20004078 	.word	0x20004078
 80046c0:	20004074 	.word	0x20004074
 80046c4:	200046bc 	.word	0x200046bc
 80046c8:	40011000 	.word	0x40011000

080046cc <U2_PrintCH>:




void U2_PrintCH( char ch )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
    U2_Send( SERO_TYPE_ONECHAR, 0, 0, (u32)ch );
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2200      	movs	r2, #0
 80046da:	2100      	movs	r1, #0
 80046dc:	2001      	movs	r0, #1
 80046de:	f7ff fec7 	bl	8004470 <U2_Send>
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <U2_PrintSTR>:

void U2_PrintSTR( const char *pstr )
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
    U2_Send( SERO_TYPE_STR, (char *)pstr, 0, 0 );
 80046f2:	2300      	movs	r3, #0
 80046f4:	2200      	movs	r2, #0
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	2002      	movs	r0, #2
 80046fa:	f7ff feb9 	bl	8004470 <U2_Send>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <U2_Print32>:

void U2_Print32( const char *pstr, u32 val )
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
    U2_Send( SERO_TYPE_32, (char *)pstr, 0, val );
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	2003      	movs	r0, #3
 8004718:	f7ff feaa 	bl	8004470 <U2_Send>
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <U2_Print32N>:

void U2_Print32N( const char *pstr, u32 val )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
    U2_Send( SERO_TYPE_32N, (char *)pstr, 0, val );
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2200      	movs	r2, #0
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	2004      	movs	r0, #4
 8004736:	f7ff fe9b 	bl	8004470 <U2_Send>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <U2_Print8>:

void U2_Print8( const char *pstr, u8 val )
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	70fb      	strb	r3, [r7, #3]
    U2_Send( SERO_TYPE_8, (char *)pstr, 0, (u32)val );
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2200      	movs	r2, #0
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	2005      	movs	r0, #5
 8004756:	f7ff fe8b 	bl	8004470 <U2_Send>
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <U2_Print8N>:

void U2_Print8N( const char *pstr, u8 val )
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	70fb      	strb	r3, [r7, #3]
    U2_Send( SERO_TYPE_8N, (char *)pstr, 0, (u32)val );
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	2200      	movs	r2, #0
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	2006      	movs	r0, #6
 8004776:	f7ff fe7b 	bl	8004470 <U2_Send>
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <U2_Print16N>:
{
    U2_Send( SERO_TYPE_16, (char *)pstr, 0, (u32)val );
}

void U2_Print16N( const char *pstr, u16 val )
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	807b      	strh	r3, [r7, #2]
    U2_Send( SERO_TYPE_16N, (char *)pstr, 0, (u32)val );
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	2200      	movs	r2, #0
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	2008      	movs	r0, #8
 8004796:	f7ff fe6b 	bl	8004470 <U2_Send>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <_write>:


int _write( void *fp, char *buf, u32 len )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
    u32  remaining = (LEN_PRINTF_BUF - serd_pfindex);
 80047b0:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <_write+0x80>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80047b8:	617b      	str	r3, [r7, #20]

    if( remaining < (len+2) ) { serd_pfindex=0; }                    // if it won't fit, wrap
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	1c9a      	adds	r2, r3, #2
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d902      	bls.n	80047ca <_write+0x26>
 80047c4:	4b17      	ldr	r3, [pc, #92]	; (8004824 <_write+0x80>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]

    strncpy((void *)&serd_pfbuf[serd_pfindex], buf, len);
 80047ca:	4b16      	ldr	r3, [pc, #88]	; (8004824 <_write+0x80>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a16      	ldr	r2, [pc, #88]	; (8004828 <_write+0x84>)
 80047d0:	4413      	add	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 fb61 	bl	8005e9e <strncpy>
    U2_PrintSTR( (const char *)&serd_pfbuf[serd_pfindex] );
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <_write+0x80>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a11      	ldr	r2, [pc, #68]	; (8004828 <_write+0x84>)
 80047e2:	4413      	add	r3, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff80 	bl	80046ea <U2_PrintSTR>

    serd_pfindex               += len;
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <_write+0x80>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <_write+0x80>)
 80047f4:	6013      	str	r3, [r2, #0]
    serd_pfbuf[serd_pfindex++]  = 0;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <_write+0x80>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	4909      	ldr	r1, [pc, #36]	; (8004824 <_write+0x80>)
 80047fe:	600a      	str	r2, [r1, #0]
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <_write+0x84>)
 8004802:	2100      	movs	r1, #0
 8004804:	54d1      	strb	r1, [r2, r3]

    if( serd_pfindex >= (LEN_PRINTF_BUF - 6) ) { serd_pfindex=0; }   // wrap if its close to the end
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <_write+0x80>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800480e:	4293      	cmp	r3, r2
 8004810:	d902      	bls.n	8004818 <_write+0x74>
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <_write+0x80>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

    return len;
 8004818:	687b      	ldr	r3, [r7, #4]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20004acc 	.word	0x20004acc
 8004828:	200046cc 	.word	0x200046cc

0800482c <I2C_1_master_Init>:
//      Examples:
//              ADchans[1]  = AI2
//              ADchans[10] = AI11
//
GLOBALLY_VISIBLE void I2C_1_master_Init( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
    int i;
    I2C_1_GLOBALS_t  *G = &Globals;
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <I2C_1_master_Init+0x78>)
 8004834:	603b      	str	r3, [r7, #0]

    for( i=0; i < NUM_AD_CHANS; ++i )
 8004836:	2300      	movs	r3, #0
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	e009      	b.n	8004850 <I2C_1_master_Init+0x24>
        G->ADchans[i].is_configured = False;                 // set them all to 'Not configured yet'
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3301      	adds	r3, #1
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	2200      	movs	r2, #0
 8004848:	605a      	str	r2, [r3, #4]
    for( i=0; i < NUM_AD_CHANS; ++i )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3301      	adds	r3, #1
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	ddf2      	ble.n	800483c <I2C_1_master_Init+0x10>

    G->ADchans[ 0].is_configured = True;                     // BUILTIN HW: chan1 is always tied to 5v   Raw=0x7E7D
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2201      	movs	r2, #1
 800485a:	60da      	str	r2, [r3, #12]
    G->ADchans[14].is_configured = True;                     // BUILTIN HW: chan14 is 5v                 Raw=0x7FB5
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2201      	movs	r2, #1
 8004860:	67da      	str	r2, [r3, #124]	; 0x7c
    G->ADchans[15].is_configured = True;                     // BUILTIN HW: chan15 is Gnd                Raw=0x0000
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2201      	movs	r2, #1
 8004866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    G->ADchans[ 1].is_configured = True;                     // AI2 I have some alligator clips             =0x7E7D
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2201      	movs	r2, #1
 800486e:	615a      	str	r2, [r3, #20]
    G->ADchans[10].is_configured = True;                     // AI11 has a temp sensor on it                =0x1358
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	65da      	str	r2, [r3, #92]	; 0x5c
    G->ADchans[12].is_configured = True;                     // AI13 has a temp sensor                      =0x132F
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2201      	movs	r2, #1
 800487a:	66da      	str	r2, [r3, #108]	; 0x6c


    G->ActiveChannel  = 15;                                  // state GETJOB will increment this by 1 by calling 'set_next_channel()'
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	220f      	movs	r2, #15
 8004880:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    G->FirstTime_Flag = true;                                // 1st message to chip is a WRITEONLY that sets sampling to 30hz
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2201      	movs	r2, #1
 8004888:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    G->Cleanup_Count  = 0;                                   // prevents infinite recovery attempts on i2c bus issues
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	725a      	strb	r2, [r3, #9]
    G->StateMachine   = I2C_STATE_GETJOB;                    // start with GETJOB
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	20004ad0 	.word	0x20004ad0

080048a8 <I2C_1_master_Process>:



GLOBALLY_VISIBLE void I2C_1_master_Process( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
    u16 S1,S2,*sptr;
    I2C_1_GLOBALS_t  *G = &Globals;
 80048ae:	4b9e      	ldr	r3, [pc, #632]	; (8004b28 <I2C_1_master_Process+0x280>)
 80048b0:	60fb      	str	r3, [r7, #12]


    if( (G->StateMachine != I2C_STATE_GETJOB) && (G->StateMachine < I2C_STATE_FINISH_CLEANUP) )
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d014      	beq.n	80048e4 <I2C_1_master_Process+0x3c>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b0a      	cmp	r3, #10
 80048c0:	d810      	bhi.n	80048e4 <I2C_1_master_Process+0x3c>
    {
        if( GetSysDelta( G->StartTime ) >= TIMEOUT_VAL )                               // Safety valve: too long to complete this job ?
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fefc 	bl	80056c4 <GetSysDelta>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b3b      	cmp	r3, #59	; 0x3b
 80048d0:	d908      	bls.n	80048e4 <I2C_1_master_Process+0x3c>
        {
            U2_Print8( "TO! State: ", G->StateMachine );                               //     Message out to debug port (optional)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	4619      	mov	r1, r3
 80048d8:	4894      	ldr	r0, [pc, #592]	; (8004b2c <I2C_1_master_Process+0x284>)
 80048da:	f7ff ff32 	bl	8004742 <U2_Print8>
            cleanup();                                                                 //     Attempt to recover the bus
 80048de:	f000 fa79 	bl	8004dd4 <cleanup>
            return;                                                                    //     return immediately
 80048e2:	e1ae      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        }
    }

    switch( G->StateMachine )
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b0d      	cmp	r3, #13
 80048ea:	f200 81aa 	bhi.w	8004c42 <I2C_1_master_Process+0x39a>
 80048ee:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <I2C_1_master_Process+0x4c>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	0800498f 	.word	0x0800498f
 80048f8:	080049a5 	.word	0x080049a5
 80048fc:	080049c9 	.word	0x080049c9
 8004900:	080049ef 	.word	0x080049ef
 8004904:	08004a43 	.word	0x08004a43
 8004908:	08004a5f 	.word	0x08004a5f
 800490c:	08004aa1 	.word	0x08004aa1
 8004910:	08004c43 	.word	0x08004c43
 8004914:	08004ae3 	.word	0x08004ae3
 8004918:	08004ba3 	.word	0x08004ba3
 800491c:	08004bc7 	.word	0x08004bc7
 8004920:	0800492d 	.word	0x0800492d
 8004924:	08004be9 	.word	0x08004be9
 8004928:	08004c01 	.word	0x08004c01
    {
    case I2C_STATE_FINISH_CLEANUP:

        init_gpioI2C();                                                                // re-inits Pins to I2C functionality
 800492c:	f000 fc8e 	bl	800524c <init_gpioI2C>

        if( (G->Cleanup_Count < 50) && (STM_REGISTER I2C1->SR2 & I2C_SR2_BUSY) )       // cleanup_count prevents an endless loop
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	7a5b      	ldrb	r3, [r3, #9]
 8004934:	2b31      	cmp	r3, #49	; 0x31
 8004936:	d809      	bhi.n	800494c <I2C_1_master_Process+0xa4>
 8004938:	4b7d      	ldr	r3, [pc, #500]	; (8004b30 <I2C_1_master_Process+0x288>)
 800493a:	8b1b      	ldrh	r3, [r3, #24]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <I2C_1_master_Process+0xa4>
        {                                                                              // We're really looking for the BUSY bit to be clear.
            cleanup();                                                                 //   if BUSY, attempts another reset of the I2C line
 8004946:	f000 fa45 	bl	8004dd4 <cleanup>
            return;                                                                    //   stays in this state, return and come back shortly
 800494a:	e17a      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        }

        U2_Print8("Cleanup_Count: ", G->Cleanup_Count);                                // Either non-busy, or REALLY hosed.  Show cleanup_count.
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	7a5b      	ldrb	r3, [r3, #9]
 8004950:	4619      	mov	r1, r3
 8004952:	4878      	ldr	r0, [pc, #480]	; (8004b34 <I2C_1_master_Process+0x28c>)
 8004954:	f7ff fef5 	bl	8004742 <U2_Print8>

        G->StateMachine = I2C_STATE_GETJOB;                                            // now transition to GETJOB
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
        if( G->Cleanup_Count == 50)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	7a5b      	ldrb	r3, [r3, #9]
 8004962:	2b32      	cmp	r3, #50	; 0x32
 8004964:	d107      	bne.n	8004976 <I2C_1_master_Process+0xce>
        {
            G->StartTime    = GetSysTick();                                            // Initialize the "safety valve" ticker
 8004966:	f000 fea1 	bl	80056ac <GetSysTick>
 800496a:	4602      	mov	r2, r0
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	605a      	str	r2, [r3, #4]
            G->StateMachine = I2C_STATE_BUSY_WAIT3;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	220d      	movs	r2, #13
 8004974:	701a      	strb	r2, [r3, #0]
        }

        G->Cleanup_Count  = 0;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	725a      	strb	r2, [r3, #9]
        G->ActiveChannel  = 15;                                                    // so that 1st channel sampled will be chan 0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	220f      	movs	r2, #15
 8004980:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        G->FirstTime_Flag = true;                                                  // Forces WRITEONLY
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        return;
 800498c:	e159      	b.n	8004c42 <I2C_1_master_Process+0x39a>

    case I2C_STATE_GETJOB:

        set_next_channel();                                                       // selects next channel and sets the mux pins
 800498e:	f000 f9a7 	bl	8004ce0 <set_next_channel>

        G->Nsamples  = 0;                                                         // tracking for: toss 1st sample, keep the second
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        G->StartTime = GetSysTick();                                              // Initialize the "safety valve" ticker
 800499a:	f000 fe87 	bl	80056ac <GetSysTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]
        FALL_THRU;

    case I2C_STATE_GO_AGAIN:

    	G->CmdType = I2C_CMDTYPE_RW;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	721a      	strb	r2, [r3, #8]
        if( G->FirstTime_Flag == True )
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <I2C_1_master_Process+0x11a>
        {
            G->FirstTime_Flag = False;                                            // Send the Write-Only Job only once
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            G->CmdType        = I2C_CMDTYPE_WRITEONLY;                            // Change CmdType if this is the 1st time thru the loop
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	721a      	strb	r2, [r3, #8]
        }

        G->StateMachine = I2C_STATE_SENDSTART;                                    // transition to SENDSTART
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2202      	movs	r2, #2
 80049c6:	701a      	strb	r2, [r3, #0]
        FALL_THRU;                                                                // no need to break

    case I2C_STATE_SENDSTART:

        if( STM_REGISTER I2C1->SR2 & I2C_SR2_BUSY ) {return;}                     // Must wait for IDLE
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <I2C_1_master_Process+0x288>)
 80049ca:	8b1b      	ldrh	r3, [r3, #24]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 8122 	bne.w	8004c1c <I2C_1_master_Process+0x374>

        G->StateMachine = I2C_STATE_START_COMPLETE;                               // Have IDLE, new state will be START_COMPLETE
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2203      	movs	r2, #3
 80049dc:	701a      	strb	r2, [r3, #0]
        STM_REGISTER I2C1->CR1 |= I2C_CR1_START;                                  // START!
 80049de:	4a54      	ldr	r2, [pc, #336]	; (8004b30 <I2C_1_master_Process+0x288>)
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <I2C_1_master_Process+0x288>)
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
        FALL_THRU;                                                                // no need to break

    case I2C_STATE_START_COMPLETE:

        S1 = STM_REGISTER I2C1->SR1;                                                          // local copy of SR1 reg
 80049ee:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <I2C_1_master_Process+0x288>)
 80049f0:	8a9b      	ldrh	r3, [r3, #20]
 80049f2:	817b      	strh	r3, [r7, #10]
        S2 = STM_REGISTER I2C1->SR2;                                                          // local copy of SR2 reg
 80049f4:	4b4e      	ldr	r3, [pc, #312]	; (8004b30 <I2C_1_master_Process+0x288>)
 80049f6:	8b1b      	ldrh	r3, [r3, #24]
 80049f8:	813b      	strh	r3, [r7, #8]
        if( !(S1 & I2C_SR1_SB) ||  !(S2 & I2C_SR2_MSL) || !(S2 & I2C_SR2_BUSY) ) { return; }  // if any of these bits NOT set, get out
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 810d 	beq.w	8004c20 <I2C_1_master_Process+0x378>
 8004a06:	893b      	ldrh	r3, [r7, #8]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8107 	beq.w	8004c20 <I2C_1_master_Process+0x378>
 8004a12:	893b      	ldrh	r3, [r7, #8]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8101 	beq.w	8004c20 <I2C_1_master_Process+0x378>

        if( G->CmdType == I2C_CMDTYPE_WRITEONLY )                                             // Check to see if this job is WRITE-ONLY
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	7a1b      	ldrb	r3, [r3, #8]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d106      	bne.n	8004a34 <I2C_1_master_Process+0x18c>
        {
            G->StateMachine = I2C_STATE_WRITE_SLAVEADDR;                                      // Got it!  Transition to WRITE_SLAVEADDR
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	701a      	strb	r2, [r3, #0]
            STM_REGISTER I2C1->DR = SLAVE_ADDR;                                               // transmits 1 byte
 8004a2c:	4b40      	ldr	r3, [pc, #256]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004a2e:	2228      	movs	r2, #40	; 0x28
 8004a30:	821a      	strh	r2, [r3, #16]
        {
            G->StateMachine = I2C_STATE_WRITE_SLAVEADDR_RW;                                   // Got it!  Transition to WRITE_SLAVEADDR_RW
            STM_REGISTER I2C1->DR = SLAVE_ADDR | 1;                                           // *** Note the 1-bit OR'd in with the Slave Address
        }

        return;
 8004a32:	e106      	b.n	8004c42 <I2C_1_master_Process+0x39a>
            G->StateMachine = I2C_STATE_WRITE_SLAVEADDR_RW;                                   // Got it!  Transition to WRITE_SLAVEADDR_RW
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2205      	movs	r2, #5
 8004a38:	701a      	strb	r2, [r3, #0]
            STM_REGISTER I2C1->DR = SLAVE_ADDR | 1;                                           // *** Note the 1-bit OR'd in with the Slave Address
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004a3c:	2229      	movs	r2, #41	; 0x29
 8004a3e:	821a      	strh	r2, [r3, #16]
        return;
 8004a40:	e0ff      	b.n	8004c42 <I2C_1_master_Process+0x39a>

    case I2C_STATE_WRITE_SLAVEADDR:
            
        if( write_complete( WAIT_TYPE_WHOLE_BUNCH_O_BITS) == RTN_CONTINUE ) { return; }             // spin till ALL bits are set
 8004a42:	2001      	movs	r0, #1
 8004a44:	f000 f906 	bl	8004c54 <write_complete>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80ea 	beq.w	8004c24 <I2C_1_master_Process+0x37c>
                                                                                                    // ELSE success
        G->StateMachine = I2C_STATE_DO_WRITEONLY;                                                   //    new state is DO_WRITEONLY
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2209      	movs	r2, #9
 8004a54:	701a      	strb	r2, [r3, #0]
        STM_REGISTER I2C1->DR = 1;                                                                  // *** Note:   0=60hz sampling, 1=30hz sampling
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	821a      	strh	r2, [r3, #16]
        return;
 8004a5c:	e0f1      	b.n	8004c42 <I2C_1_master_Process+0x39a>


    case I2C_STATE_WRITE_SLAVEADDR_RW:

        if( write_complete( WAIT_TYPE_ADDR_ONLY ) == RTN_CONTINUE ) { return; }
 8004a5e:	2003      	movs	r0, #3
 8004a60:	f000 f8f8 	bl	8004c54 <write_complete>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80de 	beq.w	8004c28 <I2C_1_master_Process+0x380>

        G->StateMachine = I2C_STATE_READ_THE_DATA;                                          // new state = READ_THE_DATA
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2206      	movs	r2, #6
 8004a70:	701a      	strb	r2, [r3, #0]
        STM_REGISTER I2C1->CR1 |= I2C_NACKPosition_Next;                                    // Sends Nack
 8004a72:	4a2f      	ldr	r2, [pc, #188]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004a74:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
                                                                                            //__disable_irq();
        Hammer( STM_REGISTER I2C1->SR2 );                                                   // Side effect is to Clear ADDR flag
 8004a82:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004a84:	8b1b      	ldrh	r3, [r3, #24]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 f9b6 	bl	8005dfc <Hammer>
        STM_REGISTER I2C1->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);                       // I2C_AcknowledgeConfig(I2Cx, DISABLE);
 8004a90:	4a27      	ldr	r2, [pc, #156]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	8013      	strh	r3, [r2, #0]
        FALL_THRU;                                                                          //__enable_irq();

    case I2C_STATE_READ_THE_DATA:

        if( !(STM_REGISTER I2C1->SR1 & I2C_SR1_BTF) ) { return; }                 // Spin here till BTF bit is set
 8004aa0:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004aa2:	8a9b      	ldrh	r3, [r3, #20]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80be 	beq.w	8004c2c <I2C_1_master_Process+0x384>
                                                                                  //__disable_irq();
        STM_REGISTER I2C1->CR1 |= I2C_CR1_STOP;                                   // Generate a STOP condition
 8004ab0:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	8013      	strh	r3, [r2, #0]
        G->Readbuf[0]   = STM_REGISTER I2C1->DR;                                  // Reads byte 1 and __enable_irq();
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004ac2:	8a1b      	ldrh	r3, [r3, #16]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        G->Readbuf[1]   = STM_REGISTER I2C1->DR;                                  // Reads byte 2
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004ad0:	8a1b      	ldrh	r3, [r3, #16]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        G->StateMachine = I2C_STATE_WAIT_STOP;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2208      	movs	r2, #8
 8004ae0:	701a      	strb	r2, [r3, #0]
        FALL_THRU;

    case I2C_STATE_WAIT_STOP:

        if( STM_REGISTER I2C1->SR1 & I2C_SR1_STOPF ) { return; }                  // Spin here until STOPF is cleared
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <I2C_1_master_Process+0x288>)
 8004ae4:	8a9b      	ldrh	r3, [r3, #20]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 809f 	bne.w	8004c30 <I2C_1_master_Process+0x388>

        G->StartTime = GetSysTick();                                              // Start timer for the new transaction
 8004af2:	f000 fddb 	bl	80056ac <GetSysTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	605a      	str	r2, [r3, #4]

        if( (G->CmdType == I2C_CMDTYPE_RW) && (++G->Nsamples == 1) )
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	7a1b      	ldrb	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d119      	bne.n	8004b38 <I2C_1_master_Process+0x290>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d10c      	bne.n	8004b38 <I2C_1_master_Process+0x290>
        {
            G->StateMachine = I2C_STATE_SETTLE_WAIT;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	220a      	movs	r2, #10
 8004b22:	701a      	strb	r2, [r3, #0]
                }
            }

            G->StateMachine = I2C_STATE_BUSY_WAIT2;                                              // All Done: Wait a bit, then move to the next channel
        }
        return;
 8004b24:	e08d      	b.n	8004c42 <I2C_1_master_Process+0x39a>
 8004b26:	bf00      	nop
 8004b28:	20004ad0 	.word	0x20004ad0
 8004b2c:	08006170 	.word	0x08006170
 8004b30:	40005400 	.word	0x40005400
 8004b34:	0800617c 	.word	0x0800617c
            ++dbgtotaljobs;
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <I2C_1_master_Process+0x3a0>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <I2C_1_master_Process+0x3a0>)
 8004b42:	701a      	strb	r2, [r3, #0]
            if( G->CmdType == I2C_CMDTYPE_RW )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	7a1b      	ldrb	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d126      	bne.n	8004b9a <I2C_1_master_Process+0x2f2>
                sptr = (u16 *)G->Readbuf;                                                        // measurement to keep is here
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	338c      	adds	r3, #140	; 0x8c
 8004b50:	607b      	str	r3, [r7, #4]
                swap(sptr);                                                                      // swap the bytes.  Because!
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f001 f95d 	bl	8005e12 <swap>
                G->ADchans[G->ActiveChannel].raw_value = *sptr;                                  // Stores the raw reading
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004b5e:	4618      	mov	r0, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8819      	ldrh	r1, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	811a      	strh	r2, [r3, #8]
                if( (dbgtotaljobs >= 100) && (G->ActiveChannel == dbgmatch_channel) )             // debug print stuff
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <I2C_1_master_Process+0x3a0>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b63      	cmp	r3, #99	; 0x63
 8004b76:	d910      	bls.n	8004b9a <I2C_1_master_Process+0x2f2>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
 8004b7e:	4b33      	ldr	r3, [pc, #204]	; (8004c4c <I2C_1_master_Process+0x3a4>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d109      	bne.n	8004b9a <I2C_1_master_Process+0x2f2>
                    dbgset_match_channel();
 8004b86:	f000 f9f5 	bl	8004f74 <dbgset_match_channel>
                    dbgtotaljobs = 0;
 8004b8a:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <I2C_1_master_Process+0x3a0>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
                    dbgprint(*sptr);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f97b 	bl	8004e90 <dbgprint>
            G->StateMachine = I2C_STATE_BUSY_WAIT2;                                              // All Done: Wait a bit, then move to the next channel
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	220c      	movs	r2, #12
 8004b9e:	701a      	strb	r2, [r3, #0]
        return;
 8004ba0:	e04f      	b.n	8004c42 <I2C_1_master_Process+0x39a>


    case I2C_STATE_DO_WRITEONLY:

        if( write_complete( WAIT_TYPE_BTF_ONLY ) == RTN_CONTINUE ) { return; }
 8004ba2:	2002      	movs	r0, #2
 8004ba4:	f000 f856 	bl	8004c54 <write_complete>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d042      	beq.n	8004c34 <I2C_1_master_Process+0x38c>

        STM_REGISTER I2C1->CR1 |= I2C_CR1_STOP;                                   // Generates STOP condition
 8004bae:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <I2C_1_master_Process+0x3a8>)
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <I2C_1_master_Process+0x3a8>)
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
        G->StateMachine = I2C_STATE_WAIT_STOP;                                    // mop up for transaction just completed
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	701a      	strb	r2, [r3, #0]
        return;
 8004bc4:	e03d      	b.n	8004c42 <I2C_1_master_Process+0x39a>

    case I2C_STATE_SETTLE_WAIT:

        if( GetSysDelta(G->StartTime) < 35 ) { return; }                          // spin for 35ms:  Allows measurement to settle
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fd7a 	bl	80056c4 <GetSysDelta>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b22      	cmp	r3, #34	; 0x22
 8004bd4:	d930      	bls.n	8004c38 <I2C_1_master_Process+0x390>

        G->StartTime    = GetSysTick();                                           // Start timer for the new transaction
 8004bd6:	f000 fd69 	bl	80056ac <GetSysTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	605a      	str	r2, [r3, #4]
        G->StateMachine = I2C_STATE_GO_AGAIN;                                     // State to start up the sample which will be saved
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
        return;
 8004be6:	e02c      	b.n	8004c42 <I2C_1_master_Process+0x39a>

    case I2C_STATE_BUSY_WAIT2:

        if( GetSysDelta(G->StartTime) < 47 ) { return; }
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fd69 	bl	80056c4 <GetSysDelta>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bf6:	d921      	bls.n	8004c3c <I2C_1_master_Process+0x394>
        G->StateMachine = I2C_STATE_GETJOB;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
        return;
 8004bfe:	e020      	b.n	8004c42 <I2C_1_master_Process+0x39a>

    case I2C_STATE_BUSY_WAIT3:

        if( GetSysDelta(G->StartTime) < 8000 ) { return; }
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fd5d 	bl	80056c4 <GetSysDelta>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004c10:	d316      	bcc.n	8004c40 <I2C_1_master_Process+0x398>
        G->StateMachine = I2C_STATE_GETJOB;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
        return;
 8004c18:	bf00      	nop
 8004c1a:	e012      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( STM_REGISTER I2C1->SR2 & I2C_SR2_BUSY ) {return;}                     // Must wait for IDLE
 8004c1c:	bf00      	nop
 8004c1e:	e010      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( !(S1 & I2C_SR1_SB) ||  !(S2 & I2C_SR2_MSL) || !(S2 & I2C_SR2_BUSY) ) { return; }  // if any of these bits NOT set, get out
 8004c20:	bf00      	nop
 8004c22:	e00e      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( write_complete( WAIT_TYPE_WHOLE_BUNCH_O_BITS) == RTN_CONTINUE ) { return; }             // spin till ALL bits are set
 8004c24:	bf00      	nop
 8004c26:	e00c      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( write_complete( WAIT_TYPE_ADDR_ONLY ) == RTN_CONTINUE ) { return; }
 8004c28:	bf00      	nop
 8004c2a:	e00a      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( !(STM_REGISTER I2C1->SR1 & I2C_SR1_BTF) ) { return; }                 // Spin here till BTF bit is set
 8004c2c:	bf00      	nop
 8004c2e:	e008      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( STM_REGISTER I2C1->SR1 & I2C_SR1_STOPF ) { return; }                  // Spin here until STOPF is cleared
 8004c30:	bf00      	nop
 8004c32:	e006      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( write_complete( WAIT_TYPE_BTF_ONLY ) == RTN_CONTINUE ) { return; }
 8004c34:	bf00      	nop
 8004c36:	e004      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( GetSysDelta(G->StartTime) < 35 ) { return; }                          // spin for 35ms:  Allows measurement to settle
 8004c38:	bf00      	nop
 8004c3a:	e002      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( GetSysDelta(G->StartTime) < 47 ) { return; }
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <I2C_1_master_Process+0x39a>
        if( GetSysDelta(G->StartTime) < 8000 ) { return; }
 8004c40:	bf00      	nop
    }


}
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20004b68 	.word	0x20004b68
 8004c4c:	20000038 	.word	0x20000038
 8004c50:	40005400 	.word	0x40005400

08004c54 <write_complete>:



static u8 write_complete( unsigned int  WaitType )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
    u16 S1,S2;

    S1 = STM_REGISTER I2C1->SR1;
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <write_complete+0x88>)
 8004c5e:	8a9b      	ldrh	r3, [r3, #20]
 8004c60:	81fb      	strh	r3, [r7, #14]

    if( WaitType == WAIT_TYPE_WHOLE_BUNCH_O_BITS )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d11d      	bne.n	8004ca4 <write_complete+0x50>
    {
        S2 = STM_REGISTER I2C1->SR2;
 8004c68:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <write_complete+0x88>)
 8004c6a:	8b1b      	ldrh	r3, [r3, #24]
 8004c6c:	81bb      	strh	r3, [r7, #12]

        if( !(S1 & I2C_SR1_ADDR) || !(S1 & I2C_SR1_TXE) || !(S2 & I2C_SR2_MSL) || !(S2 & I2C_SR2_BUSY) || !(S2 & I2C_SR2_TRA) )
 8004c6e:	89fb      	ldrh	r3, [r7, #14]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <write_complete+0x4c>
 8004c78:	89fb      	ldrh	r3, [r7, #14]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00e      	beq.n	8004ca0 <write_complete+0x4c>
 8004c82:	89bb      	ldrh	r3, [r7, #12]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <write_complete+0x4c>
 8004c8c:	89bb      	ldrh	r3, [r7, #12]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <write_complete+0x4c>
 8004c96:	89bb      	ldrh	r3, [r7, #12]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d115      	bne.n	8004ccc <write_complete+0x78>
        {
            return RTN_CONTINUE;                                  //  stay here, keep looking for BF to be 0
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e014      	b.n	8004cce <write_complete+0x7a>
        }
    }
    else if( WaitType == WAIT_TYPE_BTF_ONLY )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d106      	bne.n	8004cb8 <write_complete+0x64>
    {
        if( !(S1 & I2C_SR1_BTF) ) { return RTN_CONTINUE; }
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <write_complete+0x78>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e00a      	b.n	8004cce <write_complete+0x7a>
    }
    else if( WaitType == WAIT_TYPE_ADDR_ONLY )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d106      	bne.n	8004ccc <write_complete+0x78>
    {
        if( !(S1 & I2C_SR1_ADDR) ) { return RTN_CONTINUE; }
 8004cbe:	89fb      	ldrh	r3, [r7, #14]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <write_complete+0x78>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e000      	b.n	8004cce <write_complete+0x7a>
    }

    return RTN_SUCCESS;                                               // write substate done, byte transfer succeeded
 8004ccc:	2302      	movs	r3, #2
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40005400 	.word	0x40005400

08004ce0 <set_next_channel>:

//
//   Only works if there is at least 1 channel configured
//
static void set_next_channel( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
    I2C_1_GLOBALS_t  *G = &Globals;
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <set_next_channel+0xec>)
 8004ce8:	607b      	str	r3, [r7, #4]

    while(1)
    {
        if( ++G->ActiveChannel == NUM_AD_CHANS ) { G->ActiveChannel = 0; }
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d103      	bne.n	8004d0c <set_next_channel+0x2c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        if( G->ADchans[G->ActiveChannel].is_configured == True ) { break; }
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	3301      	adds	r3, #1
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d000      	beq.n	8004d22 <set_next_channel+0x42>
        if( ++G->ActiveChannel == NUM_AD_CHANS ) { G->ActiveChannel = 0; }
 8004d20:	e7e3      	b.n	8004cea <set_next_channel+0xa>
        if( G->ADchans[G->ActiveChannel].is_configured == True ) { break; }
 8004d22:	bf00      	nop
    }

    GPIO_ResetBits( GPIOB, MUX1_EN_Pin );
 8004d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d28:	4829      	ldr	r0, [pc, #164]	; (8004dd0 <set_next_channel+0xf0>)
 8004d2a:	f7fd ffc4 	bl	8002cb6 <GPIO_ResetBits>
    GPIO_ResetBits( GPIOB, MUX2_EN_Pin );
 8004d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d32:	4827      	ldr	r0, [pc, #156]	; (8004dd0 <set_next_channel+0xf0>)
 8004d34:	f7fd ffbf 	bl	8002cb6 <GPIO_ResetBits>
    GPIO_ResetBits( GPIOB, MUXBIT_0_Pin | MUXBIT_1_Pin | MUXBIT_2_Pin );
 8004d38:	2107      	movs	r1, #7
 8004d3a:	4825      	ldr	r0, [pc, #148]	; (8004dd0 <set_next_channel+0xf0>)
 8004d3c:	f7fd ffbb 	bl	8002cb6 <GPIO_ResetBits>

    (G->ActiveChannel & 1) ? GPIO_ResetBits( GPIOB, MUXBIT_0_Pin) : GPIO_SetBits( GPIOB, MUXBIT_0_Pin);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <set_next_channel+0x78>
 8004d4e:	2101      	movs	r1, #1
 8004d50:	481f      	ldr	r0, [pc, #124]	; (8004dd0 <set_next_channel+0xf0>)
 8004d52:	f7fd ffb0 	bl	8002cb6 <GPIO_ResetBits>
 8004d56:	e003      	b.n	8004d60 <set_next_channel+0x80>
 8004d58:	2101      	movs	r1, #1
 8004d5a:	481d      	ldr	r0, [pc, #116]	; (8004dd0 <set_next_channel+0xf0>)
 8004d5c:	f7fd ff9c 	bl	8002c98 <GPIO_SetBits>
    (G->ActiveChannel & 2) ? GPIO_ResetBits( GPIOB, MUXBIT_1_Pin) : GPIO_SetBits( GPIOB, MUXBIT_1_Pin);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d004      	beq.n	8004d78 <set_next_channel+0x98>
 8004d6e:	2102      	movs	r1, #2
 8004d70:	4817      	ldr	r0, [pc, #92]	; (8004dd0 <set_next_channel+0xf0>)
 8004d72:	f7fd ffa0 	bl	8002cb6 <GPIO_ResetBits>
 8004d76:	e003      	b.n	8004d80 <set_next_channel+0xa0>
 8004d78:	2102      	movs	r1, #2
 8004d7a:	4815      	ldr	r0, [pc, #84]	; (8004dd0 <set_next_channel+0xf0>)
 8004d7c:	f7fd ff8c 	bl	8002c98 <GPIO_SetBits>
    (G->ActiveChannel & 4) ? GPIO_ResetBits( GPIOB, MUXBIT_2_Pin) : GPIO_SetBits( GPIOB, MUXBIT_2_Pin);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d004      	beq.n	8004d98 <set_next_channel+0xb8>
 8004d8e:	2104      	movs	r1, #4
 8004d90:	480f      	ldr	r0, [pc, #60]	; (8004dd0 <set_next_channel+0xf0>)
 8004d92:	f7fd ff90 	bl	8002cb6 <GPIO_ResetBits>
 8004d96:	e003      	b.n	8004da0 <set_next_channel+0xc0>
 8004d98:	2104      	movs	r1, #4
 8004d9a:	480d      	ldr	r0, [pc, #52]	; (8004dd0 <set_next_channel+0xf0>)
 8004d9c:	f7fd ff7c 	bl	8002c98 <GPIO_SetBits>
    (G->ActiveChannel & 8) ? GPIO_SetBits  ( GPIOB,  MUX2_EN_Pin) : GPIO_SetBits( GPIOB,  MUX1_EN_Pin);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <set_next_channel+0xda>
 8004dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004db2:	4807      	ldr	r0, [pc, #28]	; (8004dd0 <set_next_channel+0xf0>)
 8004db4:	f7fd ff70 	bl	8002c98 <GPIO_SetBits>
}
 8004db8:	e004      	b.n	8004dc4 <set_next_channel+0xe4>
    (G->ActiveChannel & 8) ? GPIO_SetBits  ( GPIOB,  MUX2_EN_Pin) : GPIO_SetBits( GPIOB,  MUX1_EN_Pin);
 8004dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dbe:	4804      	ldr	r0, [pc, #16]	; (8004dd0 <set_next_channel+0xf0>)
 8004dc0:	f7fd ff6a 	bl	8002c98 <GPIO_SetBits>
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20004ad0 	.word	0x20004ad0
 8004dd0:	40020400 	.word	0x40020400

08004dd4 <cleanup>:



static void cleanup( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef Xgpio;
    I2C_1_GLOBALS_t  *G = &Globals;
 8004dda:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <cleanup+0xa4>)
 8004ddc:	60fb      	str	r3, [r7, #12]

    if( ++G->Cleanup_Count == 1 )
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	7a5b      	ldrb	r3, [r3, #9]
 8004de2:	3301      	adds	r3, #1
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	725a      	strb	r2, [r3, #9]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	7a5b      	ldrb	r3, [r3, #9]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d113      	bne.n	8004e1a <cleanup+0x46>
    {
        U2_Print8( "cleanup, State: ", G->StateMachine );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	4619      	mov	r1, r3
 8004df8:	4820      	ldr	r0, [pc, #128]	; (8004e7c <cleanup+0xa8>)
 8004dfa:	f7ff fca2 	bl	8004742 <U2_Print8>
        U2_Print32("  SR1: ", STM_REGISTER I2C1->SR1);
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <cleanup+0xac>)
 8004e00:	8a9b      	ldrh	r3, [r3, #20]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	4619      	mov	r1, r3
 8004e06:	481f      	ldr	r0, [pc, #124]	; (8004e84 <cleanup+0xb0>)
 8004e08:	f7ff fc7d 	bl	8004706 <U2_Print32>
        U2_Print32("  SR2: ", STM_REGISTER I2C1->SR2);
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <cleanup+0xac>)
 8004e0e:	8b1b      	ldrh	r3, [r3, #24]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4619      	mov	r1, r3
 8004e14:	481c      	ldr	r0, [pc, #112]	; (8004e88 <cleanup+0xb4>)
 8004e16:	f7ff fc76 	bl	8004706 <U2_Print32>
    }

    STM_REGISTER I2C1->CR1 |= I2C_CR1_SWRST;
 8004e1a:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <cleanup+0xac>)
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <cleanup+0xac>)
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,   DISABLE);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004e34:	f7fe f9f4 	bl	8003220 <RCC_APB1PeriphClockCmd>
    STM_REGISTER GPIOB->AFR[0] = 0;
 8004e38:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <cleanup+0xb8>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	621a      	str	r2, [r3, #32]

    GPIO_StructInit(&Xgpio);
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fd ff0f 	bl	8002c64 <GPIO_StructInit>
     Xgpio.GPIO_Mode  = GPIO_Mode_OUT;
 8004e46:	2301      	movs	r3, #1
 8004e48:	723b      	strb	r3, [r7, #8]
     Xgpio.GPIO_Pin   = GPIO_Pin_6 | GPIO_Pin_7;
 8004e4a:	23c0      	movs	r3, #192	; 0xc0
 8004e4c:	607b      	str	r3, [r7, #4]
     Xgpio.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	72fb      	strb	r3, [r7, #11]
     Xgpio.GPIO_Speed = GPIO_Speed_50MHz;
 8004e52:	2302      	movs	r3, #2
 8004e54:	727b      	strb	r3, [r7, #9]
    GPIO_Init(GPIOB, &Xgpio);
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	480c      	ldr	r0, [pc, #48]	; (8004e8c <cleanup+0xb8>)
 8004e5c:	f7fd fe74 	bl	8002b48 <GPIO_Init>

    GPIO_SetBits(GPIOB, GPIO_Pin_6|GPIO_Pin_7);
 8004e60:	21c0      	movs	r1, #192	; 0xc0
 8004e62:	480a      	ldr	r0, [pc, #40]	; (8004e8c <cleanup+0xb8>)
 8004e64:	f7fd ff18 	bl	8002c98 <GPIO_SetBits>

    G->StateMachine = I2C_STATE_FINISH_CLEANUP;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	220b      	movs	r2, #11
 8004e6c:	701a      	strb	r2, [r3, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20004ad0 	.word	0x20004ad0
 8004e7c:	0800618c 	.word	0x0800618c
 8004e80:	40005400 	.word	0x40005400
 8004e84:	080061a0 	.word	0x080061a0
 8004e88:	080061a8 	.word	0x080061a8
 8004e8c:	40020400 	.word	0x40020400

08004e90 <dbgprint>:


//
//
static void dbgprint( u16 Val )
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	80fb      	strh	r3, [r7, #6]
    float a1,b1;
    I2C_1_GLOBALS_t  *G = &Globals;
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <dbgprint+0xc4>)
 8004e9c:	617b      	str	r3, [r7, #20]

    U2_Print8N("chan:", G->ActiveChannel);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	482c      	ldr	r0, [pc, #176]	; (8004f58 <dbgprint+0xc8>)
 8004ea8:	f7ff fc5b 	bl	8004762 <U2_Print8N>
    U2_Print16N(" ", Val);
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	482a      	ldr	r0, [pc, #168]	; (8004f5c <dbgprint+0xcc>)
 8004eb2:	f7ff fc66 	bl	8004782 <U2_Print16N>

    if( G->ActiveChannel == 10 || G->ActiveChannel == 12 )
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004ebc:	2b0a      	cmp	r3, #10
 8004ebe:	d004      	beq.n	8004eca <dbgprint+0x3a>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004ec6:	2b0c      	cmp	r3, #12
 8004ec8:	d139      	bne.n	8004f3e <dbgprint+0xae>
    {
    	U2_Print32N( "     ", G->StartTime );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4823      	ldr	r0, [pc, #140]	; (8004f60 <dbgprint+0xd0>)
 8004ed2:	f7ff fc27 	bl	8004724 <U2_Print32N>
    	a1 = (float)Val;
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	ee07 3a90 	vmov	s15, r3
 8004edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee0:	edc7 7a04 	vstr	s15, [r7, #16]
    	b1 = (a1 * 1000.0)/65536.0;
 8004ee4:	6938      	ldr	r0, [r7, #16]
 8004ee6:	f7fb fadf 	bl	80004a8 <__aeabi_f2d>
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <dbgprint+0xd4>)
 8004ef0:	f7fb fb2e 	bl	8000550 <__aeabi_dmul>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	4618      	mov	r0, r3
 8004efa:	4621      	mov	r1, r4
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <dbgprint+0xd8>)
 8004f02:	f7fb fc4f 	bl	80007a4 <__aeabi_ddiv>
 8004f06:	4603      	mov	r3, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	f7fb fd59 	bl	80009c4 <__aeabi_d2f>
 8004f12:	4603      	mov	r3, r0
 8004f14:	60fb      	str	r3, [r7, #12]

    	printf("   %d\n\r",(int)(b1*100.0));
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7fb fac6 	bl	80004a8 <__aeabi_f2d>
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <dbgprint+0xdc>)
 8004f22:	f7fb fb15 	bl	8000550 <__aeabi_dmul>
 8004f26:	4603      	mov	r3, r0
 8004f28:	460c      	mov	r4, r1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f7fb fd21 	bl	8000974 <__aeabi_d2iz>
 8004f32:	4603      	mov	r3, r0
 8004f34:	4619      	mov	r1, r3
 8004f36:	480e      	ldr	r0, [pc, #56]	; (8004f70 <dbgprint+0xe0>)
 8004f38:	f000 fd62 	bl	8005a00 <iprintf>
 8004f3c:	e005      	b.n	8004f4a <dbgprint+0xba>
    }
    else
    	U2_Print32( "     ", G->StartTime );
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4619      	mov	r1, r3
 8004f44:	4806      	ldr	r0, [pc, #24]	; (8004f60 <dbgprint+0xd0>)
 8004f46:	f7ff fbde 	bl	8004706 <U2_Print32>
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20004ad0 	.word	0x20004ad0
 8004f58:	080061b0 	.word	0x080061b0
 8004f5c:	080061b8 	.word	0x080061b8
 8004f60:	080061bc 	.word	0x080061bc
 8004f64:	408f4000 	.word	0x408f4000
 8004f68:	40f00000 	.word	0x40f00000
 8004f6c:	40590000 	.word	0x40590000
 8004f70:	080061c4 	.word	0x080061c4

08004f74 <dbgset_match_channel>:


static void dbgset_match_channel( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
    I2C_1_GLOBALS_t  *G = &Globals;
 8004f7a:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <dbgset_match_channel+0x48>)
 8004f7c:	607b      	str	r3, [r7, #4]

    while(1)
    {
        if( ++dbgmatch_channel == NUM_AD_CHANS ) { dbgmatch_channel = 0; }
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <dbgset_match_channel+0x4c>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <dbgset_match_channel+0x4c>)
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <dbgset_match_channel+0x4c>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d102      	bne.n	8004f98 <dbgset_match_channel+0x24>
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <dbgset_match_channel+0x4c>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
        if( G->ADchans[dbgmatch_channel].is_configured == True ) { break; }
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <dbgset_match_channel+0x4c>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d000      	beq.n	8004fac <dbgset_match_channel+0x38>
        if( ++dbgmatch_channel == NUM_AD_CHANS ) { dbgmatch_channel = 0; }
 8004faa:	e7e8      	b.n	8004f7e <dbgset_match_channel+0xa>
        if( G->ADchans[dbgmatch_channel].is_configured == True ) { break; }
 8004fac:	bf00      	nop
    }
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20004ad0 	.word	0x20004ad0
 8004fc0:	20000038 	.word	0x20000038

08004fc4 <main>:
//extern void  AD_Init( void );



GLOBALLY_VISIBLE int main(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af02      	add	r7, sp, #8
    Globals.Ntime = 0;
 8004fca:	4b19      	ldr	r3, [pc, #100]	; (8005030 <main+0x6c>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

    U2_Init();
 8004fd0:	f7ff fa2e 	bl	8004430 <U2_Init>
    U2Inp_Init();
 8004fd4:	f7ff f96c 	bl	80042b0 <U2Inp_Init>
    CMDS_Init();
 8004fd8:	f7fe fd4a 	bl	8003a70 <CMDS_Init>
    init_hw();
 8004fdc:	f000 f98c 	bl	80052f8 <init_hw>
    init_timer();
 8004fe0:	f000 fb58 	bl	8005694 <init_timer>
    I2C_1_master_Init();
 8004fe4:	f7ff fc22 	bl	800482c <I2C_1_master_Init>
    //AD_Init();


    CMDS_DisplayVersion();
 8004fe8:	f7fe fdf4 	bl	8003bd4 <CMDS_DisplayVersion>

    Globals.jSem = xSemaphoreCreateBinary();
 8004fec:	2203      	movs	r2, #3
 8004fee:	2100      	movs	r1, #0
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	f7fc fa47 	bl	8001484 <xQueueGenericCreate>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <main+0x6c>)
 8004ffa:	60da      	str	r2, [r3, #12]

    xTaskCreate((TaskFunction_t)StartDefaultTask,(const char * const)"DefaultTask", 128, 0, 1, &Globals.thand1);
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <main+0x70>)
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	2301      	movs	r3, #1
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	490b      	ldr	r1, [pc, #44]	; (8005038 <main+0x74>)
 800500a:	480c      	ldr	r0, [pc, #48]	; (800503c <main+0x78>)
 800500c:	f7fc fdf3 	bl	8001bf6 <xTaskCreate>
    xTaskCreate((TaskFunction_t)TestThread,      (const char * const)"TestThread",  128, 0, 1, &Globals.thand2);
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <main+0x7c>)
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	2301      	movs	r3, #1
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	2280      	movs	r2, #128	; 0x80
 800501c:	4909      	ldr	r1, [pc, #36]	; (8005044 <main+0x80>)
 800501e:	480a      	ldr	r0, [pc, #40]	; (8005048 <main+0x84>)
 8005020:	f7fc fde9 	bl	8001bf6 <xTaskCreate>

    vTaskStartScheduler();
 8005024:	f7fc ff48 	bl	8001eb8 <vTaskStartScheduler>
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20004b6c 	.word	0x20004b6c
 8005034:	20004b70 	.word	0x20004b70
 8005038:	080061cc 	.word	0x080061cc
 800503c:	08005349 	.word	0x08005349
 8005040:	20004b74 	.word	0x20004b74
 8005044:	080061d8 	.word	0x080061d8
 8005048:	08005369 	.word	0x08005369

0800504c <vApplicationIdleHook>:

//
//   *** Called from the IDLE task
//
GLOBALLY_VISIBLE void vApplicationIdleHook( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
	U2_Process();
 8005050:	f7ff fa4e 	bl	80044f0 <U2_Process>
	U2Inp_Process();
 8005054:	f7ff f93c 	bl	80042d0 <U2Inp_Process>
	CMDS_Process();
 8005058:	f7fe fd26 	bl	8003aa8 <CMDS_Process>
	//I2C_1_master_Process();

	if( GetSysDelta(Globals.Ntime) >= 100 )                // number is in miilliseconds
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <vApplicationIdleHook+0x30>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fb2f 	bl	80056c4 <GetSysDelta>
 8005066:	4603      	mov	r3, r0
 8005068:	2b63      	cmp	r3, #99	; 0x63
 800506a:	d904      	bls.n	8005076 <vApplicationIdleHook+0x2a>
	{
		//GPIO_ToggleBits(GPIOE, DO1_Pin);                 //     Will do something every 100ms
	    Globals.Ntime = GetSysTick();                      //     re-init the counter
 800506c:	f000 fb1e 	bl	80056ac <GetSysTick>
 8005070:	4602      	mov	r2, r0
 8005072:	4b02      	ldr	r3, [pc, #8]	; (800507c <vApplicationIdleHook+0x30>)
 8005074:	601a      	str	r2, [r3, #0]
	}
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20004b6c 	.word	0x20004b6c

08005080 <vApplicationTickHook>:

//
//   *** Called from the System Ticker
//
GLOBALLY_VISIBLE void vApplicationTickHook( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
	//GPIO_ToggleBits(GPIOE, DO1_Pin);
	Increment_SysTicks();
 8005084:	f000 fb38 	bl	80056f8 <Increment_SysTicks>
	I2C_1_master_Process();
 8005088:	f7ff fc0e 	bl	80048a8 <I2C_1_master_Process>
}
 800508c:	bf00      	nop
 800508e:	bd80      	pop	{r7, pc}

08005090 <init_gpios>:



static void init_gpios(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpioX;
    GPIO_InitTypeDef UsartX_gpio;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,  ENABLE);
 8005096:	2101      	movs	r1, #1
 8005098:	2001      	movs	r0, #1
 800509a:	f7fe f8a1 	bl	80031e0 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,  ENABLE);
 800509e:	2101      	movs	r1, #1
 80050a0:	2002      	movs	r0, #2
 80050a2:	f7fe f89d 	bl	80031e0 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,  ENABLE);
 80050a6:	2101      	movs	r1, #1
 80050a8:	2008      	movs	r0, #8
 80050aa:	f7fe f899 	bl	80031e0 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,  ENABLE);
 80050ae:	2101      	movs	r1, #1
 80050b0:	2010      	movs	r0, #16
 80050b2:	f7fe f895 	bl	80031e0 <RCC_AHB1PeriphClockCmd>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80050b6:	2101      	movs	r1, #1
 80050b8:	2010      	movs	r0, #16
 80050ba:	f7fe f8d1 	bl	8003260 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80050be:	2101      	movs	r1, #1
 80050c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80050c4:	f7fe f8ac 	bl	8003220 <RCC_APB1PeriphClockCmd>

    GPIO_StructInit(&UsartX_gpio);
 80050c8:	463b      	mov	r3, r7
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fdca 	bl	8002c64 <GPIO_StructInit>
      UsartX_gpio.GPIO_Pin   = CTRL_P_TX_Pin | CTRL_P_RX_Pin | TX_CONSOLE_Pin | RX_CONSOLE_Pin;            // CONSOLE: A9-TX, A10-RX = USART1      CTRL_P: A2-TX, A3-RX = USART2
 80050d0:	f240 630c 	movw	r3, #1548	; 0x60c
 80050d4:	603b      	str	r3, [r7, #0]
      UsartX_gpio.GPIO_Mode  = GPIO_Mode_AF;
 80050d6:	2302      	movs	r3, #2
 80050d8:	713b      	strb	r3, [r7, #4]
      UsartX_gpio.GPIO_OType = GPIO_OType_PP;
 80050da:	2300      	movs	r3, #0
 80050dc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &UsartX_gpio);
 80050de:	463b      	mov	r3, r7
 80050e0:	4619      	mov	r1, r3
 80050e2:	4835      	ldr	r0, [pc, #212]	; (80051b8 <init_gpios+0x128>)
 80050e4:	f7fd fd30 	bl	8002b48 <GPIO_Init>


    GPIO_StructInit(&gpioX);
 80050e8:	f107 0308 	add.w	r3, r7, #8
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fd fdb9 	bl	8002c64 <GPIO_StructInit>
      gpioX.GPIO_Pin   = DO1_Pin | HB_LED_Pin;                                // GPIOE:  Pin9=DigOut1.  Pin15 = D21 = Heartbeat LED for Control proc
 80050f2:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80050f6:	60bb      	str	r3, [r7, #8]
      gpioX.GPIO_Mode  = GPIO_Mode_OUT;
 80050f8:	2301      	movs	r3, #1
 80050fa:	733b      	strb	r3, [r7, #12]
      gpioX.GPIO_PuPd  = GPIO_PuPd_UP;
 80050fc:	2301      	movs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
      gpioX.GPIO_Speed = GPIO_Speed_50MHz;
 8005100:	2302      	movs	r3, #2
 8005102:	737b      	strb	r3, [r7, #13]
    GPIO_Init(GPIOE, &gpioX);
 8005104:	f107 0308 	add.w	r3, r7, #8
 8005108:	4619      	mov	r1, r3
 800510a:	482c      	ldr	r0, [pc, #176]	; (80051bc <init_gpios+0x12c>)
 800510c:	f7fd fd1c 	bl	8002b48 <GPIO_Init>

    GPIO_StructInit(&gpioX);
 8005110:	f107 0308 	add.w	r3, r7, #8
 8005114:	4618      	mov	r0, r3
 8005116:	f7fd fda5 	bl	8002c64 <GPIO_StructInit>
      gpioX.GPIO_Pin   = CTRL_P_RTS_Pin | FAN2_ON_Pin;                        // GPIOA: , Pin1 = CTRL_P_RTS,  Pin11 = D7 = FAN2_ON_Pin
 800511a:	f640 0302 	movw	r3, #2050	; 0x802
 800511e:	60bb      	str	r3, [r7, #8]
      gpioX.GPIO_Mode  = GPIO_Mode_OUT;
 8005120:	2301      	movs	r3, #1
 8005122:	733b      	strb	r3, [r7, #12]
      gpioX.GPIO_PuPd  = GPIO_PuPd_UP;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
      gpioX.GPIO_Speed = GPIO_Speed_50MHz;
 8005128:	2302      	movs	r3, #2
 800512a:	737b      	strb	r3, [r7, #13]
    GPIO_Init(GPIOA, &gpioX);
 800512c:	f107 0308 	add.w	r3, r7, #8
 8005130:	4619      	mov	r1, r3
 8005132:	4821      	ldr	r0, [pc, #132]	; (80051b8 <init_gpios+0x128>)
 8005134:	f7fd fd08 	bl	8002b48 <GPIO_Init>

    GPIO_StructInit(&gpioX);
 8005138:	f107 0308 	add.w	r3, r7, #8
 800513c:	4618      	mov	r0, r3
 800513e:	f7fd fd91 	bl	8002c64 <GPIO_StructInit>
      gpioX.GPIO_Pin   = CTRL_to_COMMS_Pin;                                   // GPIOD: , Pin6 = CTRL_to_COMMS_Pin
 8005142:	2340      	movs	r3, #64	; 0x40
 8005144:	60bb      	str	r3, [r7, #8]
      gpioX.GPIO_Mode  = GPIO_Mode_OUT;
 8005146:	2301      	movs	r3, #1
 8005148:	733b      	strb	r3, [r7, #12]
      gpioX.GPIO_PuPd  = GPIO_PuPd_UP;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
      gpioX.GPIO_Speed = GPIO_Speed_50MHz;
 800514e:	2302      	movs	r3, #2
 8005150:	737b      	strb	r3, [r7, #13]
    GPIO_Init(GPIOD, &gpioX);
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4619      	mov	r1, r3
 8005158:	4819      	ldr	r0, [pc, #100]	; (80051c0 <init_gpios+0x130>)
 800515a:	f7fd fcf5 	bl	8002b48 <GPIO_Init>

    GPIO_StructInit(&gpioX);
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fd7e 	bl	8002c64 <GPIO_StructInit>
      gpioX.GPIO_Pin   = MUXBIT_0_Pin | MUXBIT_1_Pin | MUXBIT_2_Pin | MUX1_EN_Pin | MUX2_EN_Pin;
 8005168:	f240 3307 	movw	r3, #775	; 0x307
 800516c:	60bb      	str	r3, [r7, #8]
      gpioX.GPIO_Mode  = GPIO_Mode_OUT;
 800516e:	2301      	movs	r3, #1
 8005170:	733b      	strb	r3, [r7, #12]
      gpioX.GPIO_PuPd  = GPIO_PuPd_UP;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
      gpioX.GPIO_Speed = GPIO_Speed_50MHz;
 8005176:	2302      	movs	r3, #2
 8005178:	737b      	strb	r3, [r7, #13]
    GPIO_Init(GPIOB, &gpioX);
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	4619      	mov	r1, r3
 8005180:	4810      	ldr	r0, [pc, #64]	; (80051c4 <init_gpios+0x134>)
 8005182:	f7fd fce1 	bl	8002b48 <GPIO_Init>


    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,  GPIO_AF_USART1);      // Pin9  = Usart1 TX
 8005186:	2207      	movs	r2, #7
 8005188:	2109      	movs	r1, #9
 800518a:	480b      	ldr	r0, [pc, #44]	; (80051b8 <init_gpios+0x128>)
 800518c:	f7fd fdb4 	bl	8002cf8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);      // Pin10 = Usart1 RX
 8005190:	2207      	movs	r2, #7
 8005192:	210a      	movs	r1, #10
 8005194:	4808      	ldr	r0, [pc, #32]	; (80051b8 <init_gpios+0x128>)
 8005196:	f7fd fdaf 	bl	8002cf8 <GPIO_PinAFConfig>

    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2,  GPIO_AF_USART2);      // Pin2 = Usart2 TX
 800519a:	2207      	movs	r2, #7
 800519c:	2102      	movs	r1, #2
 800519e:	4806      	ldr	r0, [pc, #24]	; (80051b8 <init_gpios+0x128>)
 80051a0:	f7fd fdaa 	bl	8002cf8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3,  GPIO_AF_USART2);      // Pin3 = Usart2 RX
 80051a4:	2207      	movs	r2, #7
 80051a6:	2103      	movs	r1, #3
 80051a8:	4803      	ldr	r0, [pc, #12]	; (80051b8 <init_gpios+0x128>)
 80051aa:	f7fd fda5 	bl	8002cf8 <GPIO_PinAFConfig>
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40020000 	.word	0x40020000
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40020c00 	.word	0x40020c00
 80051c4:	40020400 	.word	0x40020400

080051c8 <init_usarts>:


static void init_usarts()
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
    USART_InitTypeDef U1;
    USART_InitTypeDef U2;


    USART_StructInit( &U1 );
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fc0e 	bl	80039f4 <USART_StructInit>
      U1.USART_BaudRate            = 9600;
 80051d8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80051dc:	613b      	str	r3, [r7, #16]
      U1.USART_WordLength          = USART_WordLength_8b;
 80051de:	2300      	movs	r3, #0
 80051e0:	82bb      	strh	r3, [r7, #20]
      U1.USART_StopBits            = USART_StopBits_1;
 80051e2:	2300      	movs	r3, #0
 80051e4:	82fb      	strh	r3, [r7, #22]
      U1.USART_Parity              = USART_Parity_No;
 80051e6:	2300      	movs	r3, #0
 80051e8:	833b      	strh	r3, [r7, #24]
      U1.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80051ea:	2300      	movs	r3, #0
 80051ec:	83bb      	strh	r3, [r7, #28]
      U1.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
 80051ee:	230c      	movs	r3, #12
 80051f0:	837b      	strh	r3, [r7, #26]
    USART_Init( USART1, &U1    );
 80051f2:	f107 0310 	add.w	r3, r7, #16
 80051f6:	4619      	mov	r1, r3
 80051f8:	4812      	ldr	r0, [pc, #72]	; (8005244 <init_usarts+0x7c>)
 80051fa:	f7fe fb41 	bl	8003880 <USART_Init>
    USART_Cmd ( USART1, ENABLE );
 80051fe:	2101      	movs	r1, #1
 8005200:	4810      	ldr	r0, [pc, #64]	; (8005244 <init_usarts+0x7c>)
 8005202:	f7fe fc14 	bl	8003a2e <USART_Cmd>

    USART_StructInit( &U2 );
 8005206:	463b      	mov	r3, r7
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fbf3 	bl	80039f4 <USART_StructInit>
      U2.USART_BaudRate            = 9600;
 800520e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005212:	603b      	str	r3, [r7, #0]
      U2.USART_WordLength          = USART_WordLength_8b;
 8005214:	2300      	movs	r3, #0
 8005216:	80bb      	strh	r3, [r7, #4]
      U2.USART_StopBits            = USART_StopBits_1;
 8005218:	2300      	movs	r3, #0
 800521a:	80fb      	strh	r3, [r7, #6]
      U2.USART_Parity              = USART_Parity_No;
 800521c:	2300      	movs	r3, #0
 800521e:	813b      	strh	r3, [r7, #8]
      U2.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005220:	2300      	movs	r3, #0
 8005222:	81bb      	strh	r3, [r7, #12]
      U2.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
 8005224:	230c      	movs	r3, #12
 8005226:	817b      	strh	r3, [r7, #10]
    USART_Init( USART2, &U2    );
 8005228:	463b      	mov	r3, r7
 800522a:	4619      	mov	r1, r3
 800522c:	4806      	ldr	r0, [pc, #24]	; (8005248 <init_usarts+0x80>)
 800522e:	f7fe fb27 	bl	8003880 <USART_Init>
    USART_Cmd ( USART2, ENABLE );
 8005232:	2101      	movs	r1, #1
 8005234:	4804      	ldr	r0, [pc, #16]	; (8005248 <init_usarts+0x80>)
 8005236:	f7fe fbfa 	bl	8003a2e <USART_Cmd>
}
 800523a:	bf00      	nop
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40011000 	.word	0x40011000
 8005248:	40004400 	.word	0x40004400

0800524c <init_gpioI2C>:


void init_gpioI2C(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef I2CX_gpio;
    I2C_InitTypeDef  I1;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,   ENABLE);
 8005252:	2101      	movs	r1, #1
 8005254:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005258:	f7fd ffe2 	bl	8003220 <RCC_APB1PeriphClockCmd>

    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1,   ENABLE);
 800525c:	2101      	movs	r1, #1
 800525e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005262:	f7fe f81d 	bl	80032a0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1,   DISABLE);
 8005266:	2100      	movs	r1, #0
 8005268:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800526c:	f7fe f818 	bl	80032a0 <RCC_APB1PeriphResetCmd>

    GPIO_StructInit(&I2CX_gpio);
 8005270:	f107 0310 	add.w	r3, r7, #16
 8005274:	4618      	mov	r0, r3
 8005276:	f7fd fcf5 	bl	8002c64 <GPIO_StructInit>
      I2CX_gpio.GPIO_Pin    = GPIO_Pin_6 | GPIO_Pin_7;                         // I2C1: B6=SCL, B7=SDA
 800527a:	23c0      	movs	r3, #192	; 0xc0
 800527c:	613b      	str	r3, [r7, #16]
      I2CX_gpio.GPIO_Mode   = GPIO_Mode_AF;
 800527e:	2302      	movs	r3, #2
 8005280:	753b      	strb	r3, [r7, #20]
      I2CX_gpio.GPIO_Speed  = GPIO_Speed_100MHz;
 8005282:	2303      	movs	r3, #3
 8005284:	757b      	strb	r3, [r7, #21]
      I2CX_gpio.GPIO_OType  = GPIO_OType_OD;
 8005286:	2301      	movs	r3, #1
 8005288:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOB, &I2CX_gpio);
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	4619      	mov	r1, r3
 8005290:	4816      	ldr	r0, [pc, #88]	; (80052ec <init_gpioI2C+0xa0>)
 8005292:	f7fd fc59 	bl	8002b48 <GPIO_Init>

    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6,  GPIO_AF_I2C1);        // Pin6 = I2C1 SCL
 8005296:	2204      	movs	r2, #4
 8005298:	2106      	movs	r1, #6
 800529a:	4814      	ldr	r0, [pc, #80]	; (80052ec <init_gpioI2C+0xa0>)
 800529c:	f7fd fd2c 	bl	8002cf8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7,  GPIO_AF_I2C1);        // Pin7 = I2C1 SDA
 80052a0:	2204      	movs	r2, #4
 80052a2:	2107      	movs	r1, #7
 80052a4:	4811      	ldr	r0, [pc, #68]	; (80052ec <init_gpioI2C+0xa0>)
 80052a6:	f7fd fd27 	bl	8002cf8 <GPIO_PinAFConfig>

    I2C_StructInit( &I1 );
 80052aa:	463b      	mov	r3, r7
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fd fe2f 	bl	8002f10 <I2C_StructInit>
      I1.I2C_ClockSpeed          = 100000;
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <init_gpioI2C+0xa4>)
 80052b4:	603b      	str	r3, [r7, #0]
      I1.I2C_Mode                = I2C_Mode_I2C;
 80052b6:	2300      	movs	r3, #0
 80052b8:	80bb      	strh	r3, [r7, #4]
      I1.I2C_DutyCycle           = I2C_DutyCycle_2;        // only matters in fast mode
 80052ba:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80052be:	80fb      	strh	r3, [r7, #6]
      I1.I2C_OwnAddress1         = 0;                      // only matters in slave mode: we are the master
 80052c0:	2300      	movs	r3, #0
 80052c2:	813b      	strh	r3, [r7, #8]
      I1.I2C_Ack                 = I2C_Ack_Enable;
 80052c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c8:	817b      	strh	r3, [r7, #10]
      I1.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80052ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052ce:	81bb      	strh	r3, [r7, #12]
    I2C_Init( I2C1, &I1    );
 80052d0:	463b      	mov	r3, r7
 80052d2:	4619      	mov	r1, r3
 80052d4:	4807      	ldr	r0, [pc, #28]	; (80052f4 <init_gpioI2C+0xa8>)
 80052d6:	f7fd fd59 	bl	8002d8c <I2C_Init>
    I2C_Cmd ( I2C1, ENABLE );
 80052da:	2101      	movs	r1, #1
 80052dc:	4805      	ldr	r0, [pc, #20]	; (80052f4 <init_gpioI2C+0xa8>)
 80052de:	f7fd fe36 	bl	8002f4e <I2C_Cmd>
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40020400 	.word	0x40020400
 80052f0:	000186a0 	.word	0x000186a0
 80052f4:	40005400 	.word	0x40005400

080052f8 <init_hw>:




static void init_hw()
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef  rclocks;

    SystemCoreClockUpdate();
 80052fe:	f000 f8d1 	bl	80054a4 <SystemCoreClockUpdate>
    RCC_GetClocksFreq(&rclocks);
 8005302:	463b      	mov	r3, r7
 8005304:	4618      	mov	r0, r3
 8005306:	f7fd fe85 	bl	8003014 <RCC_GetClocksFreq>

    FLASH->ACR |= FLASH_ACR_ICEN;      // Flash Instruction Cache Enable
 800530a:	4a0e      	ldr	r2, [pc, #56]	; (8005344 <init_hw+0x4c>)
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <init_hw+0x4c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005314:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_DCEN;      // Flash Data Cache Enable
 8005316:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <init_hw+0x4c>)
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <init_hw+0x4c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005320:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_PRFTEN;    // Flash Pre-Fetch Buffer Enable
 8005322:	4a08      	ldr	r2, [pc, #32]	; (8005344 <init_hw+0x4c>)
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <init_hw+0x4c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532c:	6013      	str	r3, [r2, #0]

    init_gpios();
 800532e:	f7ff feaf 	bl	8005090 <init_gpios>
    init_usarts();
 8005332:	f7ff ff49 	bl	80051c8 <init_usarts>
    init_gpioI2C();
 8005336:	f7ff ff89 	bl	800524c <init_gpioI2C>
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40023c00 	.word	0x40023c00

08005348 <StartDefaultTask>:




static void StartDefaultTask(void const * argument)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
    while(1)
    {
    	vTaskDelay(500);
 8005350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005354:	f7fc fd7c 	bl	8001e50 <vTaskDelay>
    	GPIO_ToggleBits(GPIOE, HB_LED_Pin);    //   Toggles the User Led per Delta interval
 8005358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800535c:	4801      	ldr	r0, [pc, #4]	; (8005364 <StartDefaultTask+0x1c>)
 800535e:	f7fd fcb9 	bl	8002cd4 <GPIO_ToggleBits>
    	vTaskDelay(500);
 8005362:	e7f5      	b.n	8005350 <StartDefaultTask+0x8>
 8005364:	40021000 	.word	0x40021000

08005368 <TestThread>:
    }
}


static void TestThread(void const * argument)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
    while(1)
    {
    	xSemaphoreTake( Globals.jSem, portMAX_DELAY);
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <TestThread+0x24>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005378:	4618      	mov	r0, r3
 800537a:	f7fc f9d9 	bl	8001730 <xQueueSemaphoreTake>
    	//vTaskDelay(125);
    	//GPIO_ToggleBits(GPIOE, DO1_Pin);
    	GPIO_ToggleBits(GPIOA, FAN2_ON_Pin);
 800537e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005382:	4803      	ldr	r0, [pc, #12]	; (8005390 <TestThread+0x28>)
 8005384:	f7fd fca6 	bl	8002cd4 <GPIO_ToggleBits>
    	xSemaphoreTake( Globals.jSem, portMAX_DELAY);
 8005388:	e7f2      	b.n	8005370 <TestThread+0x8>
 800538a:	bf00      	nop
 800538c:	20004b6c 	.word	0x20004b6c
 8005390:	40020000 	.word	0x40020000

08005394 <jSem_give>:
    }
}

GLOBALLY_VISIBLE void jSem_give( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
	xSemaphoreGive( Globals.jSem );
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <jSem_give+0x18>)
 800539a:	68d8      	ldr	r0, [r3, #12]
 800539c:	2300      	movs	r3, #0
 800539e:	2200      	movs	r2, #0
 80053a0:	2100      	movs	r1, #0
 80053a2:	f7fc f8cb 	bl	800153c <xQueueGenericSend>
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20004b6c 	.word	0x20004b6c

080053b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80053b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80053b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053b6:	e003      	b.n	80053c0 <LoopCopyDataInit>

080053b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80053ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80053bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80053be:	3104      	adds	r1, #4

080053c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80053c0:	480b      	ldr	r0, [pc, #44]	; (80053f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80053c2:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80053c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80053c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80053c8:	d3f6      	bcc.n	80053b8 <CopyDataInit>
  ldr  r2, =_sbss
 80053ca:	4a0b      	ldr	r2, [pc, #44]	; (80053f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80053cc:	e002      	b.n	80053d4 <LoopFillZerobss>

080053ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80053ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80053d0:	f842 3b04 	str.w	r3, [r2], #4

080053d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80053d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80053d8:	d3f9      	bcc.n	80053ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80053da:	f000 f82d 	bl	8005438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053de:	f000 fd2f 	bl	8005e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053e2:	f7ff fdef 	bl	8004fc4 <main>
  bx  lr    
 80053e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80053ec:	080061ec 	.word	0x080061ec
  ldr  r0, =_sdata
 80053f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053f4:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
 80053f8:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 80053fc:	20004b80 	.word	0x20004b80

08005400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005400:	e7fe      	b.n	8005400 <ADC_IRQHandler>

08005402 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005402:	b480      	push	{r7}
 8005404:	af00      	add	r7, sp, #0
}
 8005406:	bf00      	nop
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005414:	e7fe      	b.n	8005414 <HardFault_Handler+0x4>

08005416 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005416:	b480      	push	{r7}
 8005418:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800541a:	e7fe      	b.n	800541a <MemManage_Handler+0x4>

0800541c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005420:	e7fe      	b.n	8005420 <BusFault_Handler+0x4>

08005422 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005426:	e7fe      	b.n	8005426 <UsageFault_Handler+0x4>

08005428 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <SystemInit+0x60>)
 800543e:	4b16      	ldr	r3, [pc, #88]	; (8005498 <SystemInit+0x60>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800544c:	4a13      	ldr	r2, [pc, #76]	; (800549c <SystemInit+0x64>)
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <SystemInit+0x64>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <SystemInit+0x64>)
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800545e:	4a0f      	ldr	r2, [pc, #60]	; (800549c <SystemInit+0x64>)
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <SystemInit+0x64>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <SystemInit+0x64>)
 8005470:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <SystemInit+0x68>)
 8005472:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005474:	4a09      	ldr	r2, [pc, #36]	; (800549c <SystemInit+0x64>)
 8005476:	4b09      	ldr	r3, [pc, #36]	; (800549c <SystemInit+0x64>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <SystemInit+0x64>)
 8005482:	2200      	movs	r2, #0
 8005484:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005486:	f000 f889 	bl	800559c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800548a:	4b03      	ldr	r3, [pc, #12]	; (8005498 <SystemInit+0x60>)
 800548c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005490:	609a      	str	r2, [r3, #8]
#endif
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	e000ed00 	.word	0xe000ed00
 800549c:	40023800 	.word	0x40023800
 80054a0:	24003010 	.word	0x24003010

080054a4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	2302      	movs	r3, #2
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	2302      	movs	r3, #2
 80054bc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80054be:	4b32      	ldr	r3, [pc, #200]	; (8005588 <SystemCoreClockUpdate+0xe4>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d007      	beq.n	80054de <SystemCoreClockUpdate+0x3a>
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d009      	beq.n	80054e6 <SystemCoreClockUpdate+0x42>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d13d      	bne.n	8005552 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80054d6:	4b2d      	ldr	r3, [pc, #180]	; (800558c <SystemCoreClockUpdate+0xe8>)
 80054d8:	4a2d      	ldr	r2, [pc, #180]	; (8005590 <SystemCoreClockUpdate+0xec>)
 80054da:	601a      	str	r2, [r3, #0]
      break;
 80054dc:	e03d      	b.n	800555a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80054de:	4b2b      	ldr	r3, [pc, #172]	; (800558c <SystemCoreClockUpdate+0xe8>)
 80054e0:	4a2c      	ldr	r2, [pc, #176]	; (8005594 <SystemCoreClockUpdate+0xf0>)
 80054e2:	601a      	str	r2, [r3, #0]
      break;
 80054e4:	e039      	b.n	800555a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80054e6:	4b28      	ldr	r3, [pc, #160]	; (8005588 <SystemCoreClockUpdate+0xe4>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	0d9b      	lsrs	r3, r3, #22
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054f2:	4b25      	ldr	r3, [pc, #148]	; (8005588 <SystemCoreClockUpdate+0xe4>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054fa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00c      	beq.n	800551c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005502:	4a24      	ldr	r2, [pc, #144]	; (8005594 <SystemCoreClockUpdate+0xf0>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <SystemCoreClockUpdate+0xe4>)
 800550c:	6852      	ldr	r2, [r2, #4]
 800550e:	0992      	lsrs	r2, r2, #6
 8005510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005514:	fb02 f303 	mul.w	r3, r2, r3
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e00b      	b.n	8005534 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800551c:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <SystemCoreClockUpdate+0xec>)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	4a18      	ldr	r2, [pc, #96]	; (8005588 <SystemCoreClockUpdate+0xe4>)
 8005526:	6852      	ldr	r2, [r2, #4]
 8005528:	0992      	lsrs	r2, r2, #6
 800552a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005534:	4b14      	ldr	r3, [pc, #80]	; (8005588 <SystemCoreClockUpdate+0xe4>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	3301      	adds	r3, #1
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	4a0f      	ldr	r2, [pc, #60]	; (800558c <SystemCoreClockUpdate+0xe8>)
 800554e:	6013      	str	r3, [r2, #0]
      break;
 8005550:	e003      	b.n	800555a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8005552:	4b0e      	ldr	r3, [pc, #56]	; (800558c <SystemCoreClockUpdate+0xe8>)
 8005554:	4a0e      	ldr	r2, [pc, #56]	; (8005590 <SystemCoreClockUpdate+0xec>)
 8005556:	601a      	str	r2, [r3, #0]
      break;
 8005558:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <SystemCoreClockUpdate+0xe4>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <SystemCoreClockUpdate+0xf4>)
 8005566:	5cd3      	ldrb	r3, [r2, r3]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800556c:	4b07      	ldr	r3, [pc, #28]	; (800558c <SystemCoreClockUpdate+0xe8>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	fa22 f303 	lsr.w	r3, r2, r3
 8005576:	4a05      	ldr	r2, [pc, #20]	; (800558c <SystemCoreClockUpdate+0xe8>)
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40023800 	.word	0x40023800
 800558c:	2000003c 	.word	0x2000003c
 8005590:	00f42400 	.word	0x00f42400
 8005594:	007a1200 	.word	0x007a1200
 8005598:	20000040 	.word	0x20000040

0800559c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80055a2:	2300      	movs	r3, #0
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	2300      	movs	r3, #0
 80055a8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80055aa:	4a36      	ldr	r2, [pc, #216]	; (8005684 <SetSysClock+0xe8>)
 80055ac:	4b35      	ldr	r3, [pc, #212]	; (8005684 <SetSysClock+0xe8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80055b6:	4b33      	ldr	r3, [pc, #204]	; (8005684 <SetSysClock+0xe8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055be:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3301      	adds	r3, #1
 80055c4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d103      	bne.n	80055d4 <SetSysClock+0x38>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80055d2:	d1f0      	bne.n	80055b6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80055d4:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <SetSysClock+0xe8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80055e0:	2301      	movs	r3, #1
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	e001      	b.n	80055ea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80055e6:	2300      	movs	r3, #0
 80055e8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d142      	bne.n	8005676 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80055f0:	4a24      	ldr	r2, [pc, #144]	; (8005684 <SetSysClock+0xe8>)
 80055f2:	4b24      	ldr	r3, [pc, #144]	; (8005684 <SetSysClock+0xe8>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80055fc:	4a22      	ldr	r2, [pc, #136]	; (8005688 <SetSysClock+0xec>)
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <SetSysClock+0xec>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005606:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005608:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <SetSysClock+0xe8>)
 800560a:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <SetSysClock+0xe8>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005610:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <SetSysClock+0xe8>)
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <SetSysClock+0xe8>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <SetSysClock+0xe8>)
 800561e:	4b19      	ldr	r3, [pc, #100]	; (8005684 <SetSysClock+0xe8>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005626:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005628:	4b16      	ldr	r3, [pc, #88]	; (8005684 <SetSysClock+0xe8>)
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <SetSysClock+0xf0>)
 800562c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <SetSysClock+0xe8>)
 8005630:	4b14      	ldr	r3, [pc, #80]	; (8005684 <SetSysClock+0xe8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005638:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800563a:	bf00      	nop
 800563c:	4b11      	ldr	r3, [pc, #68]	; (8005684 <SetSysClock+0xe8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f9      	beq.n	800563c <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005648:	4b11      	ldr	r3, [pc, #68]	; (8005690 <SetSysClock+0xf4>)
 800564a:	f240 7205 	movw	r2, #1797	; 0x705
 800564e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005650:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <SetSysClock+0xe8>)
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <SetSysClock+0xe8>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800565c:	4a09      	ldr	r2, [pc, #36]	; (8005684 <SetSysClock+0xe8>)
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <SetSysClock+0xe8>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f043 0302 	orr.w	r3, r3, #2
 8005666:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL){;}
 8005668:	bf00      	nop
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <SetSysClock+0xe8>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b08      	cmp	r3, #8
 8005674:	d1f9      	bne.n	800566a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	40007000 	.word	0x40007000
 800568c:	07405408 	.word	0x07405408
 8005690:	40023c00 	.word	0x40023c00

08005694 <init_timer>:

static GLOBALS_t   TimrGlobals;


void init_timer( void )
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
	TimrGlobals.SysTicks = 0;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <init_timer+0x14>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
}
 800569e:	bf00      	nop
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20004b7c 	.word	0x20004b7c

080056ac <GetSysTick>:


uint32_t GetSysTick( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
    return TimrGlobals.SysTicks;
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <GetSysTick+0x14>)
 80056b2:	681b      	ldr	r3, [r3, #0]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20004b7c 	.word	0x20004b7c

080056c4 <GetSysDelta>:


uint32_t GetSysDelta( uint32_t OriginalTime )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
    uint32_t v = TimrGlobals.SysTicks;
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <GetSysDelta+0x30>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]

    if( v >= OriginalTime )
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d303      	bcc.n	80056e2 <GetSysDelta+0x1e>
        return( v - OriginalTime );
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	e002      	b.n	80056e8 <GetSysDelta+0x24>
    else
        return( ~OriginalTime + 1 + v );
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	1ad3      	subs	r3, r2, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20004b7c 	.word	0x20004b7c

080056f8 <Increment_SysTicks>:


void Increment_SysTicks( void )
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
	++TimrGlobals.SysTicks;
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <Increment_SysTicks+0x18>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	4a03      	ldr	r2, [pc, #12]	; (8005710 <Increment_SysTicks+0x18>)
 8005704:	6013      	str	r3, [r2, #0]
}
 8005706:	bf00      	nop
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20004b7c 	.word	0x20004b7c

08005714 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8005720:	2301      	movs	r3, #1
 8005722:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8005724:	e004      	b.n	8005730 <ts_itoa+0x1c>
		div *= base;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	fb02 f303 	mul.w	r3, r2, r3
 800572e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	fbb2 f2f3 	udiv	r2, r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	429a      	cmp	r2, r3
 800573c:	d2f3      	bcs.n	8005726 <ts_itoa+0x12>

	while (div != 0)
 800573e:	e029      	b.n	8005794 <ts_itoa+0x80>
	{
		int num = d/div;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	613b      	str	r3, [r7, #16]
		d = d%div;
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005752:	fb02 f201 	mul.w	r2, r2, r1
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	60bb      	str	r3, [r7, #8]
		div /= base;
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005762:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b09      	cmp	r3, #9
 8005768:	dd0a      	ble.n	8005780 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	6011      	str	r1, [r2, #0]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	3237      	adds	r2, #55	; 0x37
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e009      	b.n	8005794 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	1c59      	adds	r1, r3, #1
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	6011      	str	r1, [r2, #0]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	3230      	adds	r2, #48	; 0x30
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1d2      	bne.n	8005740 <ts_itoa+0x2c>
	}
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b088      	sub	sp, #32
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80057b6:	e07d      	b.n	80058b4 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b25      	cmp	r3, #37	; 0x25
 80057be:	d171      	bne.n	80058a4 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d01e      	beq.n	800580c <ts_formatstring+0x66>
 80057ce:	2b64      	cmp	r3, #100	; 0x64
 80057d0:	dc06      	bgt.n	80057e0 <ts_formatstring+0x3a>
 80057d2:	2b58      	cmp	r3, #88	; 0x58
 80057d4:	d050      	beq.n	8005878 <ts_formatstring+0xd2>
 80057d6:	2b63      	cmp	r3, #99	; 0x63
 80057d8:	d00e      	beq.n	80057f8 <ts_formatstring+0x52>
 80057da:	2b25      	cmp	r3, #37	; 0x25
 80057dc:	d058      	beq.n	8005890 <ts_formatstring+0xea>
 80057de:	e05d      	b.n	800589c <ts_formatstring+0xf6>
 80057e0:	2b73      	cmp	r3, #115	; 0x73
 80057e2:	d02b      	beq.n	800583c <ts_formatstring+0x96>
 80057e4:	2b73      	cmp	r3, #115	; 0x73
 80057e6:	dc02      	bgt.n	80057ee <ts_formatstring+0x48>
 80057e8:	2b69      	cmp	r3, #105	; 0x69
 80057ea:	d00f      	beq.n	800580c <ts_formatstring+0x66>
 80057ec:	e056      	b.n	800589c <ts_formatstring+0xf6>
 80057ee:	2b75      	cmp	r3, #117	; 0x75
 80057f0:	d037      	beq.n	8005862 <ts_formatstring+0xbc>
 80057f2:	2b78      	cmp	r3, #120	; 0x78
 80057f4:	d040      	beq.n	8005878 <ts_formatstring+0xd2>
 80057f6:	e051      	b.n	800589c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	60fa      	str	r2, [r7, #12]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	1d11      	adds	r1, r2, #4
 8005802:	6079      	str	r1, [r7, #4]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
				break;
 800580a:	e047      	b.n	800589c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da07      	bge.n	800582c <ts_formatstring+0x86>
					{
						val *= -1;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	425b      	negs	r3, r3
 8005820:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	222d      	movs	r2, #45	; 0x2d
 800582a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800582c:	69f9      	ldr	r1, [r7, #28]
 800582e:	f107 030c 	add.w	r3, r7, #12
 8005832:	220a      	movs	r2, #10
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ff6d 	bl	8005714 <ts_itoa>
				}
				break;
 800583a:	e02f      	b.n	800589c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	1d1a      	adds	r2, r3, #4
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8005846:	e007      	b.n	8005858 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	60fa      	str	r2, [r7, #12]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	1c51      	adds	r1, r2, #1
 8005852:	61b9      	str	r1, [r7, #24]
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f3      	bne.n	8005848 <ts_formatstring+0xa2>
					}
				}
				break;
 8005860:	e01c      	b.n	800589c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	1d1a      	adds	r2, r3, #4
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	6819      	ldr	r1, [r3, #0]
 800586a:	f107 030c 	add.w	r3, r7, #12
 800586e:	220a      	movs	r2, #10
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff4f 	bl	8005714 <ts_itoa>
				break;
 8005876:	e011      	b.n	800589c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1d1a      	adds	r2, r3, #4
 800587c:	607a      	str	r2, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4619      	mov	r1, r3
 8005882:	f107 030c 	add.w	r3, r7, #12
 8005886:	2210      	movs	r2, #16
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff ff43 	bl	8005714 <ts_itoa>
				break;
 800588e:	e005      	b.n	800589c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	60fa      	str	r2, [r7, #12]
 8005896:	2225      	movs	r2, #37	; 0x25
 8005898:	701a      	strb	r2, [r3, #0]
				  break;
 800589a:	bf00      	nop
			}
			fmt++;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	3301      	adds	r3, #1
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	e007      	b.n	80058b4 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	60fa      	str	r2, [r7, #12]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	1c51      	adds	r1, r2, #1
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	7812      	ldrb	r2, [r2, #0]
 80058b2:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f47f af7d 	bne.w	80057b8 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	461a      	mov	r2, r3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
	int length = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80058e2:	e081      	b.n	80059e8 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b25      	cmp	r3, #37	; 0x25
 80058ea:	d177      	bne.n	80059dc <ts_formatlength+0x108>
		{
			++fmt;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3301      	adds	r3, #1
 80058f0:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	3b58      	subs	r3, #88	; 0x58
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d86a      	bhi.n	80059d2 <ts_formatlength+0xfe>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <ts_formatlength+0x30>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	080059c5 	.word	0x080059c5
 8005908:	080059d3 	.word	0x080059d3
 800590c:	080059d3 	.word	0x080059d3
 8005910:	080059d3 	.word	0x080059d3
 8005914:	080059d3 	.word	0x080059d3
 8005918:	080059d3 	.word	0x080059d3
 800591c:	080059d3 	.word	0x080059d3
 8005920:	080059d3 	.word	0x080059d3
 8005924:	080059d3 	.word	0x080059d3
 8005928:	080059d3 	.word	0x080059d3
 800592c:	080059d3 	.word	0x080059d3
 8005930:	08005989 	.word	0x08005989
 8005934:	08005997 	.word	0x08005997
 8005938:	080059d3 	.word	0x080059d3
 800593c:	080059d3 	.word	0x080059d3
 8005940:	080059d3 	.word	0x080059d3
 8005944:	080059d3 	.word	0x080059d3
 8005948:	08005997 	.word	0x08005997
 800594c:	080059d3 	.word	0x080059d3
 8005950:	080059d3 	.word	0x080059d3
 8005954:	080059d3 	.word	0x080059d3
 8005958:	080059d3 	.word	0x080059d3
 800595c:	080059d3 	.word	0x080059d3
 8005960:	080059d3 	.word	0x080059d3
 8005964:	080059d3 	.word	0x080059d3
 8005968:	080059d3 	.word	0x080059d3
 800596c:	080059d3 	.word	0x080059d3
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059d3 	.word	0x080059d3
 8005978:	08005997 	.word	0x08005997
 800597c:	080059d3 	.word	0x080059d3
 8005980:	080059d3 	.word	0x080059d3
 8005984:	080059c5 	.word	0x080059c5
			{
			  case 'c':
		  		  va_arg(va, int);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	3304      	adds	r3, #4
 800598c:	603b      	str	r3, [r7, #0]
				  ++length;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
				  break;
 8005994:	e025      	b.n	80059e2 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	330b      	adds	r3, #11
 800599a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	3304      	adds	r3, #4
 80059a0:	603b      	str	r3, [r7, #0]
				  break;
 80059a2:	e01e      	b.n	80059e2 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	1d1a      	adds	r2, r3, #4
 80059a8:	603a      	str	r2, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80059ae:	e002      	b.n	80059b6 <ts_formatlength+0xe2>
			  			  ++length;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	60ba      	str	r2, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f6      	bne.n	80059b0 <ts_formatlength+0xdc>
			  	  }
				  break;
 80059c2:	e00e      	b.n	80059e2 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3308      	adds	r3, #8
 80059c8:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	3304      	adds	r3, #4
 80059ce:	603b      	str	r3, [r7, #0]
				  break;
 80059d0:	e007      	b.n	80059e2 <ts_formatlength+0x10e>
			  default:
				  ++length;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
				  break;
 80059d8:	bf00      	nop
 80059da:	e002      	b.n	80059e2 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3301      	adds	r3, #1
 80059e6:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f47f af79 	bne.w	80058e4 <ts_formatlength+0x10>
	}
	return length;
 80059f2:	68fb      	ldr	r3, [r7, #12]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8005a00:	b40f      	push	{r0, r1, r2, r3}
 8005a02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
	int length = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8005a0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a12:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a18:	f7ff ff5c 	bl	80058d4 <ts_formatlength>
 8005a1c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8005a1e:	466b      	mov	r3, sp
 8005a20:	461e      	mov	r6, r3
		char buf[length];
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	1e4b      	subs	r3, r1, #1
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8005a34:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8005a38:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	00dd      	lsls	r5, r3, #3
 8005a46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a4a:	00d4      	lsls	r4, r2, #3
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	3307      	adds	r3, #7
 8005a50:	08db      	lsrs	r3, r3, #3
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	ebad 0d03 	sub.w	sp, sp, r3
 8005a58:	466b      	mov	r3, sp
 8005a5a:	3300      	adds	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8005a5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a62:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fe9b 	bl	80057a6 <ts_formatstring>
 8005a70:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4619      	mov	r1, r3
 8005a78:	2001      	movs	r0, #1
 8005a7a:	f7fe fe93 	bl	80047a4 <_write>
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8005a82:	68fb      	ldr	r3, [r7, #12]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a8e:	b004      	add	sp, #16
 8005a90:	4770      	bx	lr
	...

08005a94 <BtoH>:
                        '8', '9' ,'A', 'B', 'C', 'D', 'E', 'F' };



void BtoH( u8 val, char *S )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	6039      	str	r1, [r7, #0]
 8005a9e:	71fb      	strb	r3, [r7, #7]
    s8 k;

    for( k=1; k >= 0; --k )
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
 8005aa4:	e010      	b.n	8005ac8 <BtoH+0x34>
    {
        S[k]   = hexv[val & 0xF];
 8005aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	4413      	add	r3, r2
 8005aae:	79fa      	ldrb	r2, [r7, #7]
 8005ab0:	f002 020f 	and.w	r2, r2, #15
 8005ab4:	490b      	ldr	r1, [pc, #44]	; (8005ae4 <BtoH+0x50>)
 8005ab6:	5c8a      	ldrb	r2, [r1, r2]
 8005ab8:	701a      	strb	r2, [r3, #0]
        val  >>= 4;
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	091b      	lsrs	r3, r3, #4
 8005abe:	71fb      	strb	r3, [r7, #7]
    for( k=1; k >= 0; --k )
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	daea      	bge.n	8005aa6 <BtoH+0x12>
    }

    S[2] = 0;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	701a      	strb	r2, [r3, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	20000050 	.word	0x20000050

08005ae8 <ItoH>:




void ItoH( u32 val, char *S )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
    s8  k;

    for( k=7; k >= 0; --k )
 8005af2:	2307      	movs	r3, #7
 8005af4:	73fb      	strb	r3, [r7, #15]
 8005af6:	e010      	b.n	8005b1a <ItoH+0x32>
    {
        S[k]   = hexv[val & 0xF];
 8005af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	4413      	add	r3, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	f002 020f 	and.w	r2, r2, #15
 8005b06:	490c      	ldr	r1, [pc, #48]	; (8005b38 <ItoH+0x50>)
 8005b08:	5c8a      	ldrb	r2, [r1, r2]
 8005b0a:	701a      	strb	r2, [r3, #0]
        val  >>= 4;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	091b      	lsrs	r3, r3, #4
 8005b10:	607b      	str	r3, [r7, #4]
    for( k=7; k >= 0; --k )
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	daea      	bge.n	8005af8 <ItoH+0x10>
    }

    S[8] = 0;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	3308      	adds	r3, #8
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000050 	.word	0x20000050

08005b3c <ItoH16>:


void ItoH16( u16 val, char *S )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4603      	mov	r3, r0
 8005b44:	6039      	str	r1, [r7, #0]
 8005b46:	80fb      	strh	r3, [r7, #6]
    s8  k;

    for( k=3; k >= 0; --k )
 8005b48:	2303      	movs	r3, #3
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e010      	b.n	8005b70 <ItoH16+0x34>
    {
        S[k]   = hexv[val & 0xF];
 8005b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	f002 020f 	and.w	r2, r2, #15
 8005b5c:	490b      	ldr	r1, [pc, #44]	; (8005b8c <ItoH16+0x50>)
 8005b5e:	5c8a      	ldrb	r2, [r1, r2]
 8005b60:	701a      	strb	r2, [r3, #0]
        val  >>= 4;
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	80fb      	strh	r3, [r7, #6]
    for( k=3; k >= 0; --k )
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	daea      	bge.n	8005b4e <ItoH16+0x12>
    }

    S[4] = 0;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000050 	.word	0x20000050

08005b90 <HtoI>:



uint32_t HtoI( const char *ptr )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
    uint32_t  value = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]
    char      ch      = *ptr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	72fb      	strb	r3, [r7, #11]

    while (ch == ' ' || ch == '\t')
 8005ba2:	e005      	b.n	8005bb0 <HtoI+0x20>
        ch = *(++ptr);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	72fb      	strb	r3, [r7, #11]
    while (ch == ' ' || ch == '\t')
 8005bb0:	7afb      	ldrb	r3, [r7, #11]
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d0f6      	beq.n	8005ba4 <HtoI+0x14>
 8005bb6:	7afb      	ldrb	r3, [r7, #11]
 8005bb8:	2b09      	cmp	r3, #9
 8005bba:	d0f3      	beq.n	8005ba4 <HtoI+0x14>

    for (;;) {

        if (ch >= '0' && ch <= '9')
 8005bbc:	7afb      	ldrb	r3, [r7, #11]
 8005bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8005bc0:	d909      	bls.n	8005bd6 <HtoI+0x46>
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	2b39      	cmp	r3, #57	; 0x39
 8005bc6:	d806      	bhi.n	8005bd6 <HtoI+0x46>
            value = (value << 4) + (ch - '0');
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	011a      	lsls	r2, r3, #4
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	4413      	add	r3, r2
 8005bd0:	3b30      	subs	r3, #48	; 0x30
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e01b      	b.n	8005c0e <HtoI+0x7e>
        else if (ch >= 'A' && ch <= 'F')
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d909      	bls.n	8005bf0 <HtoI+0x60>
 8005bdc:	7afb      	ldrb	r3, [r7, #11]
 8005bde:	2b46      	cmp	r3, #70	; 0x46
 8005be0:	d806      	bhi.n	8005bf0 <HtoI+0x60>
            value = (value << 4) + (ch - 'A' + 10);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	7afb      	ldrb	r3, [r7, #11]
 8005be8:	4413      	add	r3, r2
 8005bea:	3b37      	subs	r3, #55	; 0x37
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e00e      	b.n	8005c0e <HtoI+0x7e>
        else if (ch >= 'a' && ch <= 'f')
 8005bf0:	7afb      	ldrb	r3, [r7, #11]
 8005bf2:	2b60      	cmp	r3, #96	; 0x60
 8005bf4:	d909      	bls.n	8005c0a <HtoI+0x7a>
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	2b66      	cmp	r3, #102	; 0x66
 8005bfa:	d806      	bhi.n	8005c0a <HtoI+0x7a>
            value = (value << 4) + (ch - 'a' + 10);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	011a      	lsls	r2, r3, #4
 8005c00:	7afb      	ldrb	r3, [r7, #11]
 8005c02:	4413      	add	r3, r2
 8005c04:	3b57      	subs	r3, #87	; 0x57
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e001      	b.n	8005c0e <HtoI+0x7e>
        else
            return value;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	e006      	b.n	8005c1c <HtoI+0x8c>
        ch = *(++ptr);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3301      	adds	r3, #1
 8005c12:	607b      	str	r3, [r7, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	72fb      	strb	r3, [r7, #11]
        if (ch >= '0' && ch <= '9')
 8005c1a:	e7cf      	b.n	8005bbc <HtoI+0x2c>
    }
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <AtoI>:


int AtoI( const char *p )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
    int n,f;

    n=f=0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	60fb      	str	r3, [r7, #12]

    for( ; ; p++ )
    {
        switch( *p )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	3b09      	subs	r3, #9
 8005c3e:	2b24      	cmp	r3, #36	; 0x24
 8005c40:	d856      	bhi.n	8005cf0 <AtoI+0xc8>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <AtoI+0x20>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005cdd 	.word	0x08005cdd
 8005c4c:	08005cf1 	.word	0x08005cf1
 8005c50:	08005cf1 	.word	0x08005cf1
 8005c54:	08005cf1 	.word	0x08005cf1
 8005c58:	08005cf1 	.word	0x08005cf1
 8005c5c:	08005cf1 	.word	0x08005cf1
 8005c60:	08005cf1 	.word	0x08005cf1
 8005c64:	08005cf1 	.word	0x08005cf1
 8005c68:	08005cf1 	.word	0x08005cf1
 8005c6c:	08005cf1 	.word	0x08005cf1
 8005c70:	08005cf1 	.word	0x08005cf1
 8005c74:	08005cf1 	.word	0x08005cf1
 8005c78:	08005cf1 	.word	0x08005cf1
 8005c7c:	08005cf1 	.word	0x08005cf1
 8005c80:	08005cf1 	.word	0x08005cf1
 8005c84:	08005cf1 	.word	0x08005cf1
 8005c88:	08005cf1 	.word	0x08005cf1
 8005c8c:	08005cf1 	.word	0x08005cf1
 8005c90:	08005cf1 	.word	0x08005cf1
 8005c94:	08005cf1 	.word	0x08005cf1
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005cf1 	.word	0x08005cf1
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf1 	.word	0x08005cf1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005cf1 	.word	0x08005cf1
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005cf1 	.word	0x08005cf1
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005ceb 	.word	0x08005ceb
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	08005ce5 	.word	0x08005ce5
    for( ; ; p++ )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	607b      	str	r3, [r7, #4]
        switch( *p )
 8005ce2:	e7a9      	b.n	8005c38 <AtoI+0x10>
        {
            case ' ':
            case '\t':    continue;
            case '-':     f++;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60bb      	str	r3, [r7, #8]
            case '+':     p++;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3301      	adds	r3, #1
 8005cee:	607b      	str	r3, [r7, #4]
        }
        break;
 8005cf0:	bf00      	nop
    }

    while( *p >= '0' && *p <= '9')
 8005cf2:	e00c      	b.n	8005d0e <AtoI+0xe6>
        n = n*10 + *p++ - '0';
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4619      	mov	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	440b      	add	r3, r1
 8005d0a:	3b30      	subs	r3, #48	; 0x30
 8005d0c:	60fb      	str	r3, [r7, #12]
    while( *p >= '0' && *p <= '9')
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b2f      	cmp	r3, #47	; 0x2f
 8005d14:	d903      	bls.n	8005d1e <AtoI+0xf6>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b39      	cmp	r3, #57	; 0x39
 8005d1c:	d9ea      	bls.n	8005cf4 <AtoI+0xcc>

    return(f ? -n : n);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <AtoI+0x102>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	425b      	negs	r3, r3
 8005d28:	e000      	b.n	8005d2c <AtoI+0x104>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HtoU16>:


uint16_t HtoU16( char *pstr )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    uint8_t    i,j;
    uint16_t   ch,sum;

    switch( strlen(pstr) )
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fa fa45 	bl	80001d0 <strlen>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d006      	beq.n	8005d5a <HtoU16+0x22>
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d007      	beq.n	8005d60 <HtoU16+0x28>
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d108      	bne.n	8005d66 <HtoU16+0x2e>
    {
        case 1:   j = 0;   break;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73bb      	strb	r3, [r7, #14]
 8005d58:	e008      	b.n	8005d6c <HtoU16+0x34>
        case 2:   j = 4;   break;
 8005d5a:	2304      	movs	r3, #4
 8005d5c:	73bb      	strb	r3, [r7, #14]
 8005d5e:	e005      	b.n	8005d6c <HtoU16+0x34>
        case 3:   j = 8;   break;
 8005d60:	2308      	movs	r3, #8
 8005d62:	73bb      	strb	r3, [r7, #14]
 8005d64:	e002      	b.n	8005d6c <HtoU16+0x34>
        default:  j = 12;  break;
 8005d66:	230c      	movs	r3, #12
 8005d68:	73bb      	strb	r3, [r7, #14]
 8005d6a:	bf00      	nop
    }

    for( i=0,sum=0; pstr[i] && i < 4; ++i,j-=4 )
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
 8005d70:	2300      	movs	r3, #0
 8005d72:	817b      	strh	r3, [r7, #10]
 8005d74:	e034      	b.n	8005de0 <HtoU16+0xa8>
    {
        ch = pstr[i];
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	81bb      	strh	r3, [r7, #12]

        if     ( ch >= '0' && ch <= '9' ) ch -= '0';
 8005d80:	89bb      	ldrh	r3, [r7, #12]
 8005d82:	2b2f      	cmp	r3, #47	; 0x2f
 8005d84:	d906      	bls.n	8005d94 <HtoU16+0x5c>
 8005d86:	89bb      	ldrh	r3, [r7, #12]
 8005d88:	2b39      	cmp	r3, #57	; 0x39
 8005d8a:	d803      	bhi.n	8005d94 <HtoU16+0x5c>
 8005d8c:	89bb      	ldrh	r3, [r7, #12]
 8005d8e:	3b30      	subs	r3, #48	; 0x30
 8005d90:	81bb      	strh	r3, [r7, #12]
 8005d92:	e015      	b.n	8005dc0 <HtoU16+0x88>
        else if( ch >= 'A' && ch <= 'F' ) ch -= '7';
 8005d94:	89bb      	ldrh	r3, [r7, #12]
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d906      	bls.n	8005da8 <HtoU16+0x70>
 8005d9a:	89bb      	ldrh	r3, [r7, #12]
 8005d9c:	2b46      	cmp	r3, #70	; 0x46
 8005d9e:	d803      	bhi.n	8005da8 <HtoU16+0x70>
 8005da0:	89bb      	ldrh	r3, [r7, #12]
 8005da2:	3b37      	subs	r3, #55	; 0x37
 8005da4:	81bb      	strh	r3, [r7, #12]
 8005da6:	e00b      	b.n	8005dc0 <HtoU16+0x88>
        else if( ch >= 'a' && ch <= 'f' ) ch -= 'W';
 8005da8:	89bb      	ldrh	r3, [r7, #12]
 8005daa:	2b60      	cmp	r3, #96	; 0x60
 8005dac:	d906      	bls.n	8005dbc <HtoU16+0x84>
 8005dae:	89bb      	ldrh	r3, [r7, #12]
 8005db0:	2b66      	cmp	r3, #102	; 0x66
 8005db2:	d803      	bhi.n	8005dbc <HtoU16+0x84>
 8005db4:	89bb      	ldrh	r3, [r7, #12]
 8005db6:	3b57      	subs	r3, #87	; 0x57
 8005db8:	81bb      	strh	r3, [r7, #12]
 8005dba:	e001      	b.n	8005dc0 <HtoU16+0x88>
        else                              ch  = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	81bb      	strh	r3, [r7, #12]

        sum = sum | ( ch << j );
 8005dc0:	89ba      	ldrh	r2, [r7, #12]
 8005dc2:	7bbb      	ldrb	r3, [r7, #14]
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	b21a      	sxth	r2, r3
 8005dca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b21b      	sxth	r3, r3
 8005dd2:	817b      	strh	r3, [r7, #10]
    for( i=0,sum=0; pstr[i] && i < 4; ++i,j-=4 )
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	73fb      	strb	r3, [r7, #15]
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	73bb      	strb	r3, [r7, #14]
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4413      	add	r3, r2
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HtoU16+0xba>
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d9c1      	bls.n	8005d76 <HtoU16+0x3e>
    }
    return sum;
 8005df2:	897b      	ldrh	r3, [r7, #10]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <Hammer>:


void Hammer( u8 nparm )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
        ;
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <swap>:


void swap( u16 *sptr )
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
    u8  *bptr = (u8 *)sptr;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
    u8  tmp   = bptr[0];
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	72fb      	strb	r3, [r7, #11]

    bptr[0] = bptr[1];
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	785a      	ldrb	r2, [r3, #1]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	701a      	strb	r2, [r3, #0]
    bptr[1] = tmp;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	7afa      	ldrb	r2, [r7, #11]
 8005e32:	701a      	strb	r2, [r3, #0]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <__libc_init_array>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	4e0d      	ldr	r6, [pc, #52]	; (8005e78 <__libc_init_array+0x38>)
 8005e44:	4c0d      	ldr	r4, [pc, #52]	; (8005e7c <__libc_init_array+0x3c>)
 8005e46:	1ba4      	subs	r4, r4, r6
 8005e48:	10a4      	asrs	r4, r4, #2
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	42a5      	cmp	r5, r4
 8005e4e:	d109      	bne.n	8005e64 <__libc_init_array+0x24>
 8005e50:	4e0b      	ldr	r6, [pc, #44]	; (8005e80 <__libc_init_array+0x40>)
 8005e52:	4c0c      	ldr	r4, [pc, #48]	; (8005e84 <__libc_init_array+0x44>)
 8005e54:	f000 f838 	bl	8005ec8 <_init>
 8005e58:	1ba4      	subs	r4, r4, r6
 8005e5a:	10a4      	asrs	r4, r4, #2
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	42a5      	cmp	r5, r4
 8005e60:	d105      	bne.n	8005e6e <__libc_init_array+0x2e>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e68:	4798      	blx	r3
 8005e6a:	3501      	adds	r5, #1
 8005e6c:	e7ee      	b.n	8005e4c <__libc_init_array+0xc>
 8005e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e72:	4798      	blx	r3
 8005e74:	3501      	adds	r5, #1
 8005e76:	e7f2      	b.n	8005e5e <__libc_init_array+0x1e>
 8005e78:	080061e4 	.word	0x080061e4
 8005e7c:	080061e4 	.word	0x080061e4
 8005e80:	080061e4 	.word	0x080061e4
 8005e84:	080061e8 	.word	0x080061e8

08005e88 <memcpy>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	1e43      	subs	r3, r0, #1
 8005e8c:	440a      	add	r2, r1
 8005e8e:	4291      	cmp	r1, r2
 8005e90:	d100      	bne.n	8005e94 <memcpy+0xc>
 8005e92:	bd10      	pop	{r4, pc}
 8005e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e9c:	e7f7      	b.n	8005e8e <memcpy+0x6>

08005e9e <strncpy>:
 8005e9e:	b570      	push	{r4, r5, r6, lr}
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	b902      	cbnz	r2, 8005ea6 <strncpy+0x8>
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	f811 5b01 	ldrb.w	r5, [r1], #1
 8005eac:	f803 5b01 	strb.w	r5, [r3], #1
 8005eb0:	1e56      	subs	r6, r2, #1
 8005eb2:	b91d      	cbnz	r5, 8005ebc <strncpy+0x1e>
 8005eb4:	4414      	add	r4, r2
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	d103      	bne.n	8005ec2 <strncpy+0x24>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	461c      	mov	r4, r3
 8005ebe:	4632      	mov	r2, r6
 8005ec0:	e7ef      	b.n	8005ea2 <strncpy+0x4>
 8005ec2:	f803 5b01 	strb.w	r5, [r3], #1
 8005ec6:	e7f6      	b.n	8005eb6 <strncpy+0x18>

08005ec8 <_init>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr

08005ed4 <_fini>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	bf00      	nop
 8005ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eda:	bc08      	pop	{r3}
 8005edc:	469e      	mov	lr, r3
 8005ede:	4770      	bx	lr
